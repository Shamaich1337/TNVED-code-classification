[{'role': 'system', 'content': 'You are a technical specialist with expertise in electronics. Your task is to analyze datasheets for electronic components and provide a concise summary of the product’s key characteristics and specifications. In addition, you need to gather textual information about the component, including its description and typical applications.Instructions:    Identify the correct component in the datasheet using the provided product code.    Summarize key parameters, including:        Voltage ratings        Current ratings        Power consumption        Operating temperature range        Package type        Special features or notes (if applicable)        Moisture Sensetive Level JEDEC J-STD-020E    Provide a short description of the component, including what it is (e.g., transistor, microcontroller, sensor) and its primary function.    Explain typical applications for the component (e.g., power management, signal processing, data storage, etc.).    Be thorough and accurate: Ensure the information corresponds specifically to the product code, as some datasheets cover multiple variants.Your goal is to create a clear and accurate technical summary that includes both key specifications and a description of what the component is used for.'}, {'role': 'user', 'content': 'Give me information about the component of ADSP-2191MBSTZ-140 production of ANALOG DEVICES from the text:aDSP Microcomputer\nInformation furnished by Analog Devices  is believed to be accurate and\nreliable. However, no responsibility is  assumed by Analog Devices for its\nuse, nor for any infringeme nts of patents or  other rights of third parties that\nmay result from its use. No license is  granted by implication or otherwise\nunder any patent or patent  rights of Analog Devices.One Technology Way, P.O.Box 9106, Norwood, MA 02062-9106, U.S.A.\nTel:781/329-4700 www.analog.com\nFax:781/326-8703 © Analog Devices, Inc., 2002REV. AADSP-2191M\nPERFORMANCE FEATURES\n6.25 ns Instruction Cycle Time, for up to 160 MIPS \nSustained Performance\nADSP-218x Family Code Compatible with the Same \nEasy to Use Algebraic Syntax\nSingle-Cycle Instruction ExecutionSingle-Cycle Context Switch between T wo Sets of Com- \nputation and Memory Instructions\nInstruction Cache Allows Dual Operand Fetches in Every \nInstruction CycleMultifunction InstructionsPipelined Architecture Supports Efficient Code \nExecution \nArchitectural Enhancements for Compiled C and C++ \nCode Efficiency\nArchitectural Enhancements beyond ADSP-218x Family \nare Supported with Instruction Set Extensions for Added Registers, and Peripherals\nFlexible Power Management  with User-Selectable \nPower-Down and Idle Modes\nFUNCTIONAL BLOCK DIAGRAM\nDATA ADDRESSBLOCK3\nDATA ADDRESSBLOCK2\n2\nSYSTEM INTERRUPT CONTROLLERI/O DATA\nSERIAL PORTS\n(3)\nSPI PORTS\n(2)18I/O REGISTERS\n(MEMORY-MAPPED)\nCONTROL\nSTATUS\nBUFFERSI/O PROCESSORCACHE\n64/H1154724-BITJTAG\nTEST &\nEMULATION6\nADDR BUS\nMUX\nDATA BUS\nMUX1622PM ADDRESS BUS\nDM ADDRESS BUS\nPM DATA BUS\nDM DATA BUSPX24\n16ADSP-219x\nDSP CORE\nPROGRAM\nSEQUENCER\nDATA\nREGISTER\nFILE\nMULTBARREL\nSHIFTERALU\nUART PORT\n(1)DMA\nCONTROLLER 6INPUT\nREGISTERS\nRESULT\nREGISTERS\n16/H1154716-BITHOST PORT24DAG1\n4/H115474/H1154716DAG2\n4/H115474/H1154716INTERNAL MEMORY\n24\n24ADDRESS BLOCK1\nDATADATA ADDRESSBLOCK0\n24 BIT\n16 BIT\n16 BITFOUR INDEPENDENT BLOCKS\nPROGRAMMABLE\nFLAGS (16)TIMERS (3)3DMA\nCONNECTDMA ADDRESSEXTERNAL PORT24 BIT\n18 I/O ADDRESS\n24\n1624 DMA DATA\nADSP-2191M\n–2– REV. AINTEGRATION FEATURES\n160K Bytes On-Chip RAM Configured as 32K Words 24-Bit \nMemory RAM and 32K Words 16-Bit Memory RAM\nDual-Purpose 24-Bit Memory for Both Instruction and \nData Storage\nIndependent ALU, Multiplier/Accumulator, and Barrel \nShifter Computational Units with Dual 40-Bit \nAccumulators\nUnified Memory Space Allows  Flexible Address Genera- \ntion, Using T wo Independent DAG Units\nPowerful Program Sequencer Provides Zero-Overhead \nLooping and Conditional Instruction Execution\nEnhanced Interrupt Controller Enables Programming of \nInterrupt Priorities and Nesting Modes\nSYSTEM INTERFACE FEATURES\nHost Port with DMA Capability for Glueless 8- or 16-Bit \nHost Interface\n16-Bit External Memory Interf ace for up to 16M Words of \nAddressable Memory Space \nThree Full-Duplex Multichann el Serial Ports, with \nSupport for H.100 and up to 128 TDM Channels with \nA-Law and /H9262-Law Companding Optimized for T elecom- \nmunications Systems\nT wo SPI-Compatible Ports with DMA Support\nUART Port with DMA Support16 General-Purpose I/O Pins with Integrated Interrupt \nSupport\nThree Programmable Interval Timers with PWM \nGeneration, PWM Capture/Pulsewidth Measurement, \nand External Event Counter Capabilities\nUp to 11 DMA Channels Can Be  Active at Any Given Time \nfor High I/O Throughput\nOn-Chip Boot ROM for Automatic Booting from External \n8- or 16-Bit Host Device, SPI ROM, or UART with \nAutobaud Detection\nProgrammable PLL Supports 1 /H11547 to 32/H11547 Input Frequency \nMultiplication and Can Be Altered during Runtime\nIEEE JTAG Standard 1149.1 T est Access Port Supports \nOn-Chip Emulation and System Debugging\n2.5 V Internal Oper ation and 3.3 V I/O\n144-Lead LQFP and 144-Ball Mini-BGA PackagesTABLE OF CONTENTS\nGENERAL DESCRIPTION . . . . . . . . . . . . . . . . . . . . .3\nDSP Core Architecture . . . . . . . . . . . . . . . . . . . . . . . .3DSP Peripherals Architecture  . . . . . . . . . . . . . . . . . . .4Memory Architecture  . . . . . . . . . . . . . . . . . . . . . . . . .5\nInterrupts  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .6\nDMA Controller . . . . . . . . . . . . . . . . . . . . . . . . . . . . .7Host Port  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .7\nDSP Serial Ports (SPORTs)  . . . . . . . . . . . . . . . . . . . .8\nSerial Peripheral Interface (SPI) Ports . . . . . . . . . . . . .9UART Port . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .9\nProgrammable Flag (PFx) Pins . . . . . . . . . . . . . . . . . .9\nLow Power Operation . . . . . . . . . . . . . . . . . . . . . . . .10Clock Signals  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .11\nReset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .11\nPower Supplies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .11Booting Modes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .11\nBus Request and Bus Grant  . . . . . . . . . . . . . . . . . . .12\nInstruction Set Description . . . . . . . . . . . . . . . . . . . .13Development Tools . . . . . . . . . . . . . . . . . . . . . . . . . .13\nAdditional Information  . . . . . . . . . . . . . . . . . . . . . . .15\nPIN FUNCTION DESCRIPTIONS . . . . . . . . . . . . . .15SPECIFICATIONS . . . . . . . . . . . . . . . . . . . . . . . . . . .18\nABSOLUTE MAXIMUM RATINGS  . . . . . . . . . . .19\nESD SENSITIVITY . . . . . . . . . . . . . . . . . . . . . . . . .19Power Dissipation . . . . . . . . . . . . . . . . . . . . . . . . . . .19\nTIMING SPECIFICATIONS  . . . . . . . . . . . . . . . . .20\nOutput Drive Currents  . . . . . . . . . . . . . . . . . . . . . . .40Power Dissipation . . . . . . . . . . . . . . . . . . . . . . . . . . .40\nTest Conditions  . . . . . . . . . . . . . . . . . . . . . . . . . . . .40\nEnvironmental Conditions  . . . . . . . . . . . . . . . . . . . .41144-Lead LQFP Pinout  . . . . . . . . . . . . . . . . . . . . . .43\n144-Lead Mini-BGA Pinout . . . . . . . . . . . . . . . . . . .45\nOUTLINE DIMENSIONS  . . . . . . . . . . . . . . . . . . . . .47ORDERING GUIDE  . . . . . . . . . . . . . . . . . . . . . . . . .48\nRevision History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .48\n–3– REV. AADSP-2191M\nGENERAL DESCRIPTION\nThe ADSP-2191M DSP is a single-chip microcomputer \noptimized for digital signal pr ocessing (DSP) and other high \nspeed numeric processing applications.\nThe ADSP-2191M combines the ADSP-219x family base \narchitecture (three computational units, two data address gener-\nators, and a program sequencer) with three serial ports, two SPI-compatible ports, one UART port, a DMA controller, three \nprogrammable timers, general-purpose Programmable Flag \npins, extensive interrupt capab ilities, and on-chip program and \ndata memory spaces.\nThe ADSP-2191M architecture is code-compatible with DSPs \nof the ADSP-218x family. Although the architectures are \ncompatible, the ADSP-2191M architecture has a number of \nenhancements over the ADSP-2 18x architecture. The enhance-\nments to computational units, data address generators, and \nprogram sequencer make the ADSP-2191M more flexible and \neven easier to program.\nIndirect addressing options pr ovide addressing flexibility—\npremodify with no update, pre- and post-modify by an immediate 8-bit, two’s-complement value and base address registers for \neasier implementation of circular buffering.\nThe ADSP-2191M integrates 64K words of on-chip memory \nconfigured as 32K words (24-bit) of program RAM, and \n32K words (16-bit) of data RAM. Power-down circuitry is also provided to reduce power consumption. The ADSP-2191M is \navailable in 144-lead LQFP and 144-ball mini-BGA packages.\nFabricated in a high speed, lo w power, CMOS process, the \nADSP-2191M operates with a 6.25 ns instruction cycle time \n(160 MIPS). All instructions, except single-word instructions, execute in one processor.\nThe ADSP-2191M’s flexible architecture and comprehensive \ninstruction set support multiple operations in parallel. For \nexample, in one processor cycle, the ADSP-2191M can:\n•Generate an address for th e next instruction fetch\n•Fetch the next instruction\n•Perform one or two data moves\n•Update one or two data address pointers\n•Perform a computational operation\nThese operations take place while the processor continues to:\n•Receive and transmit data through two serial ports\n•Receive and/or transm it data from a Host\n•Receive or transmit data through the UART\n•Receive or transmit data over two SPI ports\n•Access external memory through the external memory \ninterface\n•Decrement the timers \nDSP Core Architecture\nThe ADSP-2191M instruction set provides flexible data moves \nand multifunction (one or two data moves with a computation) \ninstructions. Every single-word instruction can be executed in a single processor cycle. The ADSP-2191M assembly language uses an algebraic syntax for ease of coding and readability. A \ncomprehensive set of development tools supports program \ndevelopment.\nThe functional block diagram on Page 1  shows the architecture \nof the ADSP-219x core. It contains three independent compu-tational units: the ALU, the multiplier/accumulator (MAC), and \nthe shifter. The computational un its process 16-bit data from the \nregister file and have provisions  to support multiprecision com-\nputations. The ALU performs a standard set of arithmetic and \nlogic operations; division primitives are also supported. The \nMAC performs single-cycle multiply, multiply/add, and multi-ply/subtract operations. The MAC has two 40-bit accumulators, \nwhich help with overflow. The shifter performs logical and arith-\nmetic shifts, normalization, denormalization, and derive exponent operations. The shifte r can be used to efficiently \nimplement numeric format control, including multiword and \nblock floating-point representations.\nRegister-usage rules influence placement of input and results \nwithin the computational units. For most operations, the com-putational units’ data registers act as a data register file, \npermitting any input or result register to provide input to any unit \nfor a computation. For feedback  operations, the computational \nunits let the output (result) of any unit be input to any unit on \nthe next cycle. For conditional or multifunction instructions, \nthere are restrictions on which da ta registers may provide inputs \nor receive results from each co mputational unit. For more infor-\nmation, see the \nADSP-219x DSP Instruction Set Reference .\nA powerful program sequencer controls the flow of instruction \nexecution. The sequencer supports  conditional jumps, subrou-\ntine calls, and low interrupt overhead. With internal loop counters and loop stacks, the ADSP-2191M executes looped \ncode with zero overhead; no explicit jump instructions are \nrequired to maintain loops.\nTwo data address generators (DAGs) provide addresses for \nsimultaneous dual operand fetches (from data memory and program memory). Each DAG maintains and updates four \n16-bit address pointers. Whenever the pointer is used to access \ndata (indirect addressing), it is pre- or post-modified by the value of one of four possible modify registers. A length value and base address may be associated with  each pointer to implement \nautomatic modulo addressing for circular buffers. Page registers \nin the DAGs allow circular addressing within 64K-word bound-aries of each of the 256 memory pages, but these buffers may not \ncross page boundaries. Secondary registers duplicate all the \nprimary registers in the DAGs; switching between primary and secondary registers provides a fast context switch. \nEfficient data transfer in the core is achieved with the use of \ninternal buses:\n•Program Memory Address (PMA) Bus\n•Program Memory Data (PMD) Bus\n•Data Memory Address (DMA) Bus\n•Data Memory Data (DMD) Bus\n•DMA Address Bus\n•DMA Data Bus\nADSP-2191M\n–4– REV. AThe two address buses (PMA and DMA) share a single external \naddress bus, allowing memory to be expanded off-chip, and the \ntwo data buses (PMD and DMD) share a single external data \nbus. Boot memory space and I/O memory space also share the external buses.\nProgram memory can store both instructions and data, permit-\nting the ADSP-2191M to fetch two operands in a single cycle, one from program memory and one from data memory. The \nDSP’s dual memory buses also let the ADSP-219x core fetch an \noperand from data memory an d the next instruction from \nprogram memory in a single cycle.\nDSP Peripherals Architecture\nThe functional block diagram on Page 1  shows the DSP’s \non-chip peripherals, which include the external memory inter-\nface, Host port, serial ports, SPI-compatible ports, UART port, \nJTAG test and emulation port, timers, flags, and interrupt con-troller. These on-chip peripherals can connect to off-chip devices \nas shown in Figure 1 .\nThe ADSP-2191M has a 16-bit Ho st port with DMA capability \nthat lets external Hosts access  on-chip memory. This 24-pin \nparallel port consists of a 16-pin multiplexed data/address bus and provides a lowservice overhead data move capability. Con-\nfigurable for 8 or 16 bits, this port provides a glueless interface \nto a wide variety of 8- and 16-bit microcontrollers. Two chip-selects provide Hosts access to the DSP’s entire memory \nmap. The DSP is bootable through this port.\nThe ADSP-2191M also has an extern al memory interface that is \nshared by the DSP’s core, the DMA controller, and DMA \ncapable peripherals, which include the UART, SPORT0, SPORT1, SPORT2, SPI0, SPI1, and the Host port. The external \nport consists of a 16-bit data bus, a 22-bit address bus, and \ncontrol signals. The data bus is configurable to provide an 8- or 16-bit interface to external me mory. Support for word packing \nlets the DSP access 16- or 24-bit words from external memory \nregardless of the external data bus width. When configured for an 8-bit interface, the unused eight lines provide eight program-\nmable, bidirectional general-pu rpose Programmable Flag lines, \nsix of which can be mapped to software condition signals. \nThe memory DMA controller le ts the ADSP-2191M move data \nand instructions from between memory spaces: internal-to-exter-nal, internal-to-internal, and external-to-external. On-chip \nperipherals can also use this controller for DMA transfers. \nThe ADSP-2191M can respond to up to seventeen interrupts at \nany given time: three internal (stack, emulator kernel, and \npower-down), two external (emulator and reset), and twelve user-defined (peripherals) interrupts. The programmer assigns a \nperipheral to one of the 12 user-d efined interrupts. The priority \nof each peripheral for interrupt service is determined by these \nassignments. \nThere are three serial ports on the ADSP-2191M that provide a \ncomplete synchronous, full-duplex serial interface. This interface includes optional companding in hardware as well as a wide \nvariety of framed or frameless data transmit and receive modes of operation. Each serial port can transmit or receive an internal \nor external, programmable serial  clock and frame syncs. Each \nserial port supports 128-channe l Time Division Multiplexing.\nThe ADSP-2191M provides up to sixteen general-purpose I/O \npins, which are programmable as either inputs or outputs. Eight \nof these pins are dedicated-ge neral purpose Programmable Flag \npins. The other eight of them are multifunctional pins, acting as \ngeneral-purpose I/O pins when the DSP connects to an 8-bit \nexternal data bus and acting as the upper eight data pins when the DSP connects to a 16-bit external data bus. These Program-\nmable Flag pins can implement edge- or level-sensitive \ninterrupts, some of which can be used to base the execution of \nconditional instructions.Figure 1. System DiagramSERIAL\nDEVICE\n(OPTIONAL)DATA15–8\nIOMSADSP-2191M\nBMSMS3–0\nBR\nBGACKWRRDADDR21–0\nDATA7–0DATA15–8ADDR21–0\nDATA7–0\nCS\nACKWEOEEXTERNAL\nMEMORY\n(OPTIONAL)\nDATA15–8ADDR21–0\nDATA7–0\nCS\nACKWEOEBOOT\nMEMORY\n(OPTIONAL)\nDATA15–8ADDR17–0\nDATA7–0\nCS\nACKWEOEEXTERNAL\nI/O MEMORY\n(OPTIONAL)ADDRESS\nCONTROL\nDATA\nADDR15–0/\nDATA15–0\nADDR16\nCS1\nACKWRRDHOST\nPROCESSOR\n(OPTIONAL)\nCS0\nALEHAD15–0\nHA16\nHCMS\nHCIOMS\nHRD\nHWR\nHACK\nHALE\nHACK_PTCLK0\nTFS0\nDT0\nRCLK0\nRFS0\nDR0\nTCLK1\nTFS1\nDT1\nRCLK1\nRFS1\nDR1\nTCLK2/SCK0\nTFS2/MOSI0\nDT2/MISO0\nRCLK2/SCK1\nRFS2/MOSI1\nDR2/MISO1\nRXD\nTXD\nRESET\nJTAGSPORT1\nSPORT2SPORT0CLKIN\nXTAL\nMSEL6–0/PF6–0\nDF/PF7\nBYPASS\nBMODE1–0\nOPMODECLKOUT\nTMR2–0\nUARTSPI0\nSPI1SERIAL\nDEVICE\n(OPTIONAL)\nSERIAL\nDEVICE\n(OPTIONAL)\nUART\nDEVICE\n(OPTIONAL)CLOCK\nOR\nCRYSTAL\nTIMER\nOUT OR\nCAPTURE\nCLOCK\nMULTIPLY\nAND\nRANGE\nBOOT\nAND OP\nMODE\n6BGH\n–5– REV. AADSP-2191M\nThree programmable interval timers generate periodic inter-\nrupts. Each timer can be independently set to operate in one of \nthree modes:\n•Pulse Waveform Generation mode\n•Pulsewidth Count/Capture mode\n•External Event Watchdog mode\nEach timer has one bidirectional pin and four registers that \nimplement its mode of operation: A 7-bit configuration register, \na 32-bit count register, a 32-bit period register, and a 32-bit pulsewidth register. A single st atus register supports all three \ntimers. A bit in each timer’s configuration register enables or \ndisables the corresponding timer independently of the others. \nMemory Architecture\nThe ADSP-2191M DSP provides 64K words of on-chip SRAM memory. This memory is divided into four 16K blocks located on memory Page 0 in the DSP’s memory map. In addition to the \ninternal and external memory space, the ADSP-2191M can \naddress two additional and separate off-chip memory spaces: I/O space and boot space. \nAs shown in Figure 2 , the DSP’s two internal memory blocks \npopulate all of Page 0. The entire DSP memory map consists of 256 pages (Pages 0\n−255), and each page is 64K words long. \nExternal memory space consists of four memory banks (banks \n0–3) and supports a wide variety of SRAM memory devices. Each bank is selectable using the memory select pins (\nMS3–0 ) and has \nconfigurable page boundaries, waitstates, and waitstate modes. \nThe 1K word of on-chip boot-ROM populates the top of Page 255 while the remaining 254 pages are addressable off-chip. \nI/O memory pages differ from external memory pages in that I/O \npages are 1K word long, and the external I/O pages have their own select pin (\nIOMS ). Pages 0–7 of I/O memory space reside \non-chip and contain the configuration registers for the peripher-\nals. Both the core and DMA-ca pable peripherals can access the \nDSP’s entire memory map.\nInternal (On-Chip) Memory\nThe ADSP-2191M’s unified program and data memory space consists of 16M locations that are accessible through two 24-bit \naddress buses, the PMA and DMA buses. The DSP uses slightly different mechanisms to generate a 24-bit address for each bus. \nThe DSP has three functions that  support access to the full \nmemory map.\n•The DAGs generate 24-bit addresses for data fetches from \nthe entire DSP memory address range. Because DAG \nindex (address) registers are 16 bits wide and hold the \nlower 16 bits of the address, each of the DAGs has its own \n8-bit page register (DMPGx) to hold the most significant \neight address bits. Before a DAG generates an address, \nthe program must set the DAG’s DMPGx register to the appropriate memory page.\n•The Program Sequencer generates the addresses for \ninstruction fetches. For relative addressing instructions, the program sequencer bases ad dresses for relative jumps, \ncalls, and loops on the 24-bit Program Counter (PC). In \ndirect addressing instructions (two-word instructions), Figure 2. Memory MapBANK2\n(MS2)\nBANK1\n(MS1)\nBANK0\n(MS0)\nBLOCK0, 24-BITBLOCK2, 16-BIT\nBLOCK1, 24-BITBLOCK3, 16-BITRESERVED\nBOOT ROM, 24-BIT\n0x00 40000x00 80000x01 00000x40 00000x80 00000xC0 00000xFF 00000xFF 04000xFF FFFFLOGICAL\nADDRESS64K WORD\nMEMORY\nPAGES\nPAGE 0PAGES 1–63PAGES 64–127PAGES 128–191PAGES 192–254PAGE 255INTERNAL\nMEMORY\nEXTERNAL\nMEMORY\n(16-BIT)\nINTERNAL\nMEMORYMEMORY SELECTS (MS)\nFOR PORTIONS OF THE\nMEMORY MAP APPEAR\nWITH THE SELECTED\nMEMORY.\nPAGES 1–254\n0x01 00000xFE FFFFI/O MEMORY\n16-BIT\n1K WORD\nPAGES 8–255\n1K WORD\nPAGES 0–7LOWER PAGE BOUNDARIESARE CONFIGURABLE FOR\nBANKS OF EXTERNAL MEMORY.\nBOUNDARIES SHOWN ARE\nBANK SIZES AT RESET.\n0x07 3FF0x08 0000xFF 3FF\nINTERNALEXTERNAL\n(IOMS)\n0x00 00000x00 C0000xFF 03FF\n0x00 000\n8-BIT 10-BITBOOT MEMORY\n16-BIT\n(BMS)\n64K WORDLOGICAL\nADDRESS\nLOGICAL\nADDRESSBANK3\n(MS3)\nADSP-2191M\n–6– REV. Athe instruction provides an  immediate 24-bit address \nvalue. The PC allows linear ad dressing of the full 24-bit \naddress range.\n•For indirect jumps and ca lls that use a 16-bit DAG \naddress register for part of  the branch address, the \nProgram Sequencer relies on an  8-bit Indirect Jump page \n(IJPG) register to supply the most significant eight \naddress bits. Before a cross pa ge jump or call, the program \nmust set the program sequencer ’s IJPG register to the \nappropriate memory page.\nThe ADSP-2191M has 1K word of on-chip ROM that holds \nboot routines. If peripheral booting is selected, the DSP starts \nexecuting instructions from the on-chip boot ROM, which starts the boot process from the selected peripheral. For more informa-\ntion, see “Booting Modes” on Page 11.  The on-chip boot ROM \nis located on Page 255 in the DSP’s memory space map.\nExternal (Off-Chip) Memory\nEach of the ADSP-2191M’s off- chip memory spaces has a \nseparate control register, so applications can configure unique access parameters for each space.  The access parameters include \nread and write wait counts, waitstate completion mode, I/O clock \ndivide ratio, write hold time extension, strobe polarity, and data bus width. The core clock and peripheral clock ratios influence \nthe external memory access strobe widths. For more information, \nsee “Clock Signals” on Page 11.  The off-chip memory \nspaces are:\n•External memory space ( MS3–0  pins)\n•I/O memory space ( IOMS  pin)\n•Boot memory space ( BMS  pin)\nAll of these off-chip memory sp aces are accessible through the \nExternal Port, which can be co nfigured for data widths of \n8 or 16 bits.\nExternal Memory Space\nExternal memory space consists of four memory banks. These \nbanks can contain a configurable number of 64K word pages. At \nreset, the page boundaries fo r external memory have Bank0 \ncontaining Pages 1 −63, Bank1 containing Pages 64 −127, Bank2 \ncontaining Pages 128 −191, and Bank3 that contains Pages\n192−254. The MS3–0  memory bank pins select Banks 3–0, \nrespectively. The external memory interface is byte-addressable \nand decodes the 8 MSBs of the DSP program address to select one of the four banks. Both th e ADSP-219x core and DMA-capa-\nble peripherals can access the DSP’s external memory space.\nI/O Memory Space\nThe ADSP-2191M supports an additional external memory \ncalled I/O memory space. This space is designed to support \nsimple connections to peripheral s (such as data converters and \nexternal registers) or to bus interface ASIC data registers. I/O space supports a total of 256K lo cations. The first 8K addresses \nare reserved for on-chip peripherals. The upper 248K addresses \nare available for external peripheral devices. The DSP’s instruc-tion set provides instructions for accessing I/O space. These \ninstructions use an 18-bit address that is assembled from an 8-bit I/O page (IOPG) register and a 10-bit immediate value \nsupplied in the instruction. Both  the ADSP-219x core and a Host \n(through the Host Port Interfa ce) can access I/O memory space.\nBoot Memory Space\nBoot memory space consists of on e off-chip bank with 63 pages. \nThe BMS  memory bank pin selects boot memory space. Both \nthe ADSP-219x core and DMA-ca pable peripherals can access \nthe DSP’s off-chip boot memory space. After reset, the DSP always starts executing instructions from the on-chip boot ROM. \nDepending on the boot configuration, the boot ROM code can \nstart booting the DSP from boot memory. For more information, \nsee “Booting Modes” on Page 11.\nInterrupts\nThe interrupt controller lets th e DSP respond to 17 interrupts \nwith minimum overhead. The controller implements an interrupt \npriority scheme as shown in Table 1 . Applications can use the \nunassigned slots for software and peripheral interrupts. \nTable 2  shows the ID and priority at reset of each of the periph-\neral interrupts. To assign the peripheral interrupts a different priority, applications write the ne w priority to their correspond-\ning control bits (determined by their ID) in the Interrupt Priority \nControl register. The peripheral interrupt’s position in the IMASK and IRPTL register and its vector address depend on its \npriority level, as shown in Table 1 . Because the IMASK and \nIRPTL registers are limited to 16 bits, any peripheral interrupts assigned a priority level of 11 are aliased to the lowest priority bit \nposition (15) in these registers and share vector address \n0x00 01E0. \nTable 1. Interrupt Priorities/Addresses \nInterruptIMASK/\nIRPTLVector \nAddress1\n1These interrupt vectors start at address 0x10000 when the DSP is in \n“no-boot,” run from external memory mode.Emulator (NMI)—\nHighest PriorityNA NA\nReset (NMI) 0 0x00 0000\nPower-Down (NMI) 1 0x00 0020Loop and PC Stack 2 0x00 0040Emulation Kernel 3 0x00 0060User Assigned Interrupt 4 0x00 0080\nUser Assigned Interrupt 5 0x00 00A0\nUser Assigned Interrupt 6 0x00 00C0User Assigned Interrupt 7 0x00 00E0User Assigned Interrupt 8 0x00 0100User Assigned Interrupt 9 0x00 0120User Assigned Interrupt 10 0x00 0140\nUser Assigned Interrupt 11 0x00 0160\nUser Assigned Interrupt 12 0x00 0180User Assigned Interrupt 13 0x00 01A0User Assigned Interrupt 14 0x00 01C0User Assigned Interrupt—\nLowest Priority15 0x00 01E0\n–7– REV. AADSP-2191M\nInterrupt routines can either be ne sted with higher priority inter-\nrupts taking precedence or processed sequentially. Interrupts can \nbe masked or unmasked with the IMASK register. Individual interrupt requests are logically ANDed with the bits in IMASK; \nthe highest priority unmasked in terrupt is then selected. The \nemulation, power-down, and reset interrupts are nonmaskable with the IMASK register, but software can use the DIS INT \ninstruction to mask the power-down interrupt.\nThe Interrupt Control (ICNTL) register controls interrupt \nnesting and enables or disables interrupts globally.\nThe general-purpose Programmable Flag (PFx) pins can be con-\nfigured as outputs, can implement software interrupts, and (as \ninputs) can implement hardware interrupts. Programmable Flag \npin interrupts can be configured  for level-sensitive, single \nedge-sensitive, or dual edge-sensitive operation. \nThe IRPTL register is used to force and clear interrupts. On-\nchip stacks preserve the proces sor status and are automatically \nmaintained during interrupt hand ling. To support interrupt, \nloop, and subroutine nesting, the PC stack is 33 levels deep, the \nloop stack is eight levels deep, and the status stack is 16 levels \ndeep. To prevent stack overflow, the PC stack can generate a stack-level interrupt if the PC stack falls below three locations full \nor rises above 28 locations full. The following instructions global ly enable or disable interrupt \nservicing, regardless of the state of IMASK.\nENA INT;\nDIS INT;\nAt reset, interrupt servicing is disabled.\nFor quick servicing of interrupts, a secondary set of DAG and \ncomputational registers exist. Switching between the primary and secondary registers lets programs quickly service interrupts, \nwhile preserving the DSP’s state.\nDMA Controller\nThe ADSP-2191M has a DMA co ntroller that supports \nautomated data transfers with minimal overhead for the DSP \ncore. Cycle stealing DMA transfers can occur between the ADSP-2191M’s internal memory and any of its DMA-capable \nperipherals. Additionally, DMA transfers can be accomplished \nbetween any of the DMA-capabl e peripherals and external \ndevices connected to the external memory interface. DMA-capa-\nble peripherals include the Host port, SPORTs, SPI ports, and \nUART. Each individual DMA-capa ble peripheral has a dedicated \nDMA channel. To describe each DMA sequence, the DMA con-\ntroller uses a set of parameters—called a DMA descriptor. When \nsuccessive DMA sequences are needed, these DMA descriptors can be linked or chained together , so the completion of one DMA \nsequence auto-initiates and starts the next sequence. DMA \nsequences do not contend for bus access with the DSP core; instead DMAs “steal” cycles to access memory. \nAll DMA transfers use the DMA bus shown in the functional \nblock diagram on Page 1 . Because all of the peripherals use the \nsame bus, arbitration for DMA bus access is needed. The arbi-\ntration for DMA bus access appears in Table 4 .\nHost Port\nThe ADSP-2191M’s Host port functions as a slave on the \nexternal bus of an external Host. The Host port interface lets a \nHost read from or write to the DSP’s memory space, boot space, \nor internal I/O space. Examples of Hosts include external micro-\ncontrollers, microprocessors, or ASICs. \nThe Host port is a multiplexed address and data bus that provides \nboth an 8-bit and a 16-bit data path and operates using an asyn-\nchronous transmission protocol. Through this port, an off-chip Table 2. Peripheral Interrupts and Priority at Reset \nInterrupt IDReset \nPriority\nSlave DMA/Host Port Interface 0 0\nSPORT0 Receive 1 1SPORT0 Transmit 2 2\nSPORT1 Receive 3 3\nSPORT1 Transmit 4 4SPORT2 Receive/SPI0 5 5SPORT2 Transmit/SPI1 6 6UART Receive 7 7UART Transmit 8 8\nTimer 0 9 9\nTimer 1 10 10Timer 2 11 11Programmable Flag A (any PFx) 12 11Programmable Flag B (any PFx) 13 11Memory DMA port 14 11\nTable 3. Interrupt Control (ICNTL) Register Bits \nBit Description\n0–3 Reserved\n4 Interrupt Nesting Enable5 Global Interrupt Enable\n6 Reserved\n7 MAC-Biased Rounding Enable8–9 Reserved10 PC Stack Interrupt Enable11 Loop Stack Interrupt Enable12–15 ReservedTable 4. I/O Bus Arbitration Priority \nDMA Bus Master Arbitration Priority\nSPORT0 Receive DMA 0—Highest\nSPORT1 Receive DMA 1SPORT2 Receive DMA 2SPORT0 Transmit DMA 3SPORT1 Transmit DMA 4SPORT2 Transmit DMA 5SPI0 Receive/Transmit DMA 6\nSPI1 Receive/Transmit DMA 7\nUART Receive DMA 8UART Transmit DMA 9Host Port DMA 10Memory DMA 11—Lowest\nADSP-2191M\n–8– REV. AHost can directly access the DSP’s entire memory space map, \nboot memory space, and internal I/O space. To access the DSP’s \ninternal memory space, a Host steals one cycle per access from \nthe DSP. A Host access to the DSP’s external memory uses the \nexternal port interface and does not stall (or steal cycles from) the DSP’s core. Because a Host can access internal I/O memory \nspace, a Host can control any of the DSP’s I/O mapped \nperipherals.\nThe Host port is most efficien t when using the DSP as a slave \nand uses DMA to automate the incrementing of addresses for these accesses. In this case, an address does not have to be trans-\nferred from the Host for every data transfer.\nHost Port Acknowledge (HACK) Modes\nThe Host port supports a number  of modes (or protocols) for \ngenerating a HACK output for the host. The host selects ACK \nor Ready modes using the HACK_P and HACK pins. The Host port also supports two modes for address control: Address Latch \nEnable (ALE) and Address Cycle Control (ACC) modes. The \nDSP auto-detects ALE versus ACC mode from the HALE and \nHWR  inputs.\nThe Host port HACK signal polarity is selected (only at reset) as \nactive high or active low, depending on the value driven on the \nHACK_P pin.The HACK polarity is  stored into the Host port \nconfiguration register as a read only bit.\nThe DSP uses HACK to indicate to the Host when to complete \nan access. For a read transaction, a Host can proceed and complete an access when valid data is present in the read buffer \nand the Host port is not busy doing a write. For a write transac-\ntions, a Host can complete an access when the write buffer is not full and the Host port is not busy doing a write.\nTwo mode bits in the Host Port configuration register HPCR \n[7:6] define the functionality of the HACK line. HPCR6 is ini-\ntialized at reset based on the values driven on HACK and \nHACK_P pins (shown in Table 5 ); HPCR7 is always cleared (0) \nat reset. HPCR [7:6] can be modified after reset by a write access \nto the Host port configuration register.The functional modes selected by HPCR [7:6] are as follows \n(assuming active high signal):\n•ACK Mode —Acknowledge is active on strobes; HACK \ngoes high from the leading edge  of the strobe to indicate \nwhen the access can complete. After the Host samples the \nHACK active, it can complete  the access by removing the \nstrobe.The Host port then removes the HACK.\n•Ready Mode — R e a d y  a c t i ve  o n  s t r o b e s ,  g o e s  l ow  t o  i n s e r t  \nwaitstate during the access. If the Host port cannot \ncomplete the access, it dea sserts the HACK/READY line. \nIn this case, the Host has to  extend the access by keeping \nthe strobe asserted. When the Host samples the HACK \nasserted, it can then proceed  and complete the access by \ndeasserting the strobe.\nWhile in Address Cycle Control (ACC) mode and the ACK or Ready acknowledge modes, the HACK is returned active for any \naddress cycle.\nHost Port Chip Selects\nThere are two chip-select signals associated with the Host port: \nHCMS  and HCIOMS . The Host Chip Memory Select ( HCMS ) \nlets the Host select the DSP a nd directly access the DSP’s inter-\nnal/external memory space or boot memory space. The Host \nChip I/O Memory Select ( HCIOMS ) lets the Host select the \nDSP and directly access the DSP’ s internal I/O memory space.\nBefore starting a direct access, the Host configures Host port \ninterface registers, specifying the width of external data bus (8- or 16-bit) and the target addr ess page (in the IJPG register). \nThe DSP generates the needed memory select signals during the \naccess, based on the target addr ess. The Host port interface \ncombines the data from one, two, or three consecutive Host \naccesses (up to one 24-bit value) into a single DMA bus access \nto prefetch Host direct reads or  to post direct writes. During \nassembly of larger words, the Host port interface asserts ACK for \neach byte access that does not start a read or complete a write. \nOtherwise, the Host port interface asserts ACK when it has completed the memory access successfully.\nDSP Serial Ports (SPORTs)\nThe ADSP-2191M incorporates three complete synchronous serial ports (SPORT0, SPORT1, and SPORT2) for serial and \nmultiprocessor communications.  The SPORTs support the \nfollowing features:\n•Bidirectional operation—ea ch SPORT has independent \ntransmit and receive pins.\n•Double-buffered transmit an d receive ports—each port \nhas a data register for transferring data words to and from \nmemory and shift registers for shifting data in and out of the data registers.\n•Clocking—each transmit and r eceive port can either use \nan external serial clock ( 40 MHz) or generate its own, in \nfrequencies ranging from 19 Hz to 40 MHz.\n•Word length—each SPORT supports serial data words \nfrom 3 to 16 bits in length transferred in Big Endian \n(MSB) or Little Endian (LSB) format.Table 5. Host Port Acknowledge Mode Selection \nValues Driven At \nResetHPCR [7:6] \nInitial ValuesAcknowledge \nMode HACK_P HACK Bit 7 Bit 6\n0 0 0 1 Ready Mode\n01 0 0 A C K  M o d e10 0 0 A C K  M o d e1 1 0 1 Ready Mode\n–9– REV. AADSP-2191M\n•Framing—each transmit and recei ve port can run with or \nwithout frame sync signals for each data word. Frame sync \nsignals can be generated internally or externally, active high or low, and with either of two pulsewidths and early \nor late frame sync.\n•Companding in hardware—each SPORT can perform \nA-law or µ-law companding according to ITU recommen-\ndation G.711. Companding can be selected on the \ntransmit and/or receive ch annel of the SPORT without \nadditional latencies.\n•DMA operations with single-cycle overhead—each \nSPORT can automatically recei ve and transmit multiple \nbuffers of memory data, one data word each DSP cycle. \nEither the DSP’s core  or a Host processor can link or chain \nsequences of DMA transfers between a SPORT and memory. The chained DMA can be dynamically allocated \nand updated through the DMA descriptors (DMA \ntransfer parameters) that set up the chain.\n•Interrupts—each tran smit and receive port generates an \ninterrupt upon completing the transfer of a data word or \nafter transferring an entire data buffer or buffers through DMA.\n•Multichannel capability—each SPORT supports the \nH.100 standard.\nSerial Peripheral Interface (SPI) Ports\nThe DSP has two SPI-compatible ports that enable the DSP to \ncommunicate with multiple SPI-co mpatible devices. These ports \nare multiplexed with SPORT2, so either SPORT2 or the SPI \nports are active, depending on the state of the OPMODE pin \nduring hardware reset. \nThe SPI interface uses three pins for transferring data: two data \npins (Master Output-Slave Input, MOSIx, and Master Input-Slave Output, MISOx) and a clock pin (Serial Clock, \nSCKx). Two SPI chip select input pins (\nSPISSx ) let other SPI \ndevices select the DSP, and fourteen SPI chip select output pins (SPIxSEL7–1) let the DSP select other SPI devices. The SPI \nselect pins are reconfigured Programmable Flag pins. Using \nthese pins, the SPI ports provide a full duplex, synchronous serial interface, which supports both master and slave modes and mul-timaster environments. \nEach SPI port’s baud rate and clock phase/polarities are program-\nmable (see equation below for SPI clock rate calculation), and \neach has an integrated DMA cont roller, configurable to support \nboth transmit and receive data streams. The SPI’s DMA control-\nler can only service unidirectional accesses at any given time.During transfers, the SPI ports simultaneously transmit and \nreceive by serially shifting data in  and out on their two serial data \nlines. The serial clock line synchr onizes the shifting and sampling \nof data on the two serial data lines.\nUART Port\nThe UART port provides a simplified UART interface to another peripheral or Host. It performs full duplex, asynchronous \ntransfers of serial data. Options for the UART include support \nfor 5–8 data bits; 1 or 2 stop bits; and none, even, or odd parity. The UART port supports two modes of operation:\n•Programmed I/O\nThe DSP’s core sends or receives data by writing or \nreading I/O-mapped THR or RB R registers, respectively. \nThe data is double-buffered on  both transmit and receive.\n•DMA (direct memory access)\nThe DMA controller transfers both transmit and receive \ndata. This reduces the number and frequency of inter-\nrupts required to transfer data to and from memory. The UART has two dedicated DMA channels. These DMA \nchannels have lower priority than most DMA channels \nbecause of their relatively low service rates.\nThe UART’s baud rate (see following equation for UART clock \nrate calculation), serial data format, error code generation and \nstatus, and interrupts are programmable:\n•Supported bit rates range from 9.5 bits to 5M bits per \nsecond (80 MHz peripheral clock).\n•Supported data formats are 7- to 12-bit frames.\n•Transmit and receive status ca n be configured to generate \nmaskable interrupts to the DSP’s core.\nThe timers can be used to provide a hardware-assisted autobaud detection mechanism for the UART interface.\nWhere D is the programmable divisor = 1 to 65536.\nProgrammable Flag (PFx) Pins\nThe ADSP-2191M has 16 bidirectional, general-purpose I/O, \nProgrammable Flag (PF15–0) pins. The PF7–0 pins are \ndedicated to general-purpose I/O. The PF15–8 pins serve either as general-purpose I/O pins (if the DSP is connected to an 8-bit \nexternal data bus) or serve as DATA15–8 lines (if the DSP is \nconnected to a 16-bit external da ta bus). The Programmable Flag \npins have special functions for clock multiplier selection and for \nSPI port operation. For more information, see Serial Peripheral \nSPI Clock RateHCLK\n2SPIBAUD×--------------------------------------=UART Clock RateHCLK\n16D×------------------=\nADSP-2191M\n–10– REV. AInterface (SPI) Ports on Page 9  and Clock Signals on Page 11 . \nTen memory-mapped registers cont rol operation of the Program-\nmable Flag pins:\n•Flag Direction register\nSpecifies the direction of each  individual PFx pin as input \nor output. \n•Flag Control and Status registers\nSpecify the value to drive on each indi vidual PFx output \npin. As input, software can predicate instruction \nexecution on the value of individual PFx input pins \ncaptured in this register. On e register sets bits, and one \nregister clears bits.\n•Flag Interrupt Mask registers\nEnable and disable each individual PFx pin to function \nas an interrupt to the DSP’s co re. One register sets bits to \nenable interrupt function, and one register clears bits to \ndisable interrupt function. Input PFx pins function as \nhardware interrupts, and output PFx pins function as \nsoftware interrupts—latching in the IMASK and IRPTL registers.\n•Flag Interrupt Polarity register\nSpecifies the polarity (active high or low) for interrupt \nsensitivity on each individual PFx pin. \n•Flag Sensitivity registers\nSpecify whether individual PFx pins are level- or \nedge-sensitive and specify—i f edge-sensitive—whether \njust the rising edge or both the rising and falling edges of \nthe signal are significant. One register selects the type of \nsensitivity, and one register selects which edges are signif-\nicant for edge-sensitivity.\nLow Power Operation\nThe ADSP-2191M has four low power options that significantly reduce the power dissipation when the device operates under \nstandby conditions. To enter any of these modes, the DSP \nexecutes an IDLE instruction. The ADSP-2191M uses configu-ration of the PDWN, STOPCK, and STOPALL bits in the \nPLLCTL register to select between the low power modes as the \nDSP executes the IDLE. Depending on the mode, an IDLE shuts \noff clocks to different parts of the DSP in the different modes. \nThe low power modes are:\n•Idle\n•Power-Down Core\n•Power-Down Core/Peripherals\n•Power-Down All\nIdle Mode\nWhen the ADSP-2191M is in Idle mode, the DSP core stops \nexecuting instructions, retains the contents of the instruction pipeline, and waits for an interrup t. The core clock and peripheral \nclock continue running. To enter Idle mode, the DSP can execute the IDLE instruction \nanywhere in code. To exit Idle mode, the DSP responds to an \ninterrupt and (after two cycles of latency) resumes executing \ninstructions with the instruction after the IDLE.\nPower-Down Core Mode\nWhen the ADSP-2191M is in Power-Down Core mode, the DSP \ncore clock is off, but the DSP retains the contents of the pipeline \nand keeps the PLL running. The pe ripheral bus keeps running, \nletting the peripherals receive data. \nTo enter Power-Down Core mode, the DSP executes an IDLE \ninstruction after performing the following tasks:\n•Enter a power-down interrupt service routine\n•Check for pending interrupts and I/O service routines\n•Clear (= 0) the PDWN bit in the PLLCTL register\n•Clear (= 0) the STOPALL bit in the PLLCTL register\n•Set (= 1) the STOPCK bit in the PLLCTL register\nTo exit Power-Down Core mode, the DSP responds to an \ninterrupt and (after two cycles of latency) resumes executing \ninstructions with the instruction after the IDLE.\nPower-Down Core/Peripherals Mode\nWhen the ADSP-2191M is in Power-Down Core/Peripherals mode, the DSP core clock and peripheral bus clock are off, but \nthe DSP keeps the PLL running. The DSP does not retain the \ncontents of the instruction pipeline.The peripheral bus is \nstopped, so the peripherals cannot receive data.\nTo enter Power-Down Core/Peripherals mode, the DSP executes \nan IDLE instruction after performing the following tasks:\n•Enter a power-down interrupt service routine\n•Check for pending interrupts and I/O service routines\n•Clear (= 0) the PDWN bit in the PLLCTL register\n•Set (= 1) the STOPALL bit in the PLLCTL register\nTo exit Power-Down Core/Perip herals mode, the DSP responds \nto a wake-up event and (after five to six cycles of latency) resumes \nexecuting instructions with the instruction after the IDLE.\nPower-Down All Mode\nWhen the ADSP-2191M is in Power-Down All mode, the DSP core clock, the peripheral clock,  and the PLL are all stopped. The \nDSP does not retain the contents of the instruction pipeline. The \nperipheral bus is stopped, so the peripherals cannot receive data.\nTo enter Power-Down All mode, the DSP executes an IDLE \ninstruction after performing the following tasks:\n•Enter a power-down interrupt service routine\n•Check for pending interrupts and I/O service routines\n•Set (= 1) the PDWN bit in the PLLCTL register\nTo exit Power-Down Core/Perip herals mode, the DSP responds \nto an interrupt and (after 500 cycles to restabilize the PLL) \nresumes executing instructions with the instruction after \nthe IDLE.\n–11– REV. AADSP-2191M\nClock Signals\nThe ADSP-2191M can be clocked by a crystal oscillator or a \nbuffered, shaped clock derived from an external clock oscillator. \nIf a crystal oscillator is used, the crystal should be connected \nacross the CLKIN and XTAL pins , with two capacitors and a \n1MΩ shunt resistor connected as shown in Figure 3 . Capacitor \nvalues are dependent on crystal ty pe and should be specified by \nthe crystal manufacturer. A parallel-resonant, fundamental fre-quency, microprocessor-grade crystal should be used for this \nconfiguration.\nIf a buffered, shaped clock is used, this external clock connects \nto the DSP’s CLKIN pin. CLKIN input cannot be halted, \nchanged, or operated below the specified frequency during normal operation. When an external clock is used, the XTAL \ninput must be left unconnected.\nThe DSP provides a user-programmable 1\n/H11547 to 32/H11547 multiplica-\ntion of the input clock, including some fractional values, to \nsupport 128 external to internal (DSP core) clock ratios. The MSEL6–0, BYPASS, and DF pins decide the PLL multiplication \nfactor at reset. At runtime, the multiplication factor can be con-\ntrolled in software. The combination of pullup and pull-down resistors in Figure 3  sets up a core clock ratio of 6:1, which \nproduces a 150 MHz core clock from the 25 MHz input. For \nother clock multiplier settings, see the \nADSP-219x/ADSP-2191 \nDSP Hardware Reference .\nThe peripheral clock is supplied to the CLKOUT pin. All on-chip peripherals for the ADSP-2191M operate at the rate \nset by the peripheral clock. The peripheral clock is either equal to the core clock rate or one-ha lf the DSP core clock rate. This \nselection is controlled by the IO SEL bit in the PLLCTL register. \nThe maximum core clock is 160 MHz and the maximum periph-eral clock is 80 MHz—the combination of the input clock and \ncore/peripheral clock ratios  may not exceed these limits.\nReset\nThe RESET  signal initiates a master reset of the ADSP-2191M. \nThe RESET  signal must be asserted during the powerup \nsequence to assure proper initialization. RESET  during initial \npowerup must be held long enough to allow the internal clock to stabilize. \nThe powerup sequence is defined as the total time required for \nthe crystal oscillator circuit to stabilize after a valid V\nDD is applied \nto the processor, and for the inte rnal phase-locked loop (PLL) to \nlock onto the specific crystal frequency. A minimum of 100 µs ensures that the PLL has locked, but does not include the crystal \noscillator start-up time. During this powerup sequence the \nRESET  signal should be held low. On any subsequent resets, the \nRESET  signal must meet the minimum pulsewidth specifica- \ntion, tWRST. \nThe RESET  input contains some hysteresis. If using an RC \ncircuit to generate your RESET  signal, the circuit should use an \nexternal Schmidt trigger.The master reset sets all internal stack pointers to the empty stack \ncondition, masks all interrupts, and resets all registers to their \ndefault values (where applicable). When RESET  is released, if \nthere is no pending bus request and the chip is configured for booting, the boot-loading sequence is performed. Program \ncontrol jumps to the location  of the on-chip boot ROM \n(0xFF 0000).\nPower Supplies\nThe ADSP-2191M has separate po wer supply connections for \nthe internal (VDDINT ) and external (VDDEXT ) power supplies. The \ninternal supply must meet the 2.5 V requirement. The external supply must be connected to a 3.3 V supply. All external supply \npins must be connected to the same supply.\nPower-Up Sequence\nPower up together the two supplies VDDEXT  and VDDINT . If they \ncannot be powered up together, power up the internal (core) \nsupply first (powering up the core supply first reduces the risk of \nlatchup events.\nBooting Modes\nThe ADSP-2191M has five mechanisms (listed in Table 6 ) for \nautomatically loading internal program memory after reset. Two \nno-boot modes are also supported.Figure 3. External Crystal ConnectionsCLKIN CLKOUT XTAL\nADSP-2196M\nMSEL5 (PF5)MSEL4 (PF4)MSEL3 (PF3)MSEL2 (PF2)MSEL1 (PF1)MSEL0 (PF0)\nRESET25MHz\nMSEL6 (PF6)\nDF (PF7)VDDVDD\nBYPASS\nRESET\nSOURCERUNTIME\nPF PIN I/O\nTHE PULL-UP/PULL-DOWN\nRESISTORS ON THE MSEL,\nDF, AND BYPASS PINSSELECT THE CORE CLOCK\nRATIO.\nHERE, THE SELECTION (6:1)\nAND 25MHz INPUT CLOCK\nPRODUCE A 150MHz CORE\nCLOCK.1M/H9024\nADSP-2191M\n–12– REV. AThe OPMODE, BMODE1, and BMODE0 pins, sampled \nduring hardware reset, and three bits in the Reset Configuration \nRegister implement these modes:\n•Execute from memory external 16 bits—The memory \nboot routine located in boot ROM memory space \nexecutes a boot-str eam-formatted program located at \naddress 0x010000 of boot memory  space, packing 16-bit \nexternal data into 24-bit internal data. The External Port \nInterface is configured for the default clock multiplier \n(128) and read waitstates (7).\n•Boot from EPROM—The EPROM boot routine located \nin boot ROM memory space fetches a boot-stream-for-\nmatted program located at physical address 0x00 0000 of boot memory space, packing 8- or 16-bit external data \ninto 24-bit internal data. The External Port Interface is \nconfigured for the default cl ock multiplier (32) and read \nwaitstates (7).\n•Boot from Host—The (8- or 16-bit) Host downloads a \nboot-stream-formatted program to internal or external memory. The Host’s boot rout ine is located in internal \nROM memory space and uses  the top 16 locations of \nPage 0 program memory and the top 272 locations of \nPage 0 data memory. \nThe internal boot ROM sets semaphore A (an IO register \nwithin the Host port) and then polls until the semaphore is reset. Once detected, the in ternal boot ROM will remap \nthe interrupt vector table to  Page 0 internal memory and \njump to address 0x00 0000 internal memory. From the point of view of the host inte rface, an external host has \nfull control of the DSP’s memo ry map. The Host has the \nfreedom to directly write internal memory, external \nmemory, and internal I/O me mory space. The DSP core \nexecution is held off until th e Host clears the semaphore \nregister. This strategy allows  the maximum flexibility for \nthe Host to boot in the program and data code, by leaving it up to the programmer.•Execute from memory external 8 bits (No Boot)—\nExecution starts from Page 1 of external memory space, \npacking either 8- or 16-bit external data into 24-bit \ninternal data. The External Port Interface is config-ured for the default clock multiplier (128) and read \nwaitstates (7).\n•Boot from UART—Using an autobaud handshake \nsequence, a boot-stream-formatted program is down-loaded by the Host. The Host  agent selects a baud rate \nwithin the UART’s clocking ca pabilities. After a hardware \nreset, the DSP’s UART expect s a 0xAA character (eight \nbits data, one start bit, one stop bit, no parity bit) on the \nRXD pin to determine the bit rate; and then replies with \nan OK string. Once the host r eceives this OK it downloads \nthe boot stream without further handshake.The UART \nboot routine is located in internal ROM memory space \nand uses the top 16 locations of Page 0 program memory and the top 272 locations of Page 0 data memory.\n•Boot from SPI, up to 4K bits—The SPI0 port uses the \nSPI0SEL1 (reconfigured PF2)  output pin to select a \nsingle serial EEPROM device, submits a read command \nat address 0x00, and begins cl ocking consecutive data into \ninternal or external memory . Use only SPI-compatible \nEEPROMs of ≤4K bit (12-bit address range). The SPI0 \nboot routine located in in ternal ROM memory space \nexecutes a boot-stream-format ted program, using the top \n16 locations of Page 0 prog ram memory and the top 272 \nlocations of Page 0 data memory. The SPI boot configu-\nration is SPIBAUD0=60 (decimal), CPHA=1, CPOL=1, 8-bit data, and MSB first.\n•Boot from SPI, from >4K bi ts to 512K bits—The SPI0 \nport uses the SPI0SEL1 (re- configured PF2) output pin \nto select a single serial EE PROM device, submits a read \ncommand at address 0x00, an d begins clocking consecu-\ntive data into internal or external memory. Use only SPI-compatible EEPROMs of ≥4K bit (16-bit address \nrange). The SPI0 boot routin e, located in internal ROM \nmemory space, executes a boot-stream-formatted \nprogram, using the top 16 locations of Page 0 program \nmemory and the top 272 locations of Page 0 data memory.\nAs indicated in Table 6 , the OPMODE pin has a dual role, acting \nas a boot mode select during reset and determining SPORT or \nSPI operation at runtime. If th e OPMODE pin at reset is the \nopposite of what is needed in an  application during runtime, the \napplication needs to set the OP MODE bit appropriately during \nruntime prior to using the corresponding peripheral.\nBus Request and Bus Grant\nThe ADSP-2191M can relinquish control of the data and ad-\ndress buses to an external device. When the external device \nrequires access to the bus, it asserts the bus request ( BR) signal. \nThe ( BR) signal is arbitrated with core and peripheral requests. \nExternal Bus requests have the lowest priority. If no other internal \nrequest is pending, the external bus request will be granted. Table 6. Select Boot Mode (OPMODE, BMODE1, and \nBMODE0) \nOPMODE\nBMODE1\nBMODE0Function\n0 0 0 Execute from external memory 16 bits \n(No Boot)\n0 0 1 Boot from EPROM0 1 0 Boot from Host0 1 1 Reserved\n1 0 0 Execute from external memory 8 bits \n(No Boot)\n1 0 1 Boot from UART1 1 0 Boot from SPI, up to 4K bits1 1 1 Boot from SPI, >4K bits up to \n512K bits\n–13– REV. AADSP-2191M\nBecause of synchronizer and arbi tration delays, bus grants will \nbe provided with a minimum of three peripheral clock delays. \nADSP-2191M DSPs will respond to the bus grant by:\n•Three-stating the data an d address buses and the MS3–0 , \nBMS , IOMS , RD, and WR output drivers.\n•Asserting the bus grant ( BG) signal.\nThe ADSP-2191M will halt program execution if the bus is \ngranted to an external device and an instruction fetch or data \nread/write request is made to external general-purpose or periph-\neral memory spaces. If an instruction requires two external memory read accesses, bus requests will not be granted between \nthe two accesses. If an instruction requires an external memory \nread and an external memory write access, the bus may be granted between the two accesses. The external memory \ninterface can be configured so that the core will have exclusive \nuse of the interface. DMA and Bus Requests will be granted. When the external device releases \nBR, the DSP releases BG and \ncontinues program execution from the point at which it stopped.\nThe bus request feature operates at all times, even while the DSP \nis booting and RESET  is active.\nThe ADSP-2191M asserts the BGH  pin when it is ready to start \nanother external port access, but is held off because the bus was \npreviously granted. This mechan ism can be extended to define \nmore complex arbitration protocols for implementing more \nelaborate multimaster systems.\nInstruction Set Description\nThe ADSP-2191M assembly language instruction set has an algebraic syntax that was designed for ease of coding and read-\nability. The assembly language, wh ich takes full advantage of the \nprocessor’s unique architecture, offers the following benefits:\n•ADSP-219x assembly language sy ntax is a superset of and \nsource-code-compatible (except for two data registers \nand DAG base address registers) with ADSP-218x family \nsyntax. It may be necessary  to restructure ADSP-218x \nprograms to accommodate the ADSP-2191M’s unified \nmemory space and to conform to its interrupt vector map.\n•The algebraic syntax eliminates the need to remember \ncryptic assembler mnemonics.  For example, a typical \narithmetic add instruction, such as AR = AX0 + AY0, \nresembles a simple equation.\n•Every instruction, but two, assembles into a single, 24-bit \nword that can execute in a si ngle instruction cycle. The \nexceptions are two dual word instructions. One writes 16- \nor 24-bit immediate data to memory, and the other is an absolute jump/call with the 24- bit address specified in the \ninstruction.\n•Multifunction instructions allo w parallel execution of an \narithmetic, MAC, or shift instruction with up to two \nfetches or one write to processor memory space during a \nsingle instruction cycle.\n•Program flow instructions support a wider variety of con-\nditional and unconditional jumps/calls and a larger set of \nconditions on which to base  execution of conditional \ninstructions.Development Tools\nThe ADSP-2191M is supported with a complete set of software and hardware development tools, including Analog Devices \nemulators and VisualDSP++\n® development environment. The \nsame emulator hardware that supports other ADSP-219x DSPs, also fully emulates the ADSP-2191M.\nThe VisualDSP++ project management environment lets pro-\ngrammers develop and debug an application. This environment \nincludes an easy-to-use assembler that is based on an algebraic \nsyntax; an archiver (librarian/lib rary builder), a linker, a loader, \na cycle-accurate instruction-level simulator, a C/C++ compiler, \nand a C/C++ run-time library that includes DSP and mathemat-\nical functions. Two key points for these tools are:\n•Compiled ADSP-219x C/C++ code efficiency—the \ncompiler has been developed for efficient translation of \nC/C++ code to ADSP-219x assembly. The DSP has \narchitectural features that improve the efficiency of \ncompiled C/C++ code.\n•ADSP-218x family code compatibility—The assembler \nhas legacy features to ease the conversion of existing \nADSP-218x applications to the ADSP-219x.\nDebugging both C/C++ and assembly programs with the Visu-alDSP++ debugger, programmers can:\n•View mixed C/C++ and asse mbly code (interleaved \nsource and object information)\n•Insert break points\n•Set conditional breakpoints on registers, memory, and \nstacks\n•Trace instruct ion execution\n•Perform linear or statistical profiling of program \nexecution\n•Fill, dump, and graphically pl ot the contents of memory\n•Source level debugging\n•Create custom debugger windows\nThe VisualDSP++ IDE lets programmers define and manage \nDSP software development. Its dialog boxes and property pages let programmers configure and manage all of the ADSP-219x development tools, including the syntax highlighting in the Visu-\nalDSP++ editor. This capability permits:\n•Control how the development tools process inputs and \ngenerate outputs.\n•Maintain a one-to-one corr espondence with the tool’s \ncommand line switches.\nAnalog Devices DSP emulators use the IEEE 1149.1 JTAG test access port of the ADSP-2191M  processor to monitor and \ncontrol the target board pro cessor during emulation. The \nemulator provides full-speed emulation, allowing inspection and modification of memory, registers, and processor stacks. Nonin-\ntrusive in-circuit emulation is assu red by the use of the processor’s \nJTAG interface—the emulator does not affect target system loading or timing.\nADSP-2191M\n–14– REV. AIn addition to the software and hardware development tools \navailable from Analog Devices, third parties provide a wide range \nof tools supporting the ADSP-219x processor family. Hardware \ntools include ADSP-219x PC plug-in cards. Third party software tools include DSP libraries, real-time operating systems, and block diagram design tools.\nDesigning an Emulator-Compatible DSP Board \n(T arget)\nThe White Mountain DSP (Product Line of Analog Devices, \nInc.) family of emulators are tools that every DSP developer needs to test and debug hardware and software systems. Analog \nDevices has supplied an IEEE 1149.1 JTAG Test Access Port \n(TAP) on each JTAG DSP. The em ulator uses the TAP to access \nthe internal features of the DSP,  allowing the developer to load \ncode, set breakpoints, observe variables, observe memory, and \nexamine registers. The DSP must be halted to send data and commands, but once an operatio n has been completed by the \nemulator, the DSP system is set running at full speed with no \nimpact on system timing.\nTo use these emulators, the target’s design must include the \ninterface between an Analog Devices JTAG DSP and the emulation header on a custom DSP target board.\nT arget Board Header\nThe emulator interface to an Analog Devices JTAG DSP is a 14-pin header, as shown in Figure 4 . The customer must supply \nthis header on the target board in order to communicate with the \nemulator. The interface consists of a standard dual row 0.025" square post header, set on 0.1"\n/H115470.1" spacing, with a minimum \npost length of 0.235". Pin 3 is the key position used to prevent \nthe pod from being inserted backwards. This pin must be clipped on the target board.\nAlso, the clearance (length, width, and height) around the header \nmust be considered. Leave a cleara nce of at least 0.15" and 0.10" \naround the length and width of the header, and reserve a height \nclearance to attach and detach the pod connector.As can be seen in Figure 4 , there are two sets of signals on the \nheader. There are the standard JTAG signals TMS, TCK, TDI, \nTDO, \nTRST , and EMU  used for emulation purposes (via an \nemulator). There are also secondary JTAG signals BTMS, BTCK, BTDI, and \nBTRST  that are optionally used for \nboard-level (boundary scan) testing.\nWhen the emulator is not connected  to this header, place jumpers \nacross BTMS, BTCK, BTRST , and BTDI as shown in Figure 5 . \nThis holds the JTAG signals in th e correct state to allow the DSP \nto run free. Remove all the jumpers when connecting the emulator to the JTAG header.\nJTAG Emulator Pod Connector\nFigure 6  details the dimensions of the JTAG pod connector at the \n14-pin target end. Figure 7  displays the keep-out area for a target \nboard header. The keep-out area  allows the pod connector to \nproperly seat onto the target board header. This board area should contain no components (chips, resistors, capacitors, etc.). \nThe dimensions are referenced to the center of the 0.25" square \npost pin.\nFigure 4. JTAG Target Board Connector for JTAG \nEquipped Analog Devices DSP (Jumpers in Place)TOP VIEW13 1411 1291 078563412\nEMU\nGND\nTMS\nTCK\nTRST\nTDI\nTDOGND\nKEY (NO PIN)\nBTMS\nBTCK\nBTRST\nBTDI\nGNDFigure 5. JTAG Target Boar d Connector with No Local \nBoundary Scan\nFigure 6. JTAG Pod Connector DimensionsTOP VIEW13 1411 1291 078563412EMU\nGND\nTMS\nTCK\nTRST\nTDI\nTDOGND\nKEY (NO PIN)\nBTMS\nBTCK\nBTRST\nBTDI\nGND\n0.64"\n0.88"\n0.24"\n–15– REV. AADSP-2191M\nDesign-for-Emulation Circuit Information\nFor details on target board design issues including: single \nprocessor connections, multiproce ssor scan chains, signal buff-\nering, signal termination, a nd emulator pod logic, see the EE-68: \nAnalog Devices JTAG Emulation T echnical Reference  on the Analog \nDevices website (www.analog. com)—use site search on \n“EE-68.” This document is upda ted regularly to keep pace with \nimprovements to emulator support.Additional Information\nThis data sheet provides a general overview of the ADSP-2191M architecture and functionality. For detailed information on the \ncore architecture of the ADSP-219x family, refer to the \nADSP-219x/ADSP-2191 DSP Hardware Reference . For details on \nthe instruction set, refer to the ADSP-219x Instruction Set \nReference .\nPIN FUNCTION DESCRIPTIONS\nADSP-2191M pin definitions are listed in Table 7 . All \nADSP-2191M inputs are asynchronous and can be asserted \nasynchronously to CLKIN (or to TCK for TRST ). \nTie or pull unused inputs to VDDEXT  or GND, except for \nADDR21–0, DATA15–0, PF7-0, and inputs that have internal pull-up or pull-down resistors (\nTRST , BMODE0, BMODE1, \nOPMODE, BYPASS, TCK,  TMS, TDI, and RESET )—these \npins can be left floating. These pi ns have a logic-level hold circuit \nthat prevents input from floating internally. \nThe following symbols appear  in the Type column of Table 7 : G \n= Ground, I = Input, O = Output, P = Power Supply, and T = \nThree-State.Figure 7. JTAG Pod Connector Keep-Out Area0.1 0"\n0.15"\nTable 7. Pin Function Descriptions \nPin T ype Function\nA21–0 O/T External Port Address Bus\nD7–0 I/O/T External Port Data Bus, least significant 8 bits\nD15\n  /PF15  /SPI1SEL7I/O/T\nI/OIData 15 (if 16-bit external bus)/Programmable Flags 15 (if 8-bit external bus)/SPI1 Slave \nSelect output 7 (if 8-bit exte rnal bus, when SPI1 enabled)\nD14\n  /PF14\n  /SPI0SEL7I/O/T\nI/O\nIData 14 (if 16-bit external bus)/Programmable Flags 14 (if 8-bit external bus)/SPI0 Slave \nSelect output 7 (if 8-bit exte rnal bus, when SPI0 enabled)\nD13\n  /PF12\n  /SPI1SEL6I/O/T\nI/O\nIData 13 (if 16-bit external bus)/Programmable Flags 13 (if 8-bit external bus)/SPI1 Slave \nSelect output 6 (if 8-bit exte rnal bus, when SPI1 enabled)\nD12\n  /PF12\n  /SPI0SEL6I/O/T\nI/O\nIData 12 (if 16-bit external bus)/Programmable Flags 12 (if 8-bit external bus)/SPI0 Slave \nSelect output 6 (if 8-bit exte rnal bus, when SPI0 enabled)\nD11\n  /PF11  /SPI1SEL5I/O/T\nI/OIData 11 (if 16-bit external bus)/Programmable Flags 11 (if 8-bit external bus)/SPI1 Slave \nSelect output 5 (if 8-bit exte rnal bus, when SPI1 enabled)\nD10\n  /PF10  /SPI0SEL5I/O/T\nI/OIData 10 (if 16-bit external bus)/Programmable Flags 10 (if 8-bit external bus)/SPI0 Slave \nSelect output 5 (if 8-bit exte rnal bus, when SPI0 enabled)\nD9\n  /PF9\n  /SPI1SEL4I/O/T\nI/O\nIData 9 (if 16-bit external bus) /Programmable Flags 9 (if 8-bit ex ternal bus)/SPI1 Slave Select \noutput 4 (if 8-bit external  bus, when SPI1 enabled)\nD8\n  /PF8\n  /SPI0SEL4I/O/T\nI/O\nIData 8 (if 16-bit external bus) /Programmable Flags 8 (if 8-bit ex ternal bus)/SPI0 Slave Select \noutput 4 (if 8-bit external  bus, when SPI0 enabled)\nPF7\n  /SPI1SEL3\n  /DFI/O/T\nI\nIProgrammable Flags 7/SPI1 Slave Select outp ut 3 (when SPI0 enabled)/Divisor Frequency \n(divisor select for PLL input during boot)\nPF6\n  /SPI0SEL3\n  /MSEL6I/O/T\nI\nIProgrammable Flags 6/SPI0 Slave Select output  3 (when SPI0 enabled)/Multiplier Select 6 \n(during boot)\nADSP-2191M\n–16– REV. APF5\n  /SPI1SEL2  /MSEL5I/O/T\nIIProgrammable Flags 5/SPI1 Slave Select output  2 (when SPI0 enabled)/Multiplier Select 5 \n(during boot)\nPF4\n  /SPI0SEL2  /MSEL4I/O/T\nIIProgrammable Flags 4/SPI0 Slave Select output  2 (when SPI0 enabled)/Multiplier Select 4 \n(during boot)\nPF3\n  /SPI1SEL1\n  /MSEL3I/O/T\nI\nIProgrammable Flags 3/SPI1 Slave Select output  1 (when SPI0 enabled)/Multiplier Select 3 \n(during boot)\nPF2\n  /SPI0SEL1\n  /MSEL2I/O/T\nI\nIProgrammable Flags 2/SPI0 Slave Select output  1 (when SPI0 enabled)/Multiplier Select 2 \n(during boot)\nPF1\n  /SPISS1\n  /MSEL1I/O/T\nI\nIProgrammable Flags 1/SPI1 Slave Select inpu t (when SPI1 enabled)/Multiplier Select 1 \n(during boot)\nPF0\n  /SPISS0\n  /MSEL0I/O/T\nI\nIProgrammable Flags 0/SPI0 Slave Select inpu t (when SPI0 enabled)/Multiplier Select 0 \n(during boot)\nRD\nO/T External Port Read Strobe\nWR O/T External Port Write Strobe\nACK I External Port Access Ready AcknowledgeBMS\nO/T External Port Boot Space Select\nIOMS O/T External Port IO Space Select\nMS3–0 O/T External Port Memory Space Selects\nBR I External Port Bus Request\nBG OE x t e r n a l  P o r t  B u s  G r a n t\nBGH O External Port Bus Grant Hang\nHAD15–0 I/O/T Host Port Multip lexed Address and Data Bus\nHA16 I Host Port MSB of Address BusHACK_P I Host Port ACK Polarity\nHRD\nI Host Port Read Strobe\nHWR I Host Port Write Strobe\nHACK O Host Port Access Ready AcknowledgeHALE I Host Port Address Latch St robe or Addres s Cycle Control\nHCMS\nI Host Port Internal Memory–Internal I/O Memory–Boot Memory Select\nHCIOMS I Host Port Internal I/O Memory Select\nCLKIN I Clock Input/ Oscillator Input\nXTAL O Oscillator OutputBMODE1–0 I Boot Mode 1–0. The BMOD E1 and BMODE0 pins have 85 k Ω internal pull-up resistors.\nOPMODE I Operating Mode. The OPMODE pin has a 85 k Ω internal pull-up resistor.\nCLKOUT O Clock OutputBYPASS I Phase-Lock-Loop (PLL) Bypass Mode. The BYPASS pin has a 85 k Ω internal pull-up resistor.\nRCLK1–0 I/O/T SPORT1–0 Receive Clock\nRCLK2/SCK1 I/O/T SPORT2 Receive  Clock/SPI1 Serial Clock\nRFS1–0 I/O/T SPORT1–0 Receive Frame SyncRFS2/MOSI1 I/O/T SPORT2 Receive Frame Sync /SPI1 Master-Output,  Slave-Input Data\nTCLK1–0 I/O/T SPORT1–0 Transmit ClockTCLK2/SCK0 I/O/T SPORT2 Transmit  Clock/SPI0 Serial Clock\nTFS1–0 I/O/T SPORT1–0 Transmit Frame Sync\nTFS2/MOSI0 I/O/T SPORT2 Transmit Frame Sy nc/SPI0 Master-Output, Slave-Input Data\nDR1–0 I/T SPORT1–0 Serial Data ReceiveDR2/MISO1 I/O/T SPORT2 Serial Data Recei ve/SPI1 Master-Input, Slave-Output Data\nDT1–0 O/T SPORT1–0 Serial Data TransmitDT2/MISO0 I/O/T SPORT2 Serial Data Transm it/SPI0 Master-Input, Slave-Output DataTable 7. Pin Function Descriptions  (continued)\nPin Type Function\n–17– REV. AADSP-2191M\nTMR2–0 I/O/T Timer Output or Capture\nRXD I UART Serial Receive Data\nTXD O UART Serial Transmit DataRESET\nI Processor Reset. Resets the ADSP-2191M to a known state and begi ns execution at the \nprogram memory location specified by th e hardware reset vector address. The RESET  input \nmust be asserted (low) at powerup. The RESET  pin has an 85 k Ω internal pull-up resistor.\nTCK I Test Clock (JTAG). Provides a clock for JTAG boundary scan. The TCK pin has an 85 k Ω \ninternal pull-up resistor.\nTMS I Test Mode Select (JTAG). Us ed to control the test state ma chine. The TMS pin has an 85 k Ω \ninternal pull-up resistor. \nTDI I Test Data Input (JTAG). Provides serial data for the boundary scan logic. The TDI pin has a \n85 k Ω internal pull-up resistor.\nTDO O Test Data Output (JTAG). Serial scan output of the boundary scan path.TRST\nI Test Reset (JTAG). Resets the test state machine. TRST  must be asserted (pulsed low) after \npowerup or held low for proper operation of the ADSP-2191M. The TRST  pin has a 65 k Ω \ninternal pull-down resistor.\nEMU O Emulation Status (JTAG). Mu st be connected to the ADSP -2191M emulator target board \nconnector only.\nVDDINT P Core Power Supply. Nominally 2.5 V dc and supplies the DSP’s core processor. (four pins)\nVDDEXT P I/O Power Supply. Nominally 3.3 V dc. (nine pins)\nGND G Power Supply Return. (twelve pins) NC Do Not Connect. Reserved pins that must be left open  and unconnected.Table 7. Pin Function Descriptions  (continued)\nPin T ype Function\nADSP-2191M\n–18– REV. ASPECIFICATIONS\nRECOMMENDED OPERATING CONDITIONS \nParameter Test Conditions K Grade (Commercial)\nMin            Max   B Grade (Industrial)\nMin            Max Unit\nVDDINT Internal (Core) Supply \nVoltage2.37 2.63 2.37 2.63 V\nVDDEXT External (I/O) Supply \nVoltage2.97 3.6 2.97 3.6 V\nVIH High Level Input Voltage @ VDDINT  = max,\n     VDDEXT  = max2.0 VDDEXT +0.3 2.0 VDDEXT +0.3 V\nVIL Low Level Input Voltage @ VDDINT  = min,\n     VDDEXT  = min–0.3 +0.8 –0.3 +0.8 V\nTAMB Ambient Operating \nTemperature07 0 – 4 0 + 8 5 º C\nSpecifications subject to change without notice.\nELECTRICAL CHARACTERISTICS \n          K and B Grades         \nParameter Test Conditions Min T yp Max Unit\nVOH High Level Output Voltage1 \n1Applies to output and bidirectional pins: DATA15–0, AD DR21–0, HAD15–0, MS3–0 , IOMS , RD, WR, CLKOUT, HACK, PF7–0, TMR2–0, BGH , \nBG, DT0, DT1, DT2/MISO0, TCLK0, TCLK1, TCLK2/SCK0, RCLK0,  RCLK1, RCLK2/SCK1, TFS0, TFS1, TFS2/MOSI0, RFS0, RFS1, \nRFS2/MOSI1, BMS , TDO, TXD, EMU , DR2/MISO1.@ VDDEXT = min, \n     IOH = –0.5 mA2.4 V\nVOL Low Level Output Voltage1@ VDDEXT = min, \n     IOL = 2.0 mA0.4 V\nIIH High Level Input Current2, 3\n2Applies to input pins: ACK, BR, HCMS , HCIOMS , HA16, HALE, HRD , HWR , CLKIN, DR0, DR1, RXD, HACK_P.\n3Applies to input pins with internal pull-ups: BM ODE0, BMODE1, OPMODE, BYPASS, TCK, TMS, TDI, RESET .@ VDDEXT = max, \n     VIN = VDD max10 µA\nIIL Low Level Input Current3, 4\n4Applies to input pin with internal pull-down: TRST.@ VDDEXT = max, \n     VIN = 0 V10 µA\nIIHP High Level Input Current5@ VDDEXT = max, \n     VIN = VDD max30 100 µA\nIILP Low Level Input Current4@ VDDEXT = max, \n     VIN = 0 V20 70 µA\nIOZH Three-State Leakage Current5\n5Applies to three-statable pins: DATA15–0, ADDR21–0, MS3–0 , RD, WR, PF7–0, BMS , IOMS , TFSx, RFSx, TDO, EMU , TCLKx, RCLKx, DTx, \nHAD15–0, TMR2–0.@ VDDEXT  = max, \n     VIN = VDD max10 µA\nIOZL Three-State Leakage Current6@ VDDEXT = max, \n     VIN = 0 V10 µA\nCIN Input Capacitance6, 7\n6Applies to all signal pins.\n7Guaranteed, but not tested.fIN = 1 MHz, \nTCASE = 25°C,\nVIN = 2.5 V8p F\nSpecifications subject to change without notice.\n–19– REV. AADSP-2191M\nABSOLUTE MAXIMUM RATINGS\nESD SENSITIVITY\nPower Dissipation\nUsing the operation-versus-current information in Table 8 , designers can estimate the ADSP-2191M’s internal power supply (VDDINT ) \ninput current for a specific applicatio n, according to the formula for IDDINT  calculation beneath Table 8 . For calculation of external \nsupply current and total supply current, see Power Dissipation on Page 40.VDDINT Internal (Core) Supply Voltage1. . . –0.3 V to +3.0 V\n1Stresses greater than those listed ab ove may cause permanent damage to the\ndevice. These are stress ratings only; functional operation of the device at these\nor any other conditions greater than those indicated in the operational sectionsof this specification is not implied. Exposure to absolute maximum rating\nconditions for extended periods may affect device reliability.VDDEXT  External (I/O) Supply Voltage . . . . –0.3 V to +4.6 V\nVIL–VIH Input Voltage . . . . . . . . . . –0.5 V to VDDEXT +0.5 V\nVOL–VOH Output Voltage Swing. . . –0.5 V to VDDEXT +0.5 V\nTSTORE  Storage Temperature Range. . . . . .–65ºC to +150ºC\nTLEAD Lead Temperature of ST -144 (5 seconds)  . . . . 185ºC\nCAUTION\nESD (electrostatic discharge)  sensitive device. Electrostat ic charges as high as 4000 V\nreadily accumulate on the hu man body and test equipment and can discharge without\ndetection. Although the AD SP-2191M features propriet ary ESD protection circuitry,\npermanent damage may occur on devices subjected to high energy electrostatic\ndischarges. Therefore, proper ESD precaut ions are recommended to avoid perfor-\nmance degradation or loss of functionality.\nTable 8. Operation T ypes Versus Input Current\n                               K-Grade\n               IDDINT (mA) CCLK = 160 MHz                               B-Grade\n              IDDINT (mA)1 CCLK = 140 MHz\n               Core           Peripheral                Core           Peripheral\nActivity Typ1 \n1Test conditions: VDDINT = 2.50 V; HCLK (peripheral clock) freq uency = CCLK/2 (core clock/2) frequency; TAMB = 25ºC.Max2\n2Test conditions: VDDINT = 2.65 V; HCLK (peripheral clock) freq uency = CCLK/2 (core clock/2) frequency; TAMB = 25ºC.Typ1Max2Typ1Max2Typ1Max2\nPower Down3\n3PLL, Core, peripheral clocks, and CLKIN are disabled.100 µA 600 µA 0 50 µA 100 µA 500 µA 0 50 µA\nIdle 14\n4PLL is enabled and Core and peripheral clocks are disabled.12581247\nIdle 25\n5Core CLK is disabled and peripheral clock is enabled. 126 0 7 0 125 5 6 2\nTypical6\n6All instructions execute from internal memory. 50% of the instructio ns are repeat MACs with dual operand addressing, with chang ing data fetched using \na linear address sequence. 50% of the instructions are type 3 instructions.184 210 60 70 165 185 55 62\nPeak7\n7All instructions execute from internal memory. 100% of the instr uctions are MACs with dual operand addressing, with changing da ta fetched using a linear \naddress sequence.215 240 60 70 195 210 55 62\nIDDINT %Typical IDDINT-TYPICAL× ()= %Idle IDDINT-IDLE× () %Power Down IDDINT-PWRDWN× () ++\nADSP-2191M\n–20– REV. ATIMING SPECIFICATIONS\nThis section contains timing in formation for the DSP’s external \nsignals. Use the exact information given. Do not attempt to derive \nparameters from the addition or subtraction of other information. \nWhile addition or subtraction would yield meaningful results for \nan individual device, the values given in this data sheet reflect statistical variations and worst cases. Consequently, parameters \ncannot be added meaningfully to derive longer times.\nSwitching characteristics  specify how the processor changes its \nsignals. No control is possible over this timing; circuitry external \nto the processor must be designed for compatibility with these signal characteristics. Switching characteristics indicate what the \nprocessor will do in a given circumstance. Switching character-\nistics can also be used to ensure that any timing requirement of a device connected to the processo r (such as memory) is satisfied.Timing requirements  apply to signals that are controlled by \ncircuitry external to the processo r, such as the data input for a \nread operation.Timing requirements guarantee that the \nprocessor operates correctly with other devices.\nClock In and Clock Out Cycle Timing\nTable 9  and Figure 8  describe clock and reset operations. Com-\nbinations of CLKIN and clock multipliers must not select \ncore/peripheral clocks in excess of 160/80 MHz for commercial \ngrade and 140/70 MHz for industrial grade, when the peripheral clock rate is one-half the core cl ock rate. If the peripheral clock \nrate is equal to the core clock rate, the maximum peripheral clock \nrate is 80 MHz for both commerc ial and industrial grade parts. \nThe peripheral clock is supp lied to the CLKOUT pins.\nWhen changing from bypass mode to PLL mode, allow 512 \nHCLK cycles for the PLL to stabilize.\nTable 9. Clock In and Clock Out Cycle Timing\nParameter Min Max Unit\nSwitching Characteristics\ntCKOD CLKOUT Delay from CLKIN 0 5.8 ns\ntCKO CLKOUT Period112.5 ns\nTiming Requirements\ntCK CLKIN Period2, 310 200 ns\ntCKL CLKIN Low Pulse 4.5 ns\ntCKH CLKIN High Pulse 4.5 ns\ntWRST RESET  Asserted Pulsewidth Low 200tCLKOUT ns\ntMSS MSELx/BYPASS Stable Before RESET  Deasserted Setup 40 µs\ntMSH MSELx/BYPASS Stable After RESET  Deasserted Hold 1000 ns\ntMSD MSELx/BYPASS Stable After RESET  Asserted 200 ns\ntPFD Flag Output Disable Time After RESET  Asserted 10 ns\n1CLKOUT jitter can be as great as 8 ns wh en CLKOUT frequency is less than 20 MHz. For fr equencies greater than 20 MHz, jitter is  less than 1 ns.\n2In clock multiplier mode and MSEL6–0 set for 1:1 (or CLKIN = CCLK), tCK = tCCLK .\n3In bypass mode, tCK = tCCLK .\nFigure 8. Clock In and Clock Out Cycle TimingtCKOD\nCLKOUTMSEL6–0\nBYPASS\nDFRESETCLKIN\ntWRSTtCDDtCK\ntCKL\ntMSH\ntCKOtPFDtMSDtMSS\n–21– REV. AADSP-2191M\nProgrammable Flags Cycle Timing\nTable 10  and Figure 9  describe Programmable Flag operations. \nTimer PWM_OUT Cycle Timing\nTable 11  and Figure 10  describe timer expired operations. The \ninput signal is asynchronous in  “width capture mode” and has \nan absolute maximum input frequency of 40 MHz.Table 10. Programmable Flags Cycle Timing\nParameter Min Max Unit\nSwitching Characteristics\ntDFO Flag Output Delay with Respect to CLKOUT 7 ns\ntHFO Flag Output Hold After CLKOUT High 6 ns\nTiming Requirement\ntHFI Flag Input Hold is Asynchronous 3 ns\nFigure 9. Programmable Flags Cycle TimingPF\n(INPUT)tHFIPF\n(OUTPUT)CLKOUT\nFLAG INPUTtDFO tHFO\nFLAG OUTPUT\nTable 11. Timer PWM_OUT Cycle Timing\nParameter Min Max Unit\nSwitching Characteristic\ntHTO Timer Pulsewidth Output112.5 (232–1) cycles ns\n1The minimum time for tHTO is one cycle, and the maximum time for tHTO equals (232–1) cycles.\nFigure 10. Timer PWM_OUT Cycle TimingHCLK\nPWM_OUTtHTO\nADSP-2191M\n–22– REV. AExternal Port Write Cycle Timing\nTable 12  and Figure 11  describe external port write operations.\nThe external port lets systems exte nd read/write accesses in three \nways: waitstates, ACK input, and combined waitstates and ACK. \nTo add waits with ACK, the DSP must see ACK low at the rising edge of EMI clock. ACK low causes the DSP to wait, and the \nDSP requires two EMI clock cycles after ACK goes high to finish \nthe access. For more information,  see the External Port chapter \nin the ADSP-219x/ADSP-2191 DSP Hardware Reference .\nTable 12. External Port Write Cycle Timing\nParameter1, 2Min Max Unit\nSwitching Characteristics\ntCSWS Chip Select Asserted to WR Asserted Delay 0.5tHCLK–4 ns\ntAWS Address Valid to WR Setup and Delay 0.5tHCLK–3 ns\ntWSCS WR Deasserted to Chip Select Deasserted 0.5tHCLK–4 ns\ntWSA WR Deasserted to Address Invalid 0.5tHCLK–3 ns\ntWW WR Strobe Pulsewidth tHCLK–2+W3ns\ntCDA WR to Data Enable Access Delay 0n s\ntCDD WR to Data Disable Access Delay 0.5tHCLK–3 0.5tHCLK+4 ns\ntDSW Data Valid to WR Deasserted Setup tHCLK+1+W3tHCLK+7+W3ns\ntDHW WR Deasserted to Data Invalid Hold Time; E_WHC43.4 ns\ntDHW WR Deasserted to Data Invalid Hold Time; E_WHC4tHCLK+3.4 ns\ntWWR WR Deasserted to WR, RD Asserted tHCLK\nTiming Requirements\ntAKW ACK Strobe Pulsewidth 12.5 ns\ntDWSAK ACK Delay from WR Low 0 ns\n1tHCLK  is the peripheral clock period.\n2These are timing parameters that are based on worst-case operating conditions.\n3W = (number of waitstates specified in wait register) /H11547 tHCLK.4Write hold cycle–memory select control registers (MS /H11547 CTL).\nFigure 11. External Po rt Write Cycle TimingD15–0tAWStWW\ntAKW\ntDHWtCDDACKWRA21–0MS3–0\nIOM S\nBMStCSWS\ntWSAtWSCS\ntCDAtDWSAK\nRDtDSWtWWR\n–23– REV. AADSP-2191M\nExternal Port Read Cycle Timing\nTable 13  and Figure 12  describe external port read operations. \nFor additional information on the ACK signal, see the discussion \non Page 22 .\nTable 13. External Port Read Cycle Timing\nParameter1, 2Min Max Unit\nSwitching Characteristics\ntCSRS Chip Select Asserted to RD Asserted Delay 0.5tHCLK–3 ns\ntARS Address Valid to RD Setup and Delay 0.5tHCLK–3 ns\ntRSCS RD Deasserted to Chip Sel ect Deasserted Setup 0.5tHCLK–2 ns\ntRW RD Strobe Pulsewidth tHCLK–2+W3ns\ntRSA RD Deasserted to Addr ess Invalid Setup 0.5tHCLK–2 ns\ntRWR RD Deasserted to WR, RD Asserted tHCLK\nTiming Requirements\ntAKW ACK Strobe Pulsewidth tHCLK ns\ntRDA RD Asserted to Data Access Setup tHCLK–4+W3ns\ntADA Address Valid to Data Access Setup tHCLK+W3ns\ntSDA Chip Select Asserted to Data Access Setup tHCLK+W3ns\ntSD Data Valid to RD Deasserted Setup 7 ns\ntHRD RD Deasserted to Data Invalid Hold 0 ns\ntDRSAK ACK Delay from RD Low 0 ns\n1tHCLK  is the peripheral clock period.\n2These are timing parameters that are based on worst-case operating conditions.\n3W = (number of waitstates specified in wait register) /H11547 tHCLK .\nFigure 12. External Po rt Read Cycle TimingD15–0tARStRW\ntAKW\ntCDA\ntRDA\ntADA\ntSDAtSD tHRDACKRDA21–0tCSRS\ntRSAtRSCS\ntDRSAKtRWRMS3--0\nIOMS\nBMS\nWR\nADSP-2191M\n–24– REV. AExternal Port Bus Request and Grant Cycle Timing\nTable 14  and Figure 13  describe external port bus request and \nbus grant operations.\nTable 14. External Port Bus Request and Grant Cycle Timing\nParameter1, 2Min Max Unit\nSwitching Characteristics\ntSD CLKOUT High to xMS , Address, and RD/WR Disable 0.5tHCLK+1 ns\ntSE CLKOUT Low to xMS , Address, and RD/WR E n a b l e 04n s\ntDBG CLKOUT High to BG Asserted Setup 0 4 ns\ntEBG CLKOUT High to BG Deasserted Hold Time 0 4 ns\ntDBH CLKOUT High to BGH  Asserted Setup 0 4 ns\ntEBH CLKOUT High to BGH  D e a s s e r t e d  H o l d  T i m e 04n s\nTiming Requirements\ntBS BR Asserted to CLKOUT High Setup 4.6 ns\ntBH CLKOUT High to BR Deasserted Hold Time 0 ns\n1tHCLK  is the peripheral clock period.\n2These are timing parameters that are based on worst-case operating conditions.\nFigure 13. External Port Bus Request and Grant Cycle TimingtBH\nA21–0CLKOUT\ntBS\ntSD\ntSD\ntSD\ntDBG\ntDBHtSE\ntSE\ntSE\ntEBG\ntEBH\nBGHWR\nRDMS3--0\nIOMS\nBMSBR\nBG\n–25– REV. AADSP-2191M\nHost Port ALE Mode Write Cycle Timing\nTable 15  and Figure 14  describe Host port write operations in \nAddress Latch Enable (ALE) mode. For more information on \nACK, Ready, ALE, and ACC mode selection, see the Host port \nmodes description on Page 8 .\nTable 15. Host Port ALE Mode Write Cycle Timing\nParameter Min Max Unit\nSwitching Characteristics\ntWHKS1 HWR  Asserted to HACK Assert ed (Setup, ACK Mode) First \nByte10 5tHCLK+tNH1ns\ntWHKS2 HWR  Asserted to HACK Asserted (Setup, ACK Mode)210 ns\ntWHKH HWR  Deasserted to HACK Deas serted (Hold, ACK Mode) 10 ns\ntWHS HWR  Asserted to HACK Asserted (Setup, Ready Mode) 10 ns\ntWHH HWR  Asserted to HACK Deasserted (Hold, Ready Mode) \nFirst Byte05 tHCLK+tNH1ns\nTiming Requirements\ntCSAL HCMS  or HCIOMS  Asserted to HALE Asserted 0n s\ntALPW HALE Asserted Pulsewidth 4 ns\ntALCSW HALE Deasserted to HCMS  or HCIOMS  Deasserted 1 ns\ntWCSW HWR  Deasserted to HCMS  or HCIOMS  Deasserted 0 ns\ntALW HALE Deasserted to HWR  Asserted 1 ns\ntWCS HWR  Deasserted (After Last Byte) to HCMS  or \nHCIOMS  Deasserted (Ready for Next Write)0n s\ntHKWD HACK Asserted to HWR  Deasserted (Hold, ACK Mode) 1.5 ns\ntAALS Address Valid to HALE Deasserted (Setup) 2 ns\ntALAH HALE Deasserted to Address Invalid (Hold) 4 ns\ntDWS Data Valid to HWR  Deasserted (Setup) 4 ns\ntWDH HWR  Deasserted to Data Invalid (Hold) 1 ns\n1tNH are peripheral bus latencies (n /H11547tHCLK ); these are internal DSP latencies related to the number  of peripheral DMAs attempting to access DSP memory \nat the same time.\n2Measurement is for the second, third, or fourth byte of a host write transaction. The quantity of bytes to complete a host writ e transaction is dependent on \nthe data bus size (8 or 16 bits) and the data type (16 or 24 bits).\nADSP-2191M\n–26– REV. AFigure 14. Host Port AL E Mode Write Cycle TimingAD DRESS\nVA LIDADDRESS\nVALIDtALAH\nDATA\nVALIDDATA\nVAL ID\nLASTBY TE FI RS T\nBY TEST ART\nNEXT WORDSTART\nFIRST WORDtWDHtAA LStDWStWHKS tWH KH\nHACK EACH BYTE\nHACK FIRST BYTEtALPWtALCSW\ntALW\ntHK WDtWC S W\ntWHStWHH\nHAD15–0\nHA16HALE\nHACK\n(READY\nMOD E)tCS A L\ntWCS\nHACK\n(ACK\nMOD E)HWRHCMS\nHIOMS\n–27– REV. AADSP-2191M\nHost Port ACC Mode Write Cycle Timing\nTable 16  and Figure 15  describe Host port write operations in \nAddress Cycle Control (ACC) mode. For more information on \nACK, Ready, ALE, and ACC mode selection, see the Host port \nmodes description on Page 8 .\nTable 16. Host Port ACC Mode Write Cycle Timing\nParameter Min Max Unit\nSwitching Characteristics\ntWHKS1 HWR  Asserted to HACK Asserted (ACK Mode) First Byte 10 5tHCLK+tNH1ns\ntWHKS2 HWR  Asserted to HACK Asserted (Setup, ACK Mode)212 ns\ntWHKH HWR  Deasserted to HACK Deas serted (Hold, ACK Mode) 10 ns\ntWHS HWR  Asserted to HACK Asserted (Setup, Ready Mode) 10 ns\ntWHH HWR  Asserted to HACK Deasserted (Hold, Ready Mode) \nFirst Byte05 tHCLK+tNH1ns\ntWSHKS HWR  Asserted to HACK Asserted (Setup) During Address \nLatch10 ns\ntWHHKH HWR  Deasserted to HACK Deasserted (Hold) During \nAddress Latch10 ns\nTiming Requirements\ntWAL HWR  Asserted to HALE Deasserted (Delay) 1.5 ns\ntCSAL HCMS  or HCIOMS  Asserted to HALE Asserted (Delay) 0n s\ntALCS HALE Deasserted to Optional HCMS  or HCIOMS  \nDeasserted1n s\ntWCSW HWR  Deasserted to HCMS  or HCIOMS  Deasserted 0 ns\ntALW HALE Asserted to HWR Asserted 0.5 ns\ntCSW HCMS  or HCIOMS  Asserted to HWR  Asserted 0n s\ntWCS HWR  Deasserted (After Last Byte) to HCMS  or \nHCIOMS  Deasserted (Ready for Next Write)0n s\ntALEW HALE Deasserted to HWR Asserted 1 ns\ntHKWD HACK Asserted to HWR  Deasserted (Hold, ACK Mode) 1.5 ns\ntADW Address Valid to HWR  Asserted (Setup) 3 ns\ntWAD HWR  Deasserted to Addr ess Invalid (Hold) 3 ns\ntDWS Data Valid to HWR  Deasserted (Setup) 2 ns\ntWDH HWR  Deasserted to Data Invalid (Hold) 2 ns\ntHKWAL HACK Asserted to HWR  Deasserted (Hold) During Address \nLatch22n s\n1tNH are peripheral bus latencies (n /H11547tHCLK ); these are internal DSP latencies related to the numb er of peripheral DMAs attempting to access DSP memory \nat the same time. \n2 Measurement is for the second, third, or fourth byte of a host write transaction. The quantity of bytes to complete a host wri te transaction is dependent \non the data bus size (8 or 16 bits ) and the data type (16 or 24 bits).\nADSP-2191M\n–28– REV. AFigure 15. Host Port A CC Mode Write Cycle TimingtDW S tADW\nADDRESS\nVALIDDATA\nVAL IDDAT A\nVA LIDADDRESS\nVALIDHACK F IRST BYTE\ntWDH\nHAD15–0\nHA16tWA D\nLAST\nBYTEFIRST\nBY TESTART\nNEXT WORDSTART\nFIRST WORDtWHKH\ntWHKStCSAL\ntWCSHALE\ntALE W\ntHKWD\nHACK EACH BYTE\nHACK\n(READY\nMO DE )tWALtALC S\ntALWtCSWtWCSW\ntWHStWHH tWHHKHtWSHKStHK WAL\nHACK\n(ACK\nMO DE)HWRHCMS\nHIOMS\n–29– REV. AADSP-2191M\nHost Port ALE Mode Read Cycle Timing\nTable 17  and Figure 16  describe Host port read operations in \nAddress Latch Enable (ALE) mode. For more information on \nACK, Ready, ALE, and ACC mode selection, see the Host port \nmodes description on Page 8 .\nTable 17. Host Port ALE Mode Read Cycle Timing\nParameter Min Max Unit\nSwitching Characteristics\ntRHKS1 HRD  Asserted to HACK Asserted (ACK Mode) First Byte 12tHCLK 15tHCLK+tNH1ns\ntRHKS2 HRD  Asserted to HACK Asserted (Setup, ACK Mode)212 ns\ntRHKH HRD  Deasserted to HACK Deasserted (Hold, ACK Mode) 10 ns\ntRHS HRD  Asserted to HACK Asserted (Setup, Ready Mode) 10 ns\ntRHH HRD  Asserted to HACK Deasserted (Hold, Ready Mode) \nFirst Byte12tHCLK 15tHCLK+tNH1ns\ntRDH HRD  Deasserted to Data Invalid (Hold) 1 ns\ntRDD HRD  Deasserted to Data Disable 10 ns\nTiming Requirements\ntCSAL HCMS  or HCIOMS  Asserted to HALE Asserted (Delay) 0n s\ntALCS HALE Deasserted to Optional HCMS  or HCIOMS  \nDeasserted1n s\ntRCSW HRD  Deasserted to HCMS  or HCIOMS  Deasserted 0 ns\ntALR HALE Deasserted to HRD  Asserted 5 ns\ntRCS HRD  Deasserted (After Last Byte) to HCMS  or \nHCIOMS  Deasserted (Ready for Next Read)0n s\ntALPW HALE Asserted Pulsewidth 4 ns\ntHKRD HACK Asserted to HRD  Deasserted (Hold, ACK Mode) 1.5 ns\ntAALS Address Valid to HALE Deasserted (Setup) 2 ns\ntALAH HALE Deasserted to Address Invalid (Hold) 4 ns\n1tNH are peripheral bus latencies (n /H11547tHCLK ); these are internal DSP latencies related to the number  of peripherals attempting to access DSP memory at \nthe same time.\n2Measurement is for the second, third, or fourth byte of a host re ad transaction. The quantity of bytes to complete a host read transaction is dependent on \nthe data bus size (8 or 16 bits) and the data type (16 or 24 bits).\nADSP-2191M\n–30– REV. AFigure 16. Host Port ALE Mode Read Cycle TimingtAALStH KRD\nADDRESS\nVA LIDADDRESS\nVALIDtALA H\nDATA\nVALIDDATA\nVALID\nLASTBYTE FIRST\nBYTESTART\nNEXT WORDSTA RT\nFI RS T WO RDtRDHtRCS\ntRHKH\nHACK\n(READY\nMO DE )HACK FOR EACH BYTEtALPWtALC S\ntAL RtRCSW\nHACK FIRST BYTEtRH StRH HtRH K S\ntRDD\nHAD15–0\nHA16tCSA L\nHALE\nHACK\n(ACK\nMOD E)HRDHCMS\nHIOMS\n–31– REV. AADSP-2191M\nHost Port ACC Mode Read Cycle Timing\nTable 18  and Figure 17  describe Host port read operations in \nAddress Cycle Control (ACC) mode. For more information on \nACK, Ready, ALE, and ACC mode selection, see the Host port \nmodes description on Page 8 .\nTable 18. Host Port ACC Mode Read Cycle Timing\nParameter Min Max Unit\nSwitching Characteristics\ntRHKS1 HRD  Asserted to HACK Asserted (ACK Mode) First Byte 12tHCLK 15tHCLK+tNH1ns\ntRHKS2 HRD  Asserted to HACK Asserted (Setup, ACK Mode)210 ns\ntRHKH HRD  Deasserted to HACK Deasserted (Hold, ACK Mode) 10 ns\ntRHS HRD  Asserted to HACK Asserted (Setup, Ready Mode) 10 ns\ntRHH HRD  Asserted to HACK Deasserted (Hold, Ready Mode) \nFirst Byte12tHCLK 15tHCLK+tNH1ns\ntRDH HRD  Deasserted to Data Invalid (Hold) 1 ns\ntWSHKS HWR  Asserted to HACK Asserted (Setup) During Address \nLatch10 ns\ntWHHKH HWR  Deasserted to HACK Deasserted (Hold) During \nAddress Latch10 ns\ntRDD HRD  Deasserted to Data Disable 10 ns\nTiming Requirements\ntCSAL HCMS  or HCIOMS  Asserted to HALE Asserted (Delay) 0n s\ntALCS HALE Deasserted to Optional HCMS  or HCIOMS  \nDeasserted1n s\ntRCSW HRD  Deasserted to HCMS  or HCIOMS  Deasserted 0 ns\ntALW HALE Asserted to HWR Asserted 0.5 ns\ntALER HALE Deasserted to HWR Asserted 1 ns\ntCSR HCMS  or HCIOMS  Asserted to HRD  Asserted 0n s\ntRCS HRD  Deasserted (After Last Byte) to HCMS  or \nHCIOMS  Deasserted (Ready for Next Read)0n s\ntWAL HWR Deasserted to HALE Deasserted (Delay) 2.5 ns\ntHKRD HACK Asserted to HRD  Deasserted (Hold, ACK Mode) 1.5 ns\ntADW Address Valid to HWR  Deasserted (Setup) 2 ns\ntWAD HWR  Deasserted to Addr ess Invalid (Hold) 1 ns\ntHKWAL HACK Asserted to HWR  Deasserted (Hold) During Address \nLatch22n s\n1tNH are peripheral bus latencies (n /H11547tHCLK ); these are internal DSP latencies related to the number  of peripherals attempting to access DSP memory at \nthe same time.\n2Measurement is for the second, third, or fourth byte of a host read transaction. The quantity of bytes to complete a host read transaction is dependent on \nthe data bus size (8 or 16 bits) and the data type (16 or 24 bits).\nADSP-2191M\n–32– REV. AFigure 17. Host Port ACC Mode Read Cycle TimingADDRESS\nVALIDDATA\nVA LIDDAT A\nVA LIDADDRESS\nVALIDtRDH\nHAD15–0\nHA16tADW\nLA S T\nBYTEFIRST\nBYTESTART\nNE XT W ORDSTART\nFI RS T W ORDtRH KHtHKR DtCSAL\ntRHK SttRC SHALE\ntALW\nHACK\n(ACK\nMOD E)HACK EACH BYTEtALC S\ntCSR\ntALE RtRC S W\nHACK\n(READY\nMOD E)HACK FIRST BYTEtRHStRHHtWSHKS\ntWHHKHtHK W AL\ntRDDtWAL\ntWADHWR\nHRDHCMS\nHIOMS\n–33– REV. AADSP-2191M\nSerial Ports\nTable 19  and Figure 18  describe SPORT transmit and receive \noperations, while Figure 19  and Figure 20  describe SPORT \nFrame Sync operations.\nTable 19. Serial Ports1, 2\nParameter Min Max Unit\nExternal Clock Timing Requirements\ntSFSE TFS/RFS Setup Before TCLK/RCLK34n s\ntHFSE TFS/RFS Hold After TCLK/RCLK34n s\ntSDRE Receive Data Setup Before RCLK31.5 ns\ntHDRE Receive Data Hold After RCLK34n s\ntSCLKW TCLK/RCLK Width 0.5tHCLK–1 ns\ntSCLK TCLK/RCLK Period 2tHCLK ns\nInternal Clock Timing Requirements\ntSFSI TFS Setup Before TCLK4; RFS Setup Before RCLK34n s\ntHFSI TFS/RFS Hold After TCLK/RCLK33n s\ntSDRI Receive Data Setup Before RCLK32n s\ntHDRI Receive Data Hold After RCLK35n s\nExternal or Internal Cloc k Switching Characteristics\ntDFSE TFS/RFS Delay After TCLK/RCLK (Internally \nGenerated FS)414 ns\ntHOFSE TFS/RFS Hold After TCLK/RCLK (Internally \nGenerated FS)43n s\nExternal Clock Switching Characteristics\ntDDTE Transmit Data Delay After TCLK413.4 ns\ntHDTE Transmit Data Hold After TCLK44n s\nInternal Clock Switching Characteristics\ntDDTI Transmit Data Delay After TCLK413.4 ns\ntHDTI Transmit Data Hold After TCLK44n s\ntSCLKIW TCLK/RCLK Width 0.5tHCLK–3.5 0.5tHCLK+2.5 ns\nEnable and Three-State5 Switching Characteristics\ntDTENE Data Enable from External TCLK401 2 . 1 n s\ntDDTTE Data Disable from External TCLK413 ns\ntDTENI Data Enable from Internal TCLK401 3 n s\ntDDTTI Data Disable from External TCLK412 ns\nExternal Late Frame Sync Switching Characteristics\ntDDTLFSE Data Delay from Late External TFS with MCE=1, MFD=06, 710.5 ns\ntDTENLFSE Data Enable from Late FS or MCE=1, MFD=06, 73.5 ns\n1To determine whether communication is possible between two devices at clock speed n, the following specifications must be confi rmed: 1) frame sync delay \nand frame sync setup-and-hold, 2) data delay and data setup-and-hold, and 3) SCLK width.\n2Word selected timing for I2S mode is the same as TFS/RFS timing (normal framing only).\n3Referenced to sample edge.\n4Referenced to drive edge.\n5Only applies to SPORT0/1.\n6MCE=1, TFS enable, and TFS valid follow tDDTENFS  and tDDTLFSE .\n7If external RFSD/TFS s etup to RCLK/TCLK>0.5tLSCK , tDDTLSCK  and tDTENLSCK  apply; otherwise tDDTLFSE and tDTENLFS  apply. \nADSP-2191M\n–34– REV. AFigure 18. Serial PortsDTDTtDDTTEtDDTEN\ntDDTTItDDTINDRIVE\nEDGEDRIVE\nEDGE\nDRIVE\nEDGEDRIVE\nEDGE\nTCLK/RCLKTCLK/RCLKTCLK (EXT)\nTFS (“LATE,” EXT.)tSDRIRCLK\nRFS\nDRDRIVE\nEDGESAMPLE\nEDGE\ntHDRItSFSI tHFSItDFSEtHOFSEtSCLKIWDATA RECEIVE-INTERNAL CLOCK\ntSDREDATA RECEIVE-EXTERNAL CLOCK\nRCLK\nRFS\nDRDRIVE\nEDGESAMPLE\nEDGE\ntHDREtSFSE tHFSEtDFSEtSCLKW\ntHOFSE\nNOTE: EITHER THE RISING EDGE OR FALLING EDGE OF RCLK OR TCLK CAN BE USED AS THE ACTIVE SAMPLING EDGE.\ntDDTItHDTITCLK\nTFS\nDTDRIVE\nEDGESAMPLE\nEDGE\ntSFSI tHFSItSCLKIW\ntDFSE\ntHOFSEDATA TRANSMIT-INTERNAL CLOCK\ntDDTEtHDTETCLK\nTFS\nDTDRIVE\nEDGESAMPLE\nEDGE\ntSFSE tHFSEtDFSEtSCLKW\ntHOFSEDATA TRANSMIT-EXTERNAL CLOCK\nNOTE: EITHER THE RISING EDGE OR FALLING EDGE OF RCLK OR TCLK CAN BE USED AS THE ACTIVE SAMPLING EDGE.\nTCLK (INT)\nTFS (“LATE,” INT.)\n–35– REV. AADSP-2191M\nFigure 19. Serial Ports— External Late Frame Sync (Frame Sync Setup > 0.5tSCLK)\nFigure 20. Serial Ports—External Late Frame Sync (Frame Sync Setup < 0.5tHCLK )DRIVE SAMPLE DRIVE\ntDTENLFSE\ntDDTLFSEEXTERNAL RFS WITH MCE = 1, MFD = 0\n1ST BIT 2ND BITDTRCLK\nRFS\nLATE EXTERNAL TFStHDTE/ItDDTE/ I\ntSFSE/IDRIVE SAMPLE DRIVE\ntDTENLFSE\ntDDTLFSE1ST BIT 2ND BITDTTCLK\nTFS\ntHDTE/ ItDDTE/ItHOSFSE/I\ntHOSFSE/ItSFSE/I\ntDDTLFSEDRIVE SAMPLE DRIVE\ntDTENLFSE\ntDDTLFSEEXTERNAL RFS WITH MCE = 1, MFD = 0\n1ST BIT 2ND BIT DTRCLK\nRFS\nLATE EXTERNAL TFStHDTE/ ItDDTE/I\ntSFSE/ IDRIVE SAMPLE DRIVE\ntDTENLFSE\n1ST BIT 2ND BIT DTTCLK\nTFS\ntHDTE/ ItDDTE/ ItHOFSE/ItHOFSE/ I tSFSE/I\nADSP-2191M\n–36– REV. ASerial Peripheral Interfac e (SPI) Port—Master Timing\nTable 20  and Figure 21  describe SPI port master operations. \nTable 20. Serial Peripheral Interface (SPI) Port—Master Timing\nParameter Min Max Unit\nSwitching Characteristics\ntSDSCIM SPIxSEL  Low to First SCLK edge (x=0 or 1) 2tHCLK–3 ns\ntSPICHM Serial Clock High Period 2tHCLK–3 ns\ntSPICLM Serial Clock Low Period 2tHCLK–3 ns\ntSPICLK Serial Clock Period 4tHCLK–1 ns\ntHDSM Last SCLK Edge to SPIxSEL  High (x=0 or 1) 2tHCLK–3 ns\ntSPITDM Sequential Transfer Delay 2tHCLK–2 ns\ntDDSPID SCLK Edge to Data Output Valid (Data Out Delay) 0 6 ns\ntHDSPID SCLK Edge to Data Output Invalid (Data Out Hold) 0 5 ns\nTiming Requirements\ntSSPID Data Input Valid to SCLK Edge (Data Input Setup) 8 ns\ntHSPID SCLK Sampling Edge to Data Input Invalid (Data In Hold) 1 ns\nFigure 21. Serial Peripheral Interface (SPI) Port—Master TimingtHSPIDtHDSPID\nLSB MSB\ntHSPIDtDDSPID\nMOSI\n(OUTPUT)\nMISO\n(INPUT)SPIxSEL\n(OUTPUT)\n(x = 0 or 1)\nSCLK\n(CPOL = 0)\n(OUTPUT)\nSCLK\n(CPOL = 1)\n(OUTPUT)tSPICHM\ntSPICLM\ntSPICLMtSPICLK\ntSPICHMtHDSM tSPITDM\ntHDSPID\nLSB\nVALIDLSB MSB\nMSB\nVALIDtHSPIDtDDSPID\nMOSI\n(OUTPUT)\nMISO\n(INPUT)tSSPIDCPHA = 0MSB\nVALIDtSDSCIM\ntSSPID\nLSB\nVALIDCPHA = 1tSSPID\n–37– REV. AADSP-2191M\nSerial Peripheral Interface (SPI) Port—Slave Timing\nTable 21  and Figure 22  describe SPI port slave operations. \nTable 21. Serial Peripheral Interface (SPI) Port—Slave Timing\nParameter Min Max Unit\nSwitching Characteristics\ntDSOE SPISS  Assertion to Data Out Active 08n s\ntDSDHI SPISS  Deassertion to Data High Impedance 01 0 n s\ntDDSPID SCLK Edge to Data Out Valid (Data Out Delay) 0 10 ns\ntHDSPID SCLK Edge to Data Out Invalid (Data Out Hold) 0 10 ns\nTiming Requirements\ntSPICHS Serial Clock High Period 2tHCLK ns\ntSPICLS Serial Clock Low Period 2tHCLK ns\ntSPICLK Serial Clock Period 4tHCLK ns\ntHDS Last SPICLK Edge to SPISS  Not Asserted 2tHCLK ns\ntSPITDS Sequential Transfer Delay 2tHCLK+4 ns\ntSDSCI SPISS  Assertion to First SPICLK Edge 2tHCLK ns\ntSSPID Data Input Valid to SCLK Edge (Data Input Setup) 1.6 ns\ntHSPID SCLK Sampling Edge to Data Input Invalid (Data In Hold) 2.4 ns\nFigure 22. Serial Peripheral Interface (SPI) Port—Slave TimingtHSPIDtDDSPID tDSDHI\nLSB MSB\nMSB\nVALIDtHSPIDtDSOE tHDSPID\nMISO\n(OUTPUT)\nMOSI\n(INPUT)tSSPIDSPISS\n(INPUT)\nSCLK\n(CPOL = 0)\n(INPUT)\nSCLK\n(CPOL = 1)\n(INPUT)tSDSCItSPICHS tSPICLS\ntSPICLStSPICLK tHDS\ntSPICHS\ntSSPID tHSPIDtDSDHI\nLSB\nVALIDMSB\nMSB\nVALIDtDSOE tDDSPID\nMISO\n(OUTPUT)\nMOSI\n(INPUT)tSSPID\nLSB\nVALID\nLSBtSPITDS\nCPHA = 0CPHA = 1tDDSPID\nADSP-2191M\n–38– REV. AUniversal Asynchronous Rece iver-Transmitter (UART) \nPort—Receive and Transmit Timing\nFigure 23  describes UART port receive and transmit operations. \nThe maximum baud rate is HCLK/16. As shown in Figure 23  \nthere is some latency between the generation internal UART \ninterrupts and the external data operations. These latencies are negligible at the data transmission rates for the UART.\nFigure 23. UART Port—Rec eive and Transmit TimingRXDDATA(5–8)\nINTERNAL\nUART RECEIVE\nINTERRUPTUART RECEIVE BIT SET BY DATA STOP;\nCLEARED BY FIFO READHCLK\n(SAMPLE\nCLOCK)\nTXD DATA(5–8) STOP (1–2)\nINTERNAL\nUART TRANSMIT\nINTERRUPTUART TRANSMIT BIT SET BY PROGRAM;\nCLEARED BY WRITE TO TRANSMITSTARTSTOP\nTRANSMITRECEIVE\nAS DATA\nWRITTEN TO\nBUFFER\n–39– REV. AADSP-2191M\nJTAG T est And Emulation Port Timing\nTable 22  and Figure 24  describe JTAG port operations. \nTable 22. JTAG Port Timing\nParameter Min Max Unit\nSwitching Characteristics\ntDTDO TDO Delay from TCK Low 8 ns\ntDSYS System Outputs Delay After TCK Low102 2 n s\nTiming Requirements\ntTCK TCK Period 20 ns\ntSTAP TDI, TMS Setup Before TCK High 4 ns\ntHTAP TDI, TMS Hold After TCK High 4 ns\ntSSYS System Inputs Setu p Before TCK Low24n s\ntHSYS System Inputs Hold After TCK Low25n s\ntTRSTW TRST  Pulsewidth34tTCK ns\n1System Outputs = DA TA15–0, ADDR21–0, MS3–0 , RD, WR, ACK, CLKOUT, BG, PF7–0, TIMEXP, DT0, DT1, T CLK0, TCLK1, RCLK0, RCLK1, \nTFS0, TFS1, RFS0, RFS1, BMS .\n2System Inputs = DATA15–0, ADDR21–0, RD, WR, ACK, BR, BG, PF7–0, DR0, DR1, TCLK0, TCLK1, RCLK0, RCLK1, TFS0, TFS1, RFS0, RFS1, \nCLKIN, RESET .\n350 MHz max.\nFigure 24. JTAG Port TimingTMS\nTDI\nTDO\nSYSTEM\nINPUTS\nSYSTEM\nOUTPUTSTCKtTCK\ntHTAP tSTAP\ntDTDO\ntSSYS tHSYS\ntDSYS\nADSP-2191M\n–40– REV. AOutput Drive Currents\nFigure 25  shows typical I-V characteri stics for the output drivers \nof the ADSP-2191M. The curves represent the current drive capability of the output drivers as a function of output voltage.\nPower Dissipation\nTotal power dissipation has two co mponents, one due to internal \ncircuitry and one due to the switching of external output drivers. \nInternal power dissipation is dependent on the instruction execution sequence and the data operands involved.The external component of total power dissipation is caused by \nthe switching of output pins. Its magnitude depends on:\n• Number of output pins that switch during each cycle (O)\n•The maximum frequency at wh ich they can switch (f)\n•Their load capacitance (C)\n•Their voltage swing (VDD)\nand is calculated by the formula below.\nThe load capacitance includes the processor’s package capaci-\ntance (CIN). The switching frequency includes driving the load \nhigh and then back low. Address and data pins can drive high and \nlow at a maximum rate of 1/(2tCK). The write strobe can switch \nevery cycle at a frequency of 1/tCK. Select pins switch at 1/(2tCK), \nbut selects can switch on each cycle. For example, estimate PEXT \nwith the following assumptions:\n•A system with one bank of external data memory—asyn-\nchronous RAM (16-bit)\n•One 64K /H1154716 RAM chip is used with a load of 10 pF\n•Maximum peripheral speed CCLK = 80 MHz, HCLK = \n80 MHz\n•External data memory writes occur every other cycle, a \nrate of 1/(4tHCLK), with 50% of the pins switching\n•The bus cycle time is 80 MHz (tHCLK = 12.5 ns)\nThe PEXT equation is calculated for each class of pins that can \ndrive as shown in Table 23 .\nA typical power consumption can now be calculated for these \nconditions by adding a typical in ternal power dissipation with the \nfollowing formula.\nWhere:\n•PEXT is from Table 23\n•PINT is IDDINT  /H11547 2.5 V, using the calculation IDDINT  listed \nin Power Dissipation on Page 19 .Note that the conditions causing a worst-case PEXT are different \nfrom those causing a worst-case PINT. Maximum PINT cannot \noccur while 100% of the output pi ns are switching from all ones \nto all zeros. Note also that it is not common for an application to \nhave 100% or even 50% of the outputs switching simultaneously.\nTest Conditions\nThe DSP is tested for output enable, disable, and hold time.\nOutput Disable Time\nOutput pins are considered to be disabled when they stop driving, \ngo into a high impedance state, and start to decay from their \noutput high or low voltage. The time for the voltage on the bus to decay by –V is dependent on the capacitive load, C\nL and the \nload current, IL. This decay time can be approximated by the \nequation below.Figure 25. Typical Drive CurrentsSOURCE (V DDEXT )V O L T A G E–V03 . 5 0.5 1.0 1.5 2.0 2.5 3.0SOURCE(VDDEXT)CURRENT–mA\n–100–80–60–40–200204060\n4.0VDDEXT =3 . 3 V@ +2 5 ° C\nVDDEXT =3 . 0 V@ +8 5 ° CVOH\nVOLVDDEXT =3 . 0 V@ +8 5 ° C\nVDDEXT =3 . 3 V@ +2 5 ° C\nVDDEXT =3 . 6 5 V@ – 40°C\nINPUT CURRENTOUTPUT CURRENTVDDEXT = 3.65V @ –4 0 ° C\nPEXTOC× VDD2× f× =\nTable 23. PEXT Calculation Example\nPin Type # of Pins % Switching /H11547 C /H11547 f /H11547 VDD2 = PEXT\nAddress 15 50 10 pF /H1154720 MHz /H1154710.9 V = 0.01635 W\nMSx 10 1 0 p F /H1154720 MHz /H1154710.9 V = 0.0 W\nWR 1— 1 0 p F /H1154740 MHz /H1154710.9 V = 0.00436 W\nData 16 50 10 pF /H1154720 MHz /H1154710.9 V = 0.01744 W\nCLKOUT 1 — 10 pF /H1154780 MHz /H1154710.9 V = 0.00872 W\nPEXT=0.04687 W\nPTOTALP=EXTPINT+\n–41– REV. AADSP-2191M\nThe output disable time tDIS is the difference between tMEASURED  \nand tDECAY  as shown in Figure 26 . The time tMEASURED  is the \ninterval from when the reference signal switches to when the output voltage decays –V from the measured output high or \noutput low voltage. The t\nDECAY  is calculated with test loads CL \nand IL, and with –V equal to 0.5 V .\nOutput Enable Time\nOutput pins are considered to be  enabled when they have made \na transition from a high impedance state to when they start driving. The output enable time t\nENA is the interval from when a \nreference signal reaches a high or low voltage level to when the output has reached a specified high or low trip point, as shown \nin the Output Enable/Disable diagram ( Figure 26 ). If multiple \npins (such as the data bus) ar e enabled, the measurement value \nis that of the first pin to start driving.\nExample System Hold Time Calculation\nTo determine the data output hold time in a particular system, first calculate t\nDECAY  using the equation at Output Disable Time \non Page 40 . Choose –V to be the difference between the \nADSP-2191M’s output voltage an d the input threshold for the \ndevice requiring the hold time. A typical –V will be 0.4 V . CL is \nthe total bus capacitance (per data line), and IL is the total leakage \nor three-state current (per data line). The hold time will be tDECAY  \nplus the minimum disable time (i.e., tDATRWH  for the \nwrite cycle).\nCapacitive Loading\nOutput delays and holds are based on standard capacitive loads: 50 pF on all pins (see Figure 30 ). The delay and hold specifica-\ntions given should be derated by a factor of 1.5 ns/50 pF for loads other than the nominal value of 50 pF. Figure 28  and Figure 29  \nshow how output rise time varies with capacitance. These figures \nalso show graphically how output delays and holds vary with load capacitance. (Note that this grap h or derating does not apply to \noutput disable delays; see Outp ut Disa ble Time on P ag e 40 .) The \ngraphs in these figures may no t be linear outside the ranges \nshown.\nEnvironmental Conditions\nThe thermal characteristics in  which the DSP is operating \ninfluence performance.\nThermal Characteristics\nThe ADSP-2191M comes in a 144-lead LQFP or 144-lead Ball Grid Array (mini-BGA) package. The ADSP-2191M is specified for an ambient temperature (T\nAMB) as calculated using the \nformula below.Figure 26. Output Enable/Disable\nFigure 27. Equivalent Device Loading for AC \nMeasurements (Inclu des All Fixtures)\nFigure 28. Voltage Re ference Levels for AC \nMeasurements (Except Ou tput Enable/Disable)tDECAYCLV∆\nIL---------------=\nREFERENCE\nSIGNAL\ntDIS\nOUTPUT STARTS\nDRIVINGVOH (MEASURED) –/H9004V2 . 0 V\nVOL (MEASURED) +/H9004V1 . 0 VtMEASURED\nVOH (MEASURED)\nVOL (MEASURED)\nHIGH IMPEDANCE STATE.\nTEST CONDITIONS CAUSE THIS VOLTAGE\nTO BE APPROXIMATELY 1.5VOUTPUT STOPS\nDRIVINGtDECAYtENA\n1.5V\n50pFTO\nOUTPUT\nPINIOL\nIOH\nINPUT\nOR\nOUTPUT1.5V 1.5VFigure 29. Typical Output  Rise Time (10%-90%, \nVDDEXT  = Minimum at Maximu m Ambient Operating \nTemperature) vs. Load Capacitance40\n030\n20\n10\nLOAD CAPACITANCE – pF02 5 0 50 100 150 200RISEANDFALLTIMES–ns(10%–90%)\nFALL TIMERISE TIME\nADSP-2191M\n–42– REV. ATo ensure that the TAMB data sheet specification is not exceeded, \na heatsink and/or an air flow source may be used. A heatsink should be attached to the ground  plane (as close as possible to \nthe thermal pathways) with a thermal adhesive.Where:\n•TAMB  = Ambient temperature (measured near top surface \nof package)\n•PD = Power dissipation in W (this value depends upon \nthe specific application; a me thod for calculating PD is \nshown under Power Dissipation).\n•θCA = Value from Table 24 .\n•For the LQFP package: θJC = 0.96°C/W\nFor the mini-BGA package: θJC = 8.4°C/W\nFigure 30. Typical Output Delay or Hold vs. Load \nCapacitance (at Maximu m Case Temperature)LOAD CAPACITANCE – pF–10\n02 5 0 50 100 150 20030\n20\n10\n0\nOUTPUTDELAYORHOLD–ns\nTable 24. θCA Values\nAirflow\n(Linear Ft./Min.)0 100 200 400 600\nAirflow\n(Meters/Second)00 . 5 123\nLQFP:\nθCA (°C/W)44.3 41.4 38.5 35.3 32.1\nMini-BGA:\nθCA (°C/W)26 24 22 20.9 19.8TAMBTCASE= PD θCA× –\n–43– REV. AADSP-2191M\n144-Lead LQFP Pinout\nTable 25  lists the LQFP pinout by signal name. Table 26  lists \nthe LQFP pinout by pin.\nTable 25. 144-Lead LQFP Pins (Alphabetically by Signal) \nSignalPin \nNo. SignalPin \nNo. SignalPin \nNo. SignalPin \nNo. SignalPin \nNo.\nA0 84 BYPASS 72 GND 33 HCMS 27 TCLK1 65\nA1 85 CLKIN 132 GND 54 HCIOMS 28 TCLK2 47\nA2 86 CLKOUT 130 GND 55 HRD 31 TDI 75\nA3 87 D0 123 GND 77 HWR 32 TDO 74\nA4 88 D1 124 GND 80 IOMS 114 TFS0 59\nA5 89 D2 125 GND 94 MS0 115 TFS1 66\nA6 91 D3 126 GND 105 MS1 116 TFS2 48\nA7 92 D4 128 GND 129 MS2 117 TMR0 43\nA8 93 D5 135 GND 134 MS3 119 TMR1 44\nA9 95 D6 136 HA16 23 OPMODE 83 TMR2 45A10 96 D7 137 HACK 26 PF0 34 TMS 76A11 97 D8 138 HACK_P 24 PF1 35 TRST\n79\nA12 98 D9 139 HAD0 3 PF2 36 TXD 53\nA13 99 D10 140 HAD1 4 PF3 37 VDDEXT 13\nA14 101 D11 141 HAD2 6 PF4 38 VDDEXT 25\nA15 102 D12 142 HAD3 7 PF5 39 VDDEXT 40\nA16 103 D13 144 HAD4 8 PF6 41 VDDEXT 63\nA17 104 D14 1 HAD5 9 PF7 42 VDDEXT 90\nA18 106 D15 2 HAD6 10 RCLK0 61 VDDEXT 100\nA19 107 DR0 60 HAD7 11 RCLK1 68 VDDEXT 118\nA20 108 DR1 67 HAD8 12 RCLK2 50 VDDEXT 131\nA21 109 DR2 49 HAD9 14 RD 122 VDDEXT 143\nACK 120 DT0 56 HAD10 15 RESET 73 VDDINT 19\nBG 111 DT1 64 HAD11 17 RFS0 62 VDDINT 58\nBGH 110 DT2 46 HAD12 18 RFS1 69 VDDINT 82\nBMODE0 70 EMU 8 1H A D 1 3 2 0R F S 2 5 1VDDINT 127\nBMODE1 71 GND 5 HAD14 21 RXD 52 WR 121\nBMS 113 GND 16 HAD15 22 TCK 78 XTAL 133\nBR 112 GND 29 HALE 30 TCLK0 57\nADSP-2191M\n–44– REV. ATable 26. 144-Lead LQFP Pins (N umerically by Pin Number) \nPin \nNo. SignalPin \nNo. SignalPin \nNo. SignalPin \nNo. SignalPin \nNo. Signal\n1 D14 30 HALE 59 TFS0 88 A4 117 MS2\n2 D15 31 HRD 60 DR0 89 A5 118 VDDEXT\n3H A D 0 3 2 HWR 61 RCLK0 90 VDDEXT 119 MS3\n4 HAD1 33 GND 62 RFS0 91 A6 120 ACK5G N D 3 4 P F 0 6 3 V\nDDEXT 92 A7 121 WR\n6 HAD2 35 PF1 64 DT1 93 A8 122 RD\n7 HAD3 36 PF2 65 TCLK1 94 GND 123 D0\n8 HAD4 37 PF3 66 TFS1 95 A9 124 D1\n9 HAD5 38 PF4 67 DR1 96 A10 125 D210 HAD6 39 PF5 68 RCLK1 97 A11 126 D311 HAD7 40 V\nDDEXT 69 RFS1 98 A12 127 VDDINT\n12 HAD8 41 PF6 70 BMODE0 99 A13 128 D413 V\nDDEXT 42 PF7 71 BMODE1 100 VDDEXT 129 GND\n14 HAD9 43 TMR0 72 BYPASS 101 A14 130 CLKOUT\n15 HAD10 44 TMR1 73 RESET 102 A15 131 VDDEXT\n16 GND 45 TMR2 74 TDO 103 A16 132 CLKIN\n17 HAD11 46 DT2 75 TDI 104 A17 133 XTAL18 HAD12 47 TCLK2 76 TMS 105 GND 134 GND19 V\nDDINT 48 TFS2 77 GND 106 A18 135 D5\n20 HAD13 49 DR2 78 TCK 107 A19 136 D6\n21 HAD14 50 RCLK2 79 TRST 108 A20 137 D7\n22 HAD15 51 RFS2 80 GND 109 A21 138 D823 HA16 52 RXD 81 EMU 110 BGH 139 D9\n24 HACK_P 53 TXD 82 V\nDDINT 111 BG 140 D10\n25 VDDEXT 54 GND 83 OPMODE 112 BR 141 D11\n26 HACK 55 GND 84 A0 113 BMS 142 D12\n27 HCMS 56 DT0 85 A1 114 IOMS 143 VDDEXT\n28 HCIOMS 57 TCLK0 86 A2 115 MS0 144 D13\n29 GND 58 VDDINT 87 A3 116 MS1\n–45– REV. AADSP-2191M\n144-Lead Mini-BGA Pinout\nTable 27  lists the mini-BGA pinout by signal name. Table 28  \nlists the mini-BGA pinout by ball number. \nTable 27. 144-Lead Mini-BGA Pins (Alphabetically by Signal)\nSignalBall \nNo. SignalBall \nNo. SignalBall \nNo. SignalBall \nNo. SignalBall \nNo.\nA0 J11 BYPASS M11 GND F7 HALE J1 TCLK0 J6\nA1 H9 CLKIN A5 GND F8 HCIOMS J3 TCLK1 M9\nA2 H10 CLKOUT C6 GND F9 HCMS H1 TCLK2 K5\nA3 G12 D0 D7 GND G4 HRD J2 TDI K12\nA4 H11 D1 A7 GND G5 HWR K2 TDO L11\nA5 G10 D2 C7 GND G6 IOMS E8 TFS0 M8\nA6 F12 D3 A6 GND H5 MS0 D9 TFS1 J8\nA7 G11 D4 B7 GND L6 MS1 A9 TFS2 M5\nA8 F10 D5 A4 GND M1 MS2 C9 TMR0 K4\nA9 F11 D6 C5 GND M12 MS3 D8 TMR1 L4\nA10 E12 D7 B5 HACK H3 OPMODE H12 TMR2 J4A11 E11 D8 D5 HACK_P G1 PF0 K1 TMS K10\nA12 E10 D9 A3 HAD0 C1 PF1 L1 TRST\nJ12\nA13 E9 D10 C4 HAD1 B3 PF2 M2 TXD M7A14 D11 D11 B4 HAD2 C2 PF3 L2 V\nDDEXT E5\nA15 D10 D12 C3 HAD3 D1 PF4 M3 VDDEXT E6\nA16 D12 D13 A2 HAD4 D4 PF5 L3 VDDEXT F5\nA17 C11 D14 B1 HAD5 D3 PF6 K3 VDDEXT F6\nA18 C12 D15 B2 HAD6 D2 PF7 M4 VDDEXT G7\nA19 B12 DR0 L7 HAD7 E1 RCLK0 K7 VDDEXT G8\nA20 B11 DR1 K9 HAD8 E4 RCLK1 J9 VDDEXT H7\nA21 A11 DR2 L5 HAD9 E2 RCLK2 J5 VDDEXT H8\nACK A8 DT0 H6 HAD10 F1 RD B8 VDDINT D6\nBG C10 DT1 L8 HAD11 E3 RESET L12 VDDINT F4\nBGH B10 DT2 H4 HAD12 F2 RFS0 K8 VDDINT G9\nBMODE0 L10 EMU J10 HAD13 G2 RFS1 M10 VDDINT J7\nBMODE1 L9 GND A1 HAD14 F3 RFS2 M6 WR C8\nBMS A10 GND A12 HAD15 G3 RXD K6 XTAL B6\nBR B9 GND E7 HA16 H2 TCK K11\nADSP-2191M\n–46– REV. ATable 28. 144-Lead Mini-BGA Pins (Numerically by Ball Number)\nBall \nNo. SignalBall \nNo. SignalBall \nNo. SignalBall \nNo. SignalBall \nNo. Signal\nA1 GND C6 CLKOUT E11 A11 H4 DT2 K9 DR1\nA2 D13 C7 D2 E12 A10 H5 GND K10 TMS\nA3 D9 C8 WR F1 HAD10 H6 DT0 K11 TCK\nA4 D5 C9 MS2 F2 HAD12 H7 VDDEXT K12 TDI\nA5 CLKIN C10 BG F3 HAD14 H8 VDDEXT L1 PF1\nA6 D3 C11 A17 F4 VDDINT H9 A1 L2 PF3\nA7 D1 C12 A18 F5 VDDEXT H10 A2 L3 PF5\nA8 ACK D1 HAD3 F6 VDDEXT H11 A4 L4 TMR1\nA9 MS1 D2 HAD6 F7 GND H12 OPMODE L5 DR2\nA10 BMS D3 HAD5 F8 GND J1 HALE L6 GND\nA11 A21 D4 HAD4 F9 GND J2 HRD L7 DR0\nA12 GND D5 D8 F10 A8 J3 HCIOMS L8 DT1\nB1 D14 D6 VDDINT F11 A9 J4 TMR2 L9 BMODE1\nB2 D15 D7 D0 F12 A6 J5 RCLK2 L10 BMODE0\nB3 HAD1 D8 MS3 G1 HACK_P J6 TCLK0 L11 TDO\nB4 D11 D9 MS0 G2 HAD13 J7 VDDINT L12 RESET\nB5 D7 D10 A15 G3 HAD15 J8 TFS1 M1 GNDB6 XTAL D11 A14 G4 GND J9 RCLK1 M2 PF2B7 D4 D12 A16 G5 GND J10 EMU M3 PF4\nB8 RD E1 HAD7 G6 GND J11 A0 M4 PF7\nB9 BR E2 HAD9 G7 V\nDDEXT J12 TRST M5 TFS2\nB10 BGH E3 HAD11 G8 VDDEXT K1 PF0 M6 RFS2\nB11 A20 E4 HAD8 G9 VDDINT K2 HWR M7 TXD\nB12 A19 E5 VDDEXT G10 A5 K3 PF6 M8 TFS0\nC1 HAD0 E6 VDDEXT G11 A7 K4 TMR0 M9 TCLK1\nC2 HAD2 E7 GND G12 A3 K5 TCLK2 M10 RFS1\nC3 D12 E8 IOMS H1 HCMS K6 RXD M11 BYPASS\nC4 D10 E9 A13 H2 HA16 K7 RCLK0 M12 GNDC5 D6 E10 A12 H3 HACK K8 RFS0\n–47– REV. AADSP-2191M\nOUTLINE DIMENSIONS\n144-Lead Metric Thin Plasti c Quad Flatpack [LQFP] \n(ST-144)\n144-Ball Mini-BGA [PBGA] \n(CA-144-2)SEATING\nPLANE\n1.60 MAX0.15\n0.050.08 MAX (LEAD\nCOPLANARITY)\n0.75\n0.600.451.451.40\n1.350.27\n0.22\n0.17TYP0.50\nBSC\nTYP\n(LEAD\nPITCH)1\n36\n3773\n72108144 109\nTOP VIEW (PINS DOWN)22.00 BSC SQ\n20.00 BSC SQ\nDIMENSIONS ARE IN MILLIMETERS AND COMPLY WITH JEDEC STANDARD MS-026-BFB.\nACTUAL POSITION OF EACH LEAD IS WITHIN 0.08 OF ITS\nIDEAL POSITION, WHEN MEASURED IN THE LATERAL DIRECTION.\nCENTER DIMENSIONS ARE NOMINAL.NOTES:\n3.2.1.DETAIL A\nDETAIL APIN 1 INDICATOR\nSEATING\nPLANE0.85\nMIN\n0.25\nMIN\nDIMENSIONS ARE IN MILLIMETERS AND COMPLY\nWITH JEDEC STANDARD MO-205-AC.\nACTUAL POSITION OF THE BALL GRID IS\nWITHIN 0.15 OF ITS IDEAL POSITION, RELATIVE TOTHE PACKAGE EDGES.\nACTUAL POSITION OF EACH BALL IS WITHIN 0.08 OF\nITS IDEAL POSITION, RELATIVE TO THE BALL GRID.\nCENTER DIMENSIONS ARE NOMINAL.NOTES:\n3.\n4.1.\n2.\nDETAIL A0.55\n0.500.45\n(BALL\nDIAMETER)0.10 MAX (BALL\nCOPLANARITY)1.70\nMAXDETAIL A8.80\nBSC\nSQ\n0.80\nBSC\n(BALL\nPITCH)A\nB\nC\nD\nE\nF\nG\nH\nJ\nK\nL\nM1 2 1 1 1 098765432 110.00 BSC SQ\nBOTTOM VIEW TOP VIEWPIN A1 INDICATOR\nADSP-2191M\n–48– REV. A\nPRINTED IN U.S.A. C02936–0–7/02(A)ORDERING GUIDE\nRevision HistoryPart Number1, 2 \n1ST = Plastic Thin Quad Flatpack (LQFP).\n2CA = Mini Ball Grid Array (PBGA)Ambient Temperature RangeInstruction \nRate (MHz)Package \nDescription Operating Voltage\nADSP-2191MKST -160 0ºC to 70ºC 160 144-Lead LQFP 2.5 Int./3.3 Ext. V\nADSP-2191MBST -140 –40ºC to +85ºC 140 144-Lead LQFP 2.5 Int./3.3 Ext. V\nADSP-2191MKCA-160 0ºC to 70ºC 160 144-Ba ll Mini-BGA 2.5 Int./3.3 Ext. V\nADSP-2191MBCA-140 –40ºC to +85ºC 140 144- Ball Mini-BGA 2.5 Int./3.3 Ext. V\nLocation Page\n7/02—Changed from Rev. 0 to Rev. A\nChanges to formatting only . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .Global\n'}]
!==============================================================================!
### Component Summary: ADSP-2191MBSTZ-140

#### Key Specifications:
- **Voltage Ratings**: 
  - Internal (Core) Supply Voltage: 2.37V to 2.63V
  - External (I/O) Supply Voltage: 2.97V to 3.6V
- **Current Ratings**: 
  - Typical Internal Current (IDDINT) at 160 MHz: 184 mA (Core), 210 mA (Peripheral)
  - Power Down Current: 100 µA
- **Power Consumption**: 
  - Maximum power dissipation varies based on operational conditions; typical internal power dissipation is calculated based on the execution sequence.
- **Operating Temperature Range**: 
  - Commercial: 0ºC to 70ºC
  - Industrial: -40ºC to +85ºC
- **Package Type**: 
  - Available in 144-Lead LQFP and 144-Ball Mini-BGA packages.
- **Special Features**: 
  - 6.25 ns instruction cycle time, supporting up to 160 MIPS.
  - Code-compatible with the ADSP-218x family.
  - Integrated DMA controller, multiple serial ports, and programmable timers.
  - Flexible power management with user-selectable power-down modes.
- **Moisture Sensitive Level (MSL)**: 
  - Not specified in the provided data.

#### Description:
The **ADSP-2191M** is a high-performance digital signal processor (DSP) optimized for digital signal processing and high-speed numeric processing applications. It features a pipelined architecture with three computational units (ALU, multiplier/accumulator, and barrel shifter), dual data address generators, and a powerful program sequencer. The device supports a comprehensive instruction set that allows for efficient execution of complex algorithms.

#### Typical Applications:
The ADSP-2191M is commonly used in:
- **Telecommunications**: For processing audio and voice signals, including companding operations.
- **Signal Processing**: In applications requiring real-time processing of signals, such as audio and video processing.
- **Control Systems**: For implementing control algorithms in embedded systems.
- **Data Acquisition**: In systems that require high-speed data processing and analysis.
- **Embedded Systems**: In various consumer electronics and industrial applications where efficient processing is critical.

This DSP is particularly suited for applications that demand high computational performance and flexibility, making it a popular choice in both commercial and industrial environments.