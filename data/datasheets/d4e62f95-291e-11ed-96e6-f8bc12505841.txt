[{'role': 'system', 'content': 'You are a technical specialist with expertise in electronics. Your task is to analyze datasheets for electronic components and provide a concise summary of the product’s key characteristics and specifications. In addition, you need to gather textual information about the component, including its description and typical applications.Instructions:    Identify the correct component in the datasheet using the provided product code.    Summarize key parameters, including:        Voltage ratings        Current ratings        Power consumption        Operating temperature range        Package type        Special features or notes (if applicable)        Moisture Sensetive Level JEDEC J-STD-020E    Provide a short description of the component, including what it is (e.g., transistor, microcontroller, sensor) and its primary function.    Explain typical applications for the component (e.g., power management, signal processing, data storage, etc.).    Be thorough and accurate: Ensure the information corresponds specifically to the product code, as some datasheets cover multiple variants.Your goal is to create a clear and accurate technical summary that includes both key specifications and a description of what the component is used for.'}, {'role': 'user', 'content': "Give me information about the component of EPCS1SI8N production of INTEL from the text:April 2014 Altera CorporationC51014-5.1 Datasheet\n© 2014 Altera Corporation. All rights reserved. ALTERA, ARRIA, CYCLONE, HARDCOPY, MAX, MEGACORE, NIOS, \nQUARTUS and STRATIX words and logos are trademarks of Altera Corporation and registered in the U.S. Patent and Trademark Office and in other countries. All other words and logos identified as trademarks or service marks are the property of their \nrespective holders as described at www.altera.com/common/legal.html . Altera warrants performance of its semiconductor \nproducts to current specifications in accordance with Altera's standard warranty, but reserves the right to make changes to any products and services at any time without notice. Altera assumes no responsibility or liability arising out of the application or use \nof any information, product, or service described herein except as expressly agreed to in writing by Altera. Altera customers a re \nadvised to obtain the latest version of device specifications before relying on any published information and before placing or ders \nfor products or services.101 Innovation Drive \uf020\nSan Jose, CA 95134 \uf020\nwww.altera.com\nFeedback\n Subscribe\nISO \n9001:2008 \nRegisteredSerial Configuration (EPCS) Devices \nDatasheet\nThis datasheet describes serial configuration (EPCS) devices.\nSupported Devices\nTable  1 lists the supported Altera\uf0d2 EPCS devices.\nTable  1. Altera EPCS Devices\nDeviceMemory Size \n(b\nits)On-Chip \nDec\nompression \nSupportISP SupportCascading \nSup\nportReprogrammableRecommended \nOp\nerating \nVoltage (V)\nEPCS1 1,048,576 No Yes No Yes 3.3\nEPCS4 4,194,304 No Yes No Yes 3.3\nEPCS16 16,777,216 No Yes No Yes 3.3\nEPCS64 67,108,864 No Yes No Yes 3.3\nEPCS128 134,217,728 No Yes No Yes 3.3\nf For more information about programming EPCS devices using the Altera \nProgramming Unit (APU) or Master Programming Unit (MPU), refer to the Altera \nProgramming Hardware Datasheet .\nf T he EPCS device can be re-programmed in system with ByteBlaster\uf0d4 II download \nca\nble or an external microprocessor using SRunner. For more information, refer to \nAN418:  SRunner:  An Embedded Solution for Serial Configuration Device Programming .\nFeatures\nEPCS devices offer the following features:\n■Supports active serial (AS) x1 configuration scheme\n■Easy-to-use four-pin interface\n■Low cost, low pin count, and non-volatile memory\n■Low current during configuration and near-zero standby mode current\n■2.7-V to 3.6-V operation\n■EPCS1, EPCS4, and EPCS16 devices available in 8-pin small-outline integrated circuit (SOIC) package\n■EPCS64 and EPCS128 devices available in 16-pin SOIC package\n               \n               \n                              \n               \n               \nPage 2 Functional Description\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation■Enables the Nios\uf0d2 processor to access unused flash memory through AS memory \ninterface\n■Reprogrammable memory with more than 100,000 erase or program cycles\n■Write protection support for memory sectors using status register bits\n■In-system programming (ISP) support with SRunner software driver\n■ISP support with USB-Blaster\uf0d4, EthernetBlaster, or ByteBlaster  II download cables\n■Additional programming support with the APU and programming hardware \nfrom BP Microsystems, System General, and other vendors\n■By default, the memory array is erased and the bits are set to 1 \nFunctional Description\nTo configure a system using an SRAM-based device, each time you power on the device, you must load the configuration data. The EPCS device is a flash memory device that can store configuration data that you use for FPGA configuration purpose after power on. You can use the EPCS device on all FPGA that support AS x1 configuration scheme.\nFor an 8-pin SOIC package, you can migrate vertically from the EPCS1 device to the \nE\nPCS4 or EPCS16 device. For a 16-pin SOIC package, you can migrate vertically from \nthe EPCS64 device to the EPCS128 device.\nWith the new data decompression feature supported, you can determine using which \nEPC\nS device to store the configuration data for configuring your FPGA.\nExample  1 shows how you can calculate the compression ratio to determine which \nEPC\nS device is suitable for the FPGA.\nExample 1. Compression Ratio Calculation\nEP4SGX530 = 189,000,000 bits\nEPCS128 = 134,217,728 bits\nPreliminary data indicates that compression typically reduces the \nc\nonfiguration bitstream size by 35% to 55%. Assume worst case that is 35% \ndecompression.\n189,000,000 bits x 0.65 = 122,850,000 bits\nThe EPCS128 device is suitable.\nf For more information  about the FPGA decompression feature, refer to the \nconfiguration chapter in the appropriate device handbook.\nActive Serial FPGA Configuration Page 3\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  1 shows the EPCS device block diagram.\nFigure 1. EPCS Device Block Diagram\nControl\nLogic\nI/O Shift\nRegister\nMemory\nArrayStatus Register Address Counter\nDecode LogicData BuffernCS\nDCLK\nDATA\nASDIEPCS Device\nAccessing Memory in EPCS Devices\nYou can access the unused memory locations of the EPCS device to store or retrieve \ndata through the Nios processor and SOPC Builder. SOPC Builder is an Altera tool for \ncreating bus-based (especially microprocessor-based) systems in Altera devices. SOPC Builder assembles library components such as processors and memories into custom microprocessor systems.\nSOPC Builder includes the EPCS device controller core, which is an interface core \nde\nsigned specifically to work with the EPCS device. With this core, you can create a \nsystem with a Nios embedded processor that allows software access to any memory location within the EPCS device.\nActive Serial FPGA Configuration\nThe following Altera FPGAs support the AS configuration scheme with EPCS devices:\n■Arria\uf0d2 series\n■Cyclone\uf0d2 series\n■All device families in the Stratix\uf0d2 series except the Stratix device family\nThere are four signals on the EPCS device that interface directly with the FPGA’s c\nontrol signals. The EPCS device signals are DATA , DCLK , ASDI , and nCS interface with \nthe DATA0 , DCLK , ASDO , and nCSO  control signals on the FPGA, respectively.\n1 F or more information about the EPCS device pin description, refer to Table  23 on \npage  36.\nPage 4 Active Serial FPGA Configuration\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  2 shows the configuration of an FPGA device in the AS configuration scheme \nw\nith an EPCS device using a download cable.\nFigure 2. Altera FPGA Configuration in AS Mode Using a Download Cable  (1),  (4)\nDATA\nDCLK\nnCS\nASDIDATA0DCLKnCSOnCEnCONFIGnSTATUS\nMSEL[]nCEOCONF_DONE\nASDOVCC (1) VCC (1) VCC (1)\nVCC (1)10 kΩ 10 kΩ 10 kΩ\n10 kΩ(3)Altera FPGA\nEPCS Device (2) \nPin 1N.C.\nNotes to Figure  2:\n(1) For more information about the VCC value, refer to the configuration chapter in the appropriate device handbook.\n(2) EPCS devices cannot be cascaded.\n(3) Connect the MSEL[]  input pins to select the AS configuration mode. For more information, refer to the configuration chapter in the appropriate \ndevice handbook.\n(4) For more information about configuration pin I/O requirements in an AS configuration scheme for an Altera FPGA, refer to the  c onfiguration \nchapter in the appropriate device handbook.\nActive Serial FPGA Configuration Page 5\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  3 shows the configuration of an FPGA device in the AS configuration scheme \nw\nith an EPCS device using the APU or a third-party programmer.\nFigure 3. Altera FPGA Configuration in AS Mode Using APU or a Third-party Programmer (1),  (4)\nDATA\nDCLK\nnCS\nASDIDATA0DCLKnCSOnCEnCONFIGnSTATUS\nMSEL[]nCEOCONF_DONE\nASDOVCC (1) VCC (1) VCC (1)\n10 kΩ 10 kΩ 10 kΩ\n(3)Altera FPGA\nEPCS Device (2) N.C.\nNotes to Figure  3:\n(1) For more information about the V CC value, refer to the configuration chapter in the appropriate device handbook.\n(2) EPCS devices cannot be cascaded.\n(3) Connect the MSEL[]  input pins to select the AS configuration mode. For more information, refer to the configuration chapter in the appropriate \ndevice handbook.\n(4) For more information about configuration pin I/O requirements in an AS configuration scheme for an Altera FPGA, refer to the  c onfiguration \nchapter in the appropriate device handbook.\nIn an AS configuration, the FPGA acts as the configuration master in the \nconfiguration flow and provides the clock to the EPCS device. The FPGA enables the EPCS device by pulling the \nnCS signal low using the nCSO  signal as shown in Figure  2 \nan\nd Figure  3. Then, the FPGA sends the instructions and addresses to the EPCS device \nus\ning the ASDO  signal. The EPCS device responds to the instructions by sending the \nconfiguration data to the FPGA’s DATA0  pin on the falling edge of DCLK . The data is \nlatched into the FPGA on the next DCLK  signal’s falling edge.\n1 B efore the FPGA enters configuration mode, ensure that V CC of the EPCS device is \nready. If V CC is not ready, you must hold nCONFIG  low until all power rails of EPCS \ndevice are ready.\nThe FPGA controls the nSTATUS  and CONF_DONE  pins during configuration in the AS \nmode. If the CONF_DONE  signal does not go high at the end of configuration, or if the \nsignal goes high too early, the FPGA pulses its nSTATUS  pin low to start a \nreconfiguration. If the configuration is successful, the FPGA releases the CONF_DONE  \npin, allowing the external 10-k \uf057 resistor to pull the CONF_DONE  signal high. The FPGA \ninitialization begins after the CONF_DONE  pin goes high. After the initialization, the \nFPGA enters user mode.\nf F or more information  about configuring the FPGAs in AS configuration mode or \nother configuration modes, refer to the configuration chapter in the appropriate \ndevice handbook.\nPage 6 Active Serial FPGA Configuration\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationYou can configure multiple devices with a single EPCS device. However, you cannot \ncascade EPCS devices. To ensure that the programming file size of the cascaded FPGAs does not exceed the capacity of an EPCS device, refer to Table  1 on page  1.\nFigure  4 shows the AS configuration scheme with multiple FPGAs in the chain. The \nf \nirst FPGA is the configuration master and its MSEL[]  pins are set to AS mode. The \nfollowing FPGAs are configuration slave devices and their MSEL[]  pins are set to PS \nmode.\nFigure 4. Multiple Devices in AS Mode (1),  (5)\nDATA\nDCLK\nnCS\nASDIDATA0DCLK\nnCSOnCEnCONFIGnSTATUS\nMSEL[ ]nCEOCONF_DONE\nASDOVCC (1)\n10 kΩVCC (1)\n10 kΩVCC (1)\n10 kΩ\n(3)Altera FPGA (Master)\nDATA0\nDCLKnCEnCONFIGnSTATUS\nMSEL[ ]nCEOCONF_DONE\n(4)Altera FPGA (Slave)\nEPCS Device (2) \nN.C.\nNotes to Figure  4:\n(1) For more information about the VCC value, refer to the configuration chapter in the appropriate device handbook.\n(2) EPCS devices cannot be cascaded.\n(3) Connect the MSEL[]  input pins to select the AS configuration mode. For more information, refer to the configuration chapter in the appropriate \ndevice handbook.\n(4) Connect the MSEL[]  input pins to select the PS configuration mode. For more information, refer to the configuration chapter in the appropriate \ndevice handbook.\n(5) For more information about configuration pin I/O requirements in an AS configuration scheme for an Altera FPGA, refer to the  c onfiguration \nchapter in the appropriate device handbook.\nEPCS Device Memory Access Page 7\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationEPCS Device Memory Access\nThis section describes the memory array organization and operation codes of the \nEPCS device. For the timing specifications, refer to “Timing Information” on page  29.\nMemory Array Organization\nTable  2 lists the memory array organization details in EPCS128, EPCS64, EPCS16, \nE\nPCS4, and EPCS1 devices.\nTable  2. Memory Array Organization in EPCS Devices  \nDetails EPCS128 EPCS64 EPCS16 EPCS4 EPCS1\nBytes16,777,216 bytes \n(1\n28 Mb)8,388,608 bytes \n(6\n4 Mb)2,097,152 bytes \n(1\n6 Mb)524,288 bytes \n(4 Mb)131,072 bytes \n(1 Mb)\nNumber of sectors 64 128 32 8 4\nBytes per  sector262,144 bytes \n(2 Mb)65,536 bytes \n(5\n12 Kb)65,536 bytes \n(5\n12 Kb)65,536 bytes \n(\n512 Kb)32,768 bytes \n(\n256 Kb)\nPages per  sector 1,024 256 256 256 128\nTotal number of \npage\ns65,536 32,768 8,192 2,048 512\nBytes per  page 256 bytes 256 bytes 256 bytes 256 bytes 256 bytes\nTable  3 through Table  7 on page  12 list the address range for each sector in EPCS1, \nE\nPCS4, EPCS16, EPCS64, and EPCS128 devices.\nTable  3. Address Range for Sectors in EPCS1 Devices\nSectorAddress Range (byte Addresses in HEX)\nStart End\n3 H’18000 H’1FFFF\n2 H’10000 H’17FFF\n1 H’08000 H’0FFFF\n0 H’00000 H’07FFF\nTable  4. Address Range for Sectors in EPCS4 Devices\nSectorAddress Range (Byte Addresses in HEX)\nStart End\n7 H'70000 H'7FFFF\n6 H'60000 H'6FFFF\n5 H'50000 H'5FFFF\n4 H'40000 H'4FFFF\n3 H'30000 H'3FFFF\n2 H'20000 H'2FFFF\n1 H'10000 H'1FFFF\n0 H'00000 H'0FFFF\nTable  5. Address Range for Sectors in EPCS16 Devices\nSectorAddress Range (Byte Addresses in HEX)\nStart End\n31 H'1F0000 H'1FFFFF\n30 H'1E0000 H'1EFFFF\n29 H'1D0000 H'1DFFFF\n28 H'1C0000 H'1CFFFF\n27 H'1B0000 H'1BFFFF\n26 H'1A0000 H'1AFFFF\n25 H'190000 H'19FFFF\n24 H'180000 H'18FFFF\n23 H'170000 H'17FFFF\n22 H'160000 H'16FFFF\n21 H'150000 H'15FFFF\n20 H'140000 H'14FFFF\n19 H'130000 H'13FFFF\n18 H'120000 H'12FFFF\n17 H'110000 H'11FFFF\n16 H'100000 H'10FFFF\n15 H'0F0000 H'0FFFFF\n14 H'0E0000 H'0EFFFF\n13 H'0D0000 H'0DFFFF\n12 H'0C0000 H'0CFFFF\n11 H'0B0000 H'0BFFFF\n10 H'0A0000 H'0AFFFF\n9 H'090000 H'09FFFF\n8 H'080000 H'08FFFF\n7 H'070000 H'07FFFF\n6 H'060000 H'06FFFF\n5 H'050000 H'05FFFF\n4 H'040000 H'04FFFF\n3 H'030000 H'03FFFF\n2 H'020000 H'02FFFF\n1 H'010000 H'01FFFF\n0 H'000000 H'00FFFFPage 8 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation\nEPCS Device Memory Access Page 9\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationTable  6. Address Range for Sectors in EPCS64 Devices   (Part 1 of 4)\nSectorAddress Range (Byte Addresses in HEX)\nStart End\n127 H'7F0000 H'7FFFFF\n126 H'7E0000 H'7EFFFF\n125 H'7D0000 H'7DFFFF\n124 H'7C0000 H'7CFFFF\n123 H'7B0000 H'7BFFFF\n122 H'7A0000 H'7AFFFF\n121 H'790000 H'79FFFF\n120 H'780000 H'78FFFF\n119 H'770000 H'77FFFF\n118 H'760000 H'76FFFF\n117 H'750000 H'75FFFF\n116 H'740000 H'74FFFF\n115 H'730000 H'73FFFF\n114 H'720000 H'72FFFF\n113 H'710000 H'71FFFF\n112 H'700000 H'70FFFF\n111 H'6F0000 H'6FFFFF\n110 H'6E0000 H'6EFFFF\n109 H'6D0000 H'6DFFFF\n108 H'6C0000 H'6CFFFF\n107 H'6B0000 H'6BFFFF\n106 H'6A0000 H'6AFFFF\n105 H'690000 H'69FFFF\n104 H'680000 H'68FFFF\n103 H'670000 H'67FFFF\n102 H'660000 H'66FFFF\n101 H'650000 H'65FFFF\n100 H'640000 H'64FFFF\n99 H'630000 H'63FFFF\n98 H'620000 H'62FFFF\n97 H'610000 H'61FFFF\n96 H'600000 H'60FFFF\n95 H'5F0000 H'5FFFFF\n94 H'5E0000 H'5EFFFF\n93 H'5D0000 H'5DFFFF\n92 H'5C0000 H'5CFFFF\n91 H'5B0000 H'5BFFFF\n90 H'5A0000 H'5AFFFF\nPage 10 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation89 H'590000 H'59FFFF\n88 H'580000 H'58FFFF\n87 H'570000 H'57FFFF\n86 H'560000 H'56FFFF\n85 H'550000 H'55FFFF\n84 H'540000 H'54FFFF\n83 H'530000 H'53FFFF\n82 H'520000 H'52FFFF\n81 H'510000 H'51FFFF\n80 H'500000 H'50FFFF\n79 H'4F0000 H'4FFFFF\n78 H'4E0000 H'4EFFFF\n77 H'4D0000 H'4DFFFF\n76 H'4C0000 H'4CFFFF\n75 H'4B0000 H'4BFFFF\n74 H'4A0000 H'4AFFFF\n73 H'490000 H'49FFFF\n72 H'480000 H'48FFFF\n71 H'470000 H'47FFFF\n70 H'460000 H'46FFFF\n69 H'450000 H'45FFFF\n68 H'440000 H'44FFFF\n67 H'430000 H'43FFFF\n66 H'420000 H'42FFFF\n65 H'410000 H'41FFFF\n64 H'400000 H'40FFFF\n63 H'3F0000 H'3FFFFF\n62 H'3E0000 H'3EFFFF\n61 H'3D0000 H'3DFFFF\n60 H'3C0000 H'3CFFFF\n59 H'3B0000 H'3BFFFF\n58 H'3A0000 H'3AFFFF\n57 H'390000 H'39FFFF\n56 H'380000 H'38FFFF\n55 H'370000 H'37FFFF\n54 H'360000 H'36FFFF\n53 H'350000 H'35FFFF\n52 H'340000 H'34FFFFTable 6. Address Range for Sectors in EPCS64 Devices  (Part 2 of 4)\nSectorAddress Range (Byte Addresses in HEX)\nStart End\nEPCS Device Memory Access Page 11\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation51 H'330000 H'33FFFF\n50 H'320000 H'32FFFF\n49 H'310000 H'31FFFF\n48 H'300000 H'30FFFF\n47 H'2F0000 H'2FFFFF\n46 H'2E0000 H'2EFFFF\n45 H'2D0000 H'2DFFFF\n44 H'2C0000 H'2CFFFF\n43 H'2B0000 H'2BFFFF\n42 H'2A0000 H'2AFFFF\n41 H'290000 H'29FFFF\n40 H'280000 H'28FFFF\n39 H'270000 H'27FFFF\n38 H'260000 H'26FFFF\n37 H'250000 H'25FFFF\n36 H'240000 H'24FFFF\n35 H'230000 H'23FFFF\n34 H'220000 H'22FFFF\n33 H'210000 H'21FFFF\n32 H'200000 H'20FFFF\n31 H'1F0000 H'1FFFFF\n30 H'1E0000 H'1EFFFF\n29 H'1D0000 H'1DFFFF\n28 H'1C0000 H'1CFFFF\n27 H'1B0000 H'1BFFFF\n26 H'1A0000 H'1AFFFF\n25 H'190000 H'19FFFF\n24 H'180000 H'18FFFF\n23 H'170000 H'17FFFF\n22 H'160000 H'16FFFF\n21 H'150000 H'15FFFF\n20 H'140000 H'14FFFF\n19 H'130000 H'13FFFF\n18 H'120000 H'12FFFF\n17 H'110000 H'11FFFF\n16 H'100000 H'10FFFF\n15 H'0F0000 H'0FFFFF\n14 H'0E0000 H'0EFFFFTable 6. Address Range for Sectors in EPCS64 Devices  (Part 3 of 4)\nSectorAddress Range (Byte Addresses in HEX)\nStart End\nPage 12 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation13 H'0D0000 H'0DFFFF\n12 H'0C0000 H'0CFFFF\n11 H'0B0000 H'0BFFFF\n10 H'0A0000 H'0AFFFF\n9 H'090000 H'09FFFF\n8 H'080000 H'08FFFF\n7 H'070000 H'07FFFF\n6 H'060000 H'06FFFF\n5 H'050000 H'05FFFF\n4 H'040000 H'04FFFF\n3 H'030000 H'03FFFF\n2 H'020000 H'02FFFF\n1 H'010000 H'01FFFF\n0 H'000000 H'00FFFF\nTable  7. Address Range for Sectors in EPCS128 Devices   (Part 1 of 3)\nSectorAddress Range (Byte Addresses in HEX)\nStart End\n63 H'FC0000 H'FFFFFF\n62 H'F80000 H'FBFFFF\n61 H'F40000 H'F7FFFF\n60 H'F00000 H'F3FFFF\n59 H'EC0000 H'EFFFFF\n58 H'E80000 H'EBFFFF\n57 H'E40000 H'E7FFFF\n56 H'E00000 H'E3FFFF\n55 H'DC0000 H'DFFFFF\n54 H'D80000 H'DBFFFF\n53 H'D40000 H'D7FFFF\n52 H'D00000 H'D3FFFF\n51 H'CC0000 H'CFFFFF\n50 H'C80000 H'CBFFFF\n49 H'C40000 H'C7FFFF\n48 H'C00000 H'C3FFFF\n47 H'BC0000 H'BFFFFF\n46 H'B80000 H'BBFFFF\n45 H'B40000 H'B7FFFF\n44 H'B00000 H'B3FFFFTable 6. Address Range for Sectors in EPCS64 Devices  (Part 4 of 4)\nSectorAddress Range (Byte Addresses in HEX)\nStart End\nEPCS Device Memory Access Page 13\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation43 H'AC0000 H'AFFFFF\n42 H'A80000 H'ABFFFF\n41 H'A40000 H'A7FFFF\n40 H'A00000 H'A3FFFF\n39 H'9C0000 H'9FFFFF\n38 H'980000 H'9BFFFF\n37 H'940000 H'97FFFF\n36 H'900000 H'93FFFF\n35 H'8C0000 H'8FFFFF\n34 H'880000 H'8BFFFF\n33 H'840000 H'87FFFF\n32 H'800000 H'83FFFF\n31 H'7C0000 H'7FFFFF\n30 H'780000 H'7BFFFF\n29 H'740000 H'77FFFF\n28 H'700000 H'73FFFF\n27 H'6C0000 H'6FFFFF\n26 H'680000 H'6BFFFF\n25 H'640000 H'67FFFF\n24 H'600000 H'63FFFF\n23 H'5C0000 H'5FFFFF\n22 H'580000 H'5BFFFF\n21 H'540000 H'57FFFF\n20 H'500000 H'53FFFF\n19 H'4C0000 H'4FFFFF\n18 H'480000 H'4BFFFF\n17 H'440000 H'47FFFF\n16 H'400000 H'43FFFF\n15 H'3C0000 H'3FFFFF\n14 H'380000 H'3BFFFF\n13 H'340000 H'37FFFF\n12 H'300000 H'33FFFF\n11 H'2C0000 H'2FFFFF\n10 H'280000 H'2BFFFF\n9 H'240000 H'27FFFF\n8 H'200000 H'23FFFF\n7 H'1C0000 H'1FFFFF\n6 H'180000 H'1BFFFFTable 7. Address Range for Sectors in EPCS128 Devices  (Part 2 of 3)\nSectorAddress Range (Byte Addresses in HEX)\nStart End\nPage 14 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationOperation Codes\nThis section describes the operations that you can use to access the memory in EPCS \ndevices. Use the DATA , DCLK , ASDI , and nCS signals to access the memory in EPCS \ndevices. When performing the operation, addresses and data are shifted in and out of the device serially, with MSB first.\nThe device samples the AS data input on the first rising edge of the DCLK  after the \nactive low chip select ( nCS) input signal is driven low. Shift the operation code, with \nMSB first, into the EPCS device serially through the AS data input ( ASDI ) pin. Each \noperation code bit is latched into the EPCS device on the rising edge of the DCLK . \nDifferent operations require a different sequence of inputs. While executing an operation, you must shift in the desired operation code, followed by the address bytes or data bytes, both address and data bytes, or none of them. The device must drive \nnCS pin high after the last bit of the operation sequence is shifted in. Table  8 lists the \noperation sequence for every operation supported by the EPCS devices.\nFor read operations, the data read is shifted out on the DATA  pin. You can drive the nCS \npin high after any bit of the data-out sequence is shifted out.\nFor write and erase operations, drive the nCS pin high at a byte boundary that is in a \nmultiple of eight clock pulses. Otherwise, the operation is rejected and not executed.\nAll attempts to access the memory contents while a write or erase cycle is in progress \nare rejected, and the write or erase cycle will continue unaffected.5 H'140000 H'17FFFF\n4 H'100000 H'13FFFF\n3 H'0C0000 H'0FFFFF\n2 H'080000 H'0BFFFF\n1 H'040000 H'07FFFF\n0 H'000000 H'03FFFFTable 7. Address Range for Sectors in EPCS128 Devices  (Part 3 of 3)\nSectorAddress Range (Byte Addresses in HEX)\nStart End\nTable  8. EPCS Devices Operation Codes\nOperation Operation Code  (1)Address Bytes Dummy Bytes Data BytesDCLK f MAX \n(MHz)\nWrite enable 0000 0110 0 0 0 25\nWrite disable 0000 0100 0 0 0 25\nRead status 0000 0101 0 0 1 to infinite  (2)32\nRead bytes 0000 0011 3 0 1 to infinite  (2)20\nRead silicon ID  (4)1010 1011 0 3 1 to infinite  (2)32\nFast read 0000 1011 3 1 1 to infinite  (2)40\nWrite status 0000 0001 0 0 1 25\nWrite bytes 0000 0010 3 0 1 to 256  (3)25\nErase bulk 1100 0111 0 0 0 25\nEPCS Device Memory Access Page 15\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationWrite Enable Operation\nThe write enable operation code is b'0000 0110 , and it lists the MSB first. The write \nenable operation sets the write enable latch bit, which is bit 1 in the status register. \nAlways set the write enable latch bit before write bytes, write status, erase bulk, and \nerase sector operations. Figure  5 shows the instruction sequence of the write enable \nop\neration.\nFigure 5. Write Enable Operation Timing Diagram\nnCS\nDCLK\nASDI\nDATA01234567\nOperation Code\nHigh Impedance\nWrite Disable Operation\nThe write disable operation code is b'0000 0100  and it lists the MSB first. The write \ndisable operation resets the write enable latch bit, which is bit  1 in the status register. \nTo prevent the memory from being written unintentionally, the write enable latch bit is automatically reset when implementing the write disable operation, and under the following conditions:\n■Power up\n■Write bytes operation completion\n■Write status operation completion\n■Erase bulk operation completion\n■Erase sector operation completionErase sector 1101 1000 3 0 0 25\nRead device \nid\nentification  (5)1001 1111 0 2 1 to infinite  (2) 25\nNotes to Table  8:\n(1) List MSB first and LSB last.\n(2) The status register, data, or silicon ID is read out at least once on the DATA  pin and is continuously read out until the nCS pin is driven high.\n(3) A write bytes operation requires at least one data byte on the DATA  pin. If more than 256 bytes are sent to the device, only the last 256 bytes \nare written to the memory.\n(4) The read silicon ID operation is available only for EPCS1, EPCS4, EPCS16, and EPCS64 devices.(5) The read device identification operation is available only for EPCS128 devices.Table 8. EPCS Devices Operation Codes\nOperation Operation Code  (1)Address Bytes Dummy Bytes Data BytesDCLK f MAX \n(MHz)\nPage 16 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  6 shows the instruction sequence of the write disable operation.\nFigure 6. Write Disable Operation Timing Diagram\nnCS\nDCLK\nASDI\nDATA01234567\nOperation Code\nHigh Impedance\nRead Status Operation\nThe read status operation code is b'0000 0101  and it lists the MSB first. You can use \nthe read status operation to read the status register. Figure  7 and Figure  8 show the \ns\ntatus bits in the status register of the EPCS devices.\nFigure 7. EPCS128, EPCS64, EPCS16, and EPCS4 Status Register Status Bits\nBit 7 Bit 0\nBlock Protect Bits [2..0] Write In\nProgress Bit\nWrite Enable\nLatch BitBP2 BP1 BP0 WEL WIP\nFigure 8. EPCS1 Status Register Status Bits\nBit 7 Bit 0\nBlock Protect\nBits [1..0]Write In\nProgress Bit\nWrite Enable\nLatch BitBP1 BP0 WEL WIP\nSetting the write in progress bit to 1 indicates that the EPCS device is busy with a \nwrite or erase cycle. Resetting the write in progress bit to 0 indicates no write or erase \ncycle is in progress.\nEPCS Device Memory Access Page 17\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationResetting the write enable latch bit to 0 indicates that no write or erase cycle is \naccepted. Set the write enable latch bit to 1 before every write bytes, write status, erase \nbulk, and erase sector operations.\nThe non-volatile block protect bits determine the area of the memory protected from being written or erased unintentionally. \nTable  9 through Table  13 on page  19 list the \nprotected area in the EPCS devices with reference to the block protect bits. The erase bulk operation is only available when all the block protect bits are set to \n0. When any \nof the block protect bits are set to 1, the relevant area is protected from being written \nby a write bytes operation or erased by an erase sector operation.\nTable  9. Block Protection Bits in the EPCS1 Device\nStatus Register Content Memory Content\nBP1 Bit BP0 Bit Protected Area Unprotected Area\n0 0 None All four sectors—0 to 3\n0 1 Sector 3 Three sectors—0 to 2\n1 0 Two sectors—2 and 3 Two sectors—0 and 1\n1 1 All sectors None\nTable  10. Block Protection Bits in the EPCS4 Device\nStatus Register Content Memory Content\nBP2 Bit BP1 Bit BP0 Bit Protected Area Unprotected Area\n0 0 0 None All eight sectors—0 to 7\n0 0 1 Sector 7 Seven sectors—0 to 6\n0 1 0 Sectors 6 and 7 Six sectors—0 to 5\n0 1 1 Four sectors—4 to 7 Four sectors—0 to 3\n1 0 0 All sectors None\n1 0 1 All sectors None\n1 1 0 All sectors None\n1 1 1 All sectors NonePage 18 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation \nTable  11. Block Protection Bits in the EPCS16 Device\nStatus Register \nCont\nentMemory Content\nBP2 \nBitBP1 \nBitBP0 \nBitProtected Area Unprotected Area\n000 None All sectors (32 sectors 0 to 31)\n001 Upper 32nd (Sector 31) Lower 31/32nds (31 sectors—0 to 30)\n010 Upper sixteenth (two sectors—30 and 31) Lower 15/16ths (30 sectors—0 to 29)\n011 Upper eighth (four sectors—28 to 31) Lower seven-eighths (28 sectors—0 to 27)\n100 Upper quarter (eight sectors—24 to 31) Lower three-quarters (24 sectors—0 to 23)\n101 Upper half (sixteen sectors—16 to 31) Lower half (16 sectors—0 to 15)\n110 All sectors (32 sectors—0 to 31) None\n111 All sectors (32 sectors—0 to 31) None\nTable  12. Block Protection Bits in the EPCS64 Devices\nStatus Register \nCont\nentMemory Content\nBP2 \nBitBP1 \nBitBP0 \nBitProtected Area Unprotected Area\n0 0 0 None All sectors (128 sectors: 0 to 127)\n0 0 1 Upper 64th (2 sectors: 126 and 127) Lower 63/64ths (126 sectors: 0 to 125)\n0 1 0 Upper 32nd (4 sectors: 124 to 127) Lower 31/32nds (124 sectors: 0 to 123)\n0 1 1 Upper sixteenth (8 sectors: 120 to 127) Lower 15/16ths (120 sectors: 0 to 119)\n1 0 0 Upper eighth (16 sectors: 112 to 127) Lower seven-eights (112 sectors: 0 to 111)\n1 0 1 Upper quarter (32 sectors: 96 to 127) Lower three-quarters (96 sectors: 0 to 95)\n1 1 0 Upper half (64 sectors: 64 to 127) Lower half (64 sectors: 0 to 63)\n1 1 1 All sectors (128 sectors: 0 to 127) None\nTable  13. Block Protection Bits in the EPCS128 Device\nStatus Register \nCont\nentMemory Content\nBP2 \nBitBP1 \nBitBP0 \nBitProtected Area Unprotected Area\n000 None All sectors (64 sectors—0 to 63)\n001 Upper 64th (1 sector—63) Lower 63/64ths (63 sectors—0 to 62)\n010 Upper 32nd (2 sectors—62 to 63) Lower 31/32nds (62 sectors—0 to 61)\n011 Upper 16th (4 sectors—60 to 63) Lower 15/16ths (60 sectors—0 to 59)\n100 Upper 8th (8 sectors—56 to 63) Lower seven-eighths (56 sectors—0 to 55)\n101 Upper quarter (16 sectors—48 to 63) Lower three-quarters (48 sectors—0 to 47)\n110 Upper half (32 sectors—32 to 63) Lower half (32 sectors—0 to 31)\n111 All sectors (64 sectors—0 to 63) NoneEPCS Device Memory Access Page 19\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationYou can read the status register at any time, even during a write or erase cycle is in \nprogress. When one of these cycles is in progress, you can check the write in progress bit (bit \n0 of the status register) before sending a new operation to the device. The \ndevice can also read the status register continuously, as shown in Figure  9.\nFigure 9. Read Status Operation Timing Diagram\nnCS\nDCLK\nASDI\nDATA0 1 2 3 4 5 6 7 8 9 1 01 11 21 31 41 5\n765432107 2107 6543Operation Code\nMSB MSBStatus Register Out Status Register Out\nHigh Impedance\nPage 20 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationWrite Status Operation\nThe write status operation code is b'0000 0001  and it lists the MSB first. Use the write \nstatus operation to set the status register block protection bits. The write status \noperation does not affect the other bits. Therefore, you can implement this operation to protect certain memory sectors, as listed in Table  9 through Table  13. After setting \nt \nhe block protect bits, the protected memory sectors are treated as read-only memory . \nYou must execute the write enable operation before the write status operation so the device sets the status register’s write enable latch bit to \n1.\nThe write status operation is implemented by driving the nCS signal low, followed by \nshifting in the write status operation code and one data byte for the status register on the \nASDI  pin. Figure  10 shows the instruction sequence of the write status operation. \nTh\ne nCS must be driven high after the eighth bit of the data byte has been latched in, \notherwise the write status operation is not executed.\nImmediately after the nCS signal drives high, the device initiates the self-timed write \nstatus cycle. The self-timed write status cycle usually takes 5  ms for all EPCS devices \nan\nd is guaranteed to be less than 15  ms. For more information, refer to the t WS value in \nTable  16 on page  29. You must account for this delay to ensure that the status register \ni\ns written with desired block protect bits. Alternatively, you can check the write in \nprogress bit in the status register by executing the read status operation while the \nself-timed write status cycle is in progress. The write in progress bit is 1 during the \nself-timed write status cycle and 0 when it is complete.\nFigure 10. Write Status Operation Timing Diagram\nnCS\nDCLK\nASDI\nDATA0 1 2 3 4 5 6 7 8 9 1 01 11 21 31 41 5\nOperation Code Status Register\n76543210\nMSB\nHigh Impedance\nRead Bytes Operation\nThe read bytes operation code is b'0000 0011  and it lists the MSB first. To read the \nmemory contents of the EPCS device, the device is first selected by driving the nCS \nsignal low. Then, the read bytes operation code is shifted in followed by a 3-byte address (\nA[23..0] ). Each address bit must be latched in on the rising edge of the DCLK  \nsignal. After the address is latched in, the memory contents of the specified address are shifted out serially on the \nDATA  pin, beginning with the MSB. For reading Raw \nProgramming Data files ( .rpd ), the content is shifted out serially beginning with the \nLSB. Each data bit is shifted out on the falling edge of the DCLK  signal. The maximum \nDCLK  frequency during the read bytes operation is 20 MHz.\nEPCS Device Memory Access Page 21\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationThe first byte address can be at any location. The device automatically increases the \naddress to the next higher address after shifting out each byte of data. Therefore, the device can read the whole memory with a single read bytes operation. When the device reaches the highest address, the address counter restarts at \n0x000000 , allowing \nthe memory contents to be read out indefinitely until the read bytes operation is terminated by driving the \nnCS signal high. The device can drive the nCS signal high at \nany time after data is shifted out. If the read bytes operation is shifted in while a write or erase cycle is in progress, the operation is not executed and does not affect the write or erase cycle in progress.\nPage 22 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  11 shows the instruction sequence of the read bytes operation.\nFigure 11. Read Bytes Operation Timing Diagram\nnCS\nDCLK\nASDI\nDATA0 1 2 3 4 5 6 7 8 9 10 28 29 30 31 32 33 34 35 36 37 38 39\nOperation Code 24-Bit Address (1)\n23 22 21 3 2 1 0\n77 6543210MSB\nMSB (2)High ImpedanceDATA Out 1 DATA Out 2\nNotes to Figure  11: \n(1) Address bit A[23]  is a don't-care bit in the EPCS64 device. Address bits A[23..21]  are don't-care bits in the EPCS16 device. Address bits \nA[23..19]  are don't-care bits in the EPCS4 device. Address bits A[23..17]  are don't-care bits in the EPCS1 device.\n(2) For .rp d  files, the read sequence shifts out the LSB of the data byte first.\nFast Read Operation\nThe fast read operation code is b’0000 1011  and it lists the MSB first. You can select \nthe device by driving the nCS signal low. The fast read instruction code is followed by \na 3-byte address ( A23-A0 ) and a dummy byte with each bit being latched-in during the \nrising edge of the DCLK  signal. Then, the memory contents at that address is shifted out \non DATA  with each bit being shifted out at a maximum frequency of 40  MHz during \nt\nhe falling edge of the DCLK  signal.\nThe first addressed byte can be at any location. The address is automatically increased \nt\no the next higher address after each byte of data is shifted out. Therefore, the whole \nmemory can be read with a single fast read instruction. When the highest address is reached, the address counter rolls over to \n000000h , allowing the read sequence to \ncontinue indefinitely.\nThe fast read instruction is terminated by driving the nCS signal high at any time \nduring data output. Any fast read instruction is rejected during the erase, program, or write operations without affecting the operation that is in progress.\nEPCS Device Memory Access Page 23\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  12 shows the instruction sequence of the fast read operation.\nFigure 12. Fast Read Operation Timing Diagram\nnCS\nDCLK\nASDI\nDATA\nnCS\nDCLK\nASDI\nDATA0 1 2 3 4 5 6 7 8 9 10 28 29 30 31\nOperation Code\nDummy Byte24-Bit Address (1)\nMSB\nMSB MSB MSBHigh Impedance23 22 21 3 2 1 0\nDATA Out 1 DATA Out 2\n765432 0 1 76543210 7765432 0 132 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\nNote to Figure 12:\n(1) Address bit A[23]  is a don't-care bit in the EPCS64 device. Address bits A[23..21]  are don't-care bits in the \nEPCS16 device. Address bits A[23..19]  are don't-care bits in the EPCS4 device. Address bits A[23..17]  are \ndon't-care bits in the EPCS1 device.\nRead Silicon ID Operation\nThe read silicon ID operation code is b'1010 1011  and it lists the MSB first. Only \nEPCS1, EPCS4, EPCS16, and EPCS64 devices support this operation. This operation \nreads the 8-bit silicon ID of the EPCS device from the DATA  output pin. If this operation \nis shifted in during an erase or write cycle, it is ignored and does not affect the cycle that is in progress.\nTable  14 lists the EPCS device silicon IDs.\nTable  14. EPCS Device Silicon ID\nEPCS Device Silicon ID (Binary Value)\nEPCS1 b'0001 0000\nEPCS4 b'0001 0010\nEPCS16 b'0001 0100\nEPCS64 b'0001 0110\nThe device implements the read silicon ID operation by driving the nCS signal low \nand then shifting in the read silicon ID operation code, followed by three dummy bytes on the \nASDI  pin. The 8-bit silicon ID of the EPCS device is then shifted out on the \nDATA  pin on the falling edge of the DCLK  signal. The device can terminate the read \nsilicon ID operation by driving the nCS signal high after reading the silicon ID at least \none time. Sending additional clock cycles on DCLK  while nCS is driven low can cause \nthe silicon ID to be shifted out repeatedly.\nPage 24 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  13 shows the instruction sequence of the read silicon ID operation.\nFigure 13. Read Silicon ID Operat ion T iming Diagram (1)\nnCS\nDCLK\nASDI\nDATA0 1 2 3 4 5 6 7 8 9 10 28 29 30 31 32 33 34 35 36 37 38 39\nOperation Code Three Dummy Bytes\n23 22 21 3 2 1 0\n76543210MSB\nMSBHigh ImpedanceSilicon ID\nNote to Figure 13: \n(1) Only EPCS1, EPCS4, EPCS16, and EPCS64 devices support the read silicon ID operation.\nRead Device Identification Operation\nThe read device identification operation code is b’1001 1111  and it lists the MSB first. \nOnly EPCS128 device supports this operation. This operation reads the 8-bit device \nidentification of the EPCS device from the DATA  output pin. If this operation is shifted \nin during an erase or write cycle, it is ignored and does not affect the cycle that is in progress. Table  15 lists the EPCS device identification.\nTable  15. EPCS Device Identification\nEPCS Device Silicon ID (Binary Value)\nEPCS128 b'0001 1000\nThe device implements the read device identification operation by driving the nCS \nsignal low and then shifting in the read device identification operation code, followed by two dummy bytes on the \nASDI  pin. The 16-bit device identification of the EPCS \ndevice is then shifted out on the DATA  pin on the falling edge of the DCLK  signal. The \ndevice can terminate the read device identification operation by driving the nCS signal \nhigh after reading the device identification at least one time.\nFigure  14 shows the instruction sequence of the read device identification operation.\nFigure 14. Read Device Identification Operation Timing Diagram (1)\nnCS\nDCLK\nASDI\nDATA0 1 2 3 4 5 6 7 8 9 10 20 21 23 24 25 26 27 28 29 30 31 32\nOperation Code Two Dummy Bytes\n15 14 13 3210\n765 43 210MSB\nMSBHigh ImpedanceSilicon ID\nNote to Figure 14: \n(1) Only EPCS128 device supports the read device identification operation.\nEPCS Device Memory Access Page 25\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationWrite Bytes Operation\nThe write bytes operation code is b'0000 0010  and it lists the MSB first. This \noperation allows bytes to be written to the memory. You must execute the write enable operation before the write bytes operation to set the write enable latch bit in the status register to \n1. \nThe write bytes operation is implemented by driving the nCS signal low, followed by \nthe write bytes operation code, three address bytes, and at least one data byte on the \nASDI  pin. If the eight LSBs ( A[7..0] ) are not all 0, all sent data that goes beyond the \nend of the current page is not written into the next page. Instead, this data is written at the start address of the same page (from the address whose eight LSBs are all \n0). You \nmust ensure the nCS signal is set low during the entire write bytes operation.\nIf more than 256 data bytes are shifted into the EPCS device with a write bytes operation, the previously latched data is discarded and the last 256 bytes are written to the page. However, if less than 256 data bytes are shifted into the EPCS device, they are guaranteed to be written at the specified addresses and the other bytes of the same page are not affected.\nIf your design requires writing more than 256 data bytes to the memory, more than one page of memory is required. Send the write enable and write bytes operation codes, followed by three new targeted address bytes and 256\n data bytes, before a new \npage is written.\nThe nCS signal must be driven high after the eighth bit of the last data byte has been \nlatched in. Otherwise, the device does not execute the write bytes operation. The write \nenable latch bit in the status register is reset to 0 before the completion of each write \nbytes operation. Therefore, the write enable operation must be carried out before the next write bytes operation.\nThe device initiates a self-timed write cycle immediately after the nCS signal is driven \nhigh. For more information about the self-timed write cycle time, refer to the t WB value \nin Table  16 on page  29. You must account for this amount of delay before another page \nof memory is written. Alternatively , you can check the write in progress bit in the status register by executing the read status operation while the self-timed write cycle is in progress. The write in progress bit is set to \n1 during the self-timed write cycle and \n0 when it is complete.\n1 You must erase all the memory bytes of the EPCS devices to all 1 or 0xFF  before you \nimplement the write bytes operation. You can erase all the memory bytes by executing the erase sector operation in a sector or the erase bulk operation throughout the entire memory.\nPage 26 EPCS Device Memory Access\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  15 shows the instruction sequence of the write bytes operation.\nFigure 15. Write Bytes Operation Timing Diagram  (1)\nnCS\nDCLK\nASDI0 1 2 3 4 5 6 7 8 9 10 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 2072 2073 2074 2075 2076 2077 2078 2079\nOperation Code 24-Bit Address (2)\n23 22 21 3 2 1 0 7654\nMSB MSB (3) MSB (3) MSB (3)Data Byte 1 Data Byte 2 Data Byte 256\n3210 7654 7654 3210 3210\nNotes to Figure  15:\n(1) Use the erase sector operation or the erase bulk operation to initialize the memory bytes of the EPCS devices to all 1 or 0xFF  before implementing the write bytes operation.\n(2) Address bit A[23]  is a don't-care bit in the EPCS64 device. Address bits A[23..21]  are don't-care bits in the EPCS16 device. Address bits A[23..19]  are don't-care bits in the EPCS4 device. Address \nbits A[23..17]  are don't-care bits in the EPCS1 device.\n(3) For .r pd  files, write the LSB of the data byte first.\nErase Bulk Operation\nThe erase bulk operation code is b'1100 0111  and it lists the MSB first. This operation sets all the memory bits to 1 or 0xFF . \nSimilar to the write bytes operation, you must execute the write enable operation before the erase bulk operation so that the \nwrite enable latch bit in the status register is set to 1.\nYou can implement the erase bulk operation by driving the nCS signal low and then shifting in the erase bulk operation code on \nthe ASDI  pin. The nCS signal must be driven high after the eighth bit of the erase bulk operation code has been latched in.\nThe device initiates a self-timed erase bulk cycle immediately after the nCS signal is driven high. For more information about \nthe self-timed erase bulk cycle time, refer to the t EB value in Table  16 on page  29.\nYou must account for this delay before accessing the memory contents. Alternatively , you can check the write in progress bit in  \nt\nhe status register by executing the read status operation while the self-timed erase cycle is in progress. The write in progre ss \nbit is set to 1 during the self-timed erase cycle and 0 when it is complete. The write enable latch bit in the status register is reset \nto 0 before the erase cycle is complete.\nEPCS Device Memory Access Page 27\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  16 shows the instruction sequence of the erase bulk operation.\nFigure 16. Erase Bulk Operation Timing Diagram\nnCS\nDCLK\nASDI01234567\nOperation Code\nErase Sector Operation\nThe erase sector operation code is b'1101 1000  and it lists the MSB first. This \noperation allows you to erase a certain sector in the EPCS device by setting all the bits \ninside the sector to 1 or 0xFF . This operation is useful if you want to access the unused \nsectors as general purpose memory in your applications. You must execute the write enable operation before the erase sector operation so that the write enable latch bit in the status register is set to \n1.\nYou can implement the erase sector operation by first driving the nCS signal low, then \nyou shift in the erase sector operation code, followed by the three address bytes of the chosen sector on the \nASDI  pin. The three address bytes for the erase sector operation \ncan be any address inside the specified sector. For more information about the sector address range, refer to Table  3 on page  7 through Table  7 on page  12. Drive the \nnCS \nsignal high after the eighth bit of the erase sector operation code has been latched in.\nThe device initiates the self-timed erase sector cycle immediately after the nCS signal is \ndriven high. For more information about the self-timed erase sector cycle time, refer to the t\nES value in Table  16 on page  29. \nYou must account for this delay before accessing the memory contents. Alternatively, yo\nu can check the write in progress bit in the status register by executing the read \nstatus operation while the self-timed erase sector cycle is in progress. The write in progress bit is set to \n1 during the self-timed erase sector cycle and 0 when it is \ncomplete. The write enable latch bit in the status register resets to 0 before the erase \ncycle is complete.\nFigure  17 shows the instruction sequence of the erase sector operation.\nFigure  17. Erase Sector Operation Timing Diagram\nnCS\nDCLK\nASDI0123456789 2 8 2 9 3 0 3 1\nOperation Code 24-Bit Address (1)\n23 22 3 2 1 0\nMSB\nNote to Figure 17:\n(1) Address bit A[23]  is a don't-care bit in the EPCS64 device. Address bits A[23..21]  are don't-care bits in the EPCS16 device. Address bits \nA[23..19]  are don't-care bits in the EPCS4 device. Address bits A[23..17]  are don't-care bits in the EPCS1 device.\nPage 28 Power and Operation\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationPower and Operation\nThis section describes the power modes, power-on reset (POR) delay, error detection, \nand initial programming state of the EPCS devices.\nPower Mode\nEPCS devices support active and standby power modes. When the nCS signal is low, \nthe device is enabled and is in active power mode. The FPGA is configured while the EPCS device is in active power mode. When the \nnCS signal is high, the device is \ndisabled but remains in active power mode until all internal cycles are completed, such as write or erase operations. The EPCS device then goes into standby power mode. The I\nCC1 and ICC0 parameters list the VCC supply current when the device is in \nactive and standby power modes. For more information, refer to Table  21 on page  34.\nPower-On Reset\nDuring the initial power-up, a POR delay occurs to ensure the system voltage levels \nhave stabilized. During the AS configuration, the FPGA controls the configuration and has a longer POR delay than the EPCS device.\nf For more information about the POR delay time, refer to the configuration  chapter in \nthe appropriate device handbook.\nError Detection\nDuring the AS configuration with the EPCS device, the FPGA monitors the \nconfiguration status through the nSTATUS  and CONF_DONE  pins. If an error condition \noccurs, if the nSTATUS  pin drives low or if the CONF_DONE  pin does not go high, the \nFPGA begins reconfiguration by pulsing the nSTATUS  and nCSO  signals, which controls \nthe chip select ( nCS) pin on the EPCS device.\nAfter an error, the configuration automatically restarts if the Auto-Restart Upon \nFrame Error option is turned on in the Quartus\uf0d2 II software. If the option is turned off, \nthe system must monitor the nSTATUS  signal for errors and then pulse the nCONFIG  \nsignal low to restart configuration.\nTiming Information Page 29\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationTiming Information\nFigure  18 shows the timing waveform for the write operation of the EPCS device.\nFigure 18. Write Operation Timing Diagram\nnCS\nDCLK\nASDI\nDATAtNCSH\ntDSUtNCSSU tCH tCLtCSH\ntDH\nBit n Bit 0 Bit n \uf02d\uf0201\nHigh Impedance\nTable  16 lists the EPCS device timing parameters for the write operation.\nTable  16. Write Operation Parameters\nSymbol Parameter Min Typ Max Unit\nfWCLKWrite clock frequency (from the FPGA, download cable, or \nembedded processor) for write enable, write disable, read status, \nread silicon ID, write bytes, erase bulk, and erase sector \noperations— — 25 MHz\ntCH DCLK  high time 20 — — ns\ntCL DCLK  low time 20 — — ns\ntNCSSU Chip select ( nCS) setup time 10 — — ns\ntNCSH Chip select ( nCS) hold time 10 — — ns\ntDSU Data (ASDI ) in setup time before the rising edge on DCLK 5 — — ns\ntDH Data (ASDI ) hold time after rising edge on DCLK 5 — — ns\ntCSH Chip select ( nCS) high time 100 — — ns\ntWB  (1)Write bytes cycle time for EPCS1, EPCS4, EPCS16, and EPCS64 devices— 1.5 5 ms\nWrite bytes cycle time for the EPCS128 device — 2.5 7 ms\nt\nWS  (1)Write status cycle time — 5 15 ms\ntEB  (1)Erase bulk cycle time for the EPCS1 device — 3 6 s\nErase bulk cycle time for the EPCS4 device — 5 10 s\nErase bulk cycle time for the EPCS16 device — 17 40 s\nErase bulk cycle time for the EPCS64 device — 68 160 s\nErase bulk cycle time for the EPCS128 device — 105 250 s\ntES  (1)Erase sector cycle time for EPCS1, EPCS4, EPCS16, and EPCS64 devices— 2 3 s\nErase sector cycle time for the EPCS128 device — 2 6\ns\nNote to Table  16:\n(1) Figure 18 does not show these parameters.\nPage 30 Timing Information\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  19 shows the timing waveform for the read operation of the EPCS device.\nFigure 19. Read Operation Timing Diagram\nnCS\nDCLK\nDATA\nASDItnCLK2DtCLtCH\ntODIS\nBit N Bit 0 Bit N \uf02d\uf0201\nAdd_Bit 0\nTable  17 lists the EPCS device timing parameters for the read operation.\nTable  17. Read Operation Parameters\nSymbol Parameter Min Max Unit\nfRCLKRead clock frequency (from the FPGA or \nembedded processor) for the read bytes \noperation— 20 MHz\nFast read clock frequency (from the FPGA or em\nbedded processor) for the fast read bytes \noperation— 40 MHz\ntCH DCLK  high time 11 — ns\ntCL DCLK  low time 11 — ns\ntODIS Output disable time after read — 8 ns\ntnCLK2D Clock falling edge to DATA — 8 ns\n1 Existing batches of EPCS1 and EPCS4 devices manufactured on 0.15  µm process \ngeo\nmetry support the AS configuration up to 40  MHz. However, batches of EPCS1 \nan\nd EPCS4 devices manufactured on 0.18  µm process geometry support the AS \nc\nonfiguration only up to 20  MHz. EPCS16, EPCS64, and EPCS128 devices are not \naf\nfected.\nf Fo r more information about product traceability and transition date to differentiate \nbetween 0.15 µm process geometry and 0.18  µm process geometry of the EPCS1 and \nEP\nCS4 devices, refer to the PCN  0514: Manufacturing Changes on EPCS Family .\nTiming Information Page 31\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationFigure  20 shows the timing waveform for the AS configuration scheme of the FPGA \nus\ning an EPCS device.\nFigure 20. AS Configuration Timing Diagram\nRead Address\nbit N-1bit N bit 1 bit 0\nt           (1)nSTATUSnCONFIG\nCONF_DONE\nnCSO\nDCLK\nASDO\nDATA0\nINIT_DONE\nUser I/O User Mode \nTri-stated with internal pull-up resistorCD2UMtCF2ST1\nNote to Figure 20:\n(1) tCD2UM  is an FPGA-dependent parameter. For more information, refer to the configuration chapter in the appropriate device handbook.\nf For more information about the timing parameters in Figure  20, refer to the \nc\nonfiguration chapter in the appropriate device handbook.\nPage 32 Programming and Configuration File Support\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationProgramming and Configuration File Support\nThe Quartus  II software provides programming support for EPCS devices. When you \nselect an EPCS device, the Quartus  II software automatically generates the \nProgrammer Object File ( .pof) to program the device. The software allows you to \nselect the appropriate EPCS device density that most efficiently stores the configuration data for the selected FPGA.\nYou can program the EPCS device in-system by an external microprocessor using the SRunner software driver. The SRunner software driver is developed for embedded EPCS device programming that you can customize to fit in different embedded systems. The SRunner software driver reads .rpd  files and writes to the EPCS devices. \nThe programming time is comparable to the Quartus\n II software programming time. \nBecause the FPGA reads the LSB of the .rpd  data first during the configuration \nprocess, the LSB of .rpd  bytes must be shifted out first during the read bytes operation \nand shifted in first during the write bytes operation.\n1 Writing and reading the .rpd  file to and from the EPCS device is different from the \nother data and address bytes.\nf For more information about the SRunner software driver, refer to \nAN 418: SRunner:  An Embedded Solution for Serial Configuration Device Programming .\nYou can program EPCS devices using the APU with the appropriate programming \nadapter, such as PLMSEPC-8, using the Quartus  II software or the USB-Blaster, \nEthernetBlaster, or ByteBlaster  II download cable. In addition, many third-party \nprogrammers, such as the BP Microsystems and System General programmers, offer programming hardware that supports EPCS devices.\nDuring the ISP of an EPCS device using the USB-Blaster, EthernetBlaster, or ByteBlaster\n II download cable, the cable pulls the nCONFIG  signal low to reset the \nFPGA and overrides the 10-k \uf057 pull-down resistor on the nCE pin of the FPGA, as \nshown in Figure  2 on page  4. The download cable then uses the four interface \uf020\npins—DATA , nCS, ASDI , and DCLK —to program the EPCS device. When programming is \ncomplete, the download cable releases the four interface pins of the EPCS device and the \nnCE pin of the FPGA and pulses the nCONFIG  signal to start the configuration \nprocess.\nThe FPGA can program the EPCS device in-system using the JTAG interface with the \nSFL. This solution allows you to indirectly program the EPCS device using the same JTAG interface that is used to configure the FPGA.\nf For more information about SFL, refer to AN 370: Using the Serial FlashLoader with the \nQuartus  II Software .\nOperating Conditions Page 33\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporationf For more information about programming and configuration support, refer to the \nfollowing documents:\n■Altera Programming Hardware Data Sheet\n■Programming Hardware Manufacturers\n■USB-Blaster Download Cable User Guide\n■ByteBlaster  II Download Cable User Guide\n■EthernetBlaster Communications Cable User Guide\nOperating Conditions\nTable  18 through Table  22 list information about the absolute maximum ratings, \nr\necommended operating conditions, DC operating conditions, and capacitance for \nEPCS devices.\nTable  18. Absolute Maximum Ratings  (1)\nSymbol Parameter Condition Min Max Unit\nVCCSupply voltage for EPCS1, EPCS4, \nand EPCS16 devicesWith respect to GND –0.6 4.0 V\nSupply voltage for EPCS64 and E\nPCS128 devicesWith respect to GND –0.2 4.0 V\nVIDC input voltage for EPCS1, EPCS4, and EPCS16 devicesWith respect to GND –0.6 4.0 V\nDC input voltage for EPCS64 and E\nPCS128 devicesWith respect to GND –0.5 4.0 V\nIMAX DC V CC or GND current — — 15 mA\nIOUT DC output current per pin — –25 25 mA\nPD Power dissipation — — 54 mW\nTSTG Storage temperature No bias –65 150 \uf0b0C\nTAMB Ambient temperature Under bias –65 135 \uf0b0C\nTJ Junction temperature Under bias — 135 \uf0b0C\nTable  19. Recommended Operating Conditions\nSymbol Parameter Conditions Min Max Unit\nVCC Supply voltage (2)2.7 3.6 V\nVI Input voltage With respect to GND –0.3 0.3 + V CC V\nVO Output voltage — 0 VCC V\nTA Operating temperature For industrial use –40 85 \uf0b0C\ntR Input rise time — — 5 ns\ntF Input fall time — — 5 ns\nTable  20. DC Operating Conditions\nSymbol Parameter Conditions Min Max Unit\nVIHHigh-level input voltage for EPCS1, \nEPCS4, and EPCS16 devices— 0.6 x V CCVCC + 0.4 V\nHigh-level input voltage for EPCS64 a\nnd EPCS128 devices— 0.6 x V CCVCC + 0.2 V\nVIL Low-level input voltage — –0.5 0.3 x V CC V\nVOH High-level output voltage IOH = –100 \uf06d A  (3)VCC – 0.2 — V\nVOL Low-level output voltage IOL = 1.6 mA  (3)— 0.4 V\nII Input leakage current VI = V CC or GND –10 10 \uf06dA\nIOZ Tri-state output off-state current VO = V CC or GND –10 10 \uf06dA\nTable  21. ICC Supply Current  \nSymbol Parameter Conditions Min Max Unit\nICC0VCC supply current (standby mode) for EPCS1, \nEPCS4, and EPCS16 devices— — 50 \uf06dA\nVCC supply current (standby mode) for EPCS64 \nand EPCS128 devices— — 100 \uf06dA\nICC1VCC supply current (during active power mode) for \nEPCS1, EPCS4, and EPCS16 devices— 5 15 mA\nVCC supply current (during active power mode) for \nEPCS64 and EPCS128 devices— 5 20 mA\nTable  22. Capacitance   (4)\nSymbol Parameter Conditions Min Max Unit\nCIN Input pin capacitance VIN = 0 V — 6 pF\nCOUT Output pin capacitance VOUT = 0 V — 8 pF\nNotes to Table  18 through Table  22:\n(1) For more information, refer to the Operat i ng Requ ireme nts for Alte ra Devices  Data Sheet.\n(2) Maximum VCC rise time is 100  ms.\n(3) The IOH parameter refers to the high-level TTL or CMOS output current and the I OL parameter refers to the low-level TTL or CMOS output \ncurrent.\n(4) Capacitance is sample-tested only at TA = 25 × C and at a 20-MHz frequency.Page 34 Operating Conditions\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera Corporation\nPin Information Page 35\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationPin Information\nFigure  21 and Figure  22 show the EPCS device in an 8-pin or 16-pin device. The \nf\nollowing lists the control pins on the EPCS device:\n■Serial data output ( DATA )\n■AS data input ( ASDI )\n■Serial clock ( DCLK )\n■Chip select ( nCS)\nFigure  21 shows the 8-pin SOIC package of the EPCS device.\nFigure 21. Altera EPCS Device 8-Pin SOIC Package Pin-Out Diagram\nVCC\nVCC\nDCLK\nASDIVCC\nGNDnCS\nDATAEPCS1, EPCS4, \nor EPCS16\n1\n2\n3\n48\n7\n6\n5\nFigure  22 shows the 16-pin SOIC package of the EPCS device.\nFigure 22. Altera EPCS Device 16-Pin SOIC Package Pin-Out Diagram\nDCLK\nASDI\nN.C.\nN.C.N.C.N.C.V\nCC\nVCC\nN.C.N.C.\nGND\nV\nCCnCS\nDATAN.C.N.C.EPCS64 \nor EPCS128\n1\n2\n3(1)\n4(1)16\n15\n14(1)\n13(1)\n5(1)\n6(1)\n7\n812(1)\n11(1)\n109\nNote to Figure 22:\n(1) You can leave these pins floating or you can connect them to VCC or GND.\nPage 36 Pin Information\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationTable  23 lists the pin description of the EPCS device.\nTable  23. EPCS Device Pin Description\nPin \nNam\nePin Number \ni\nn 8-Pin \nSOIC \nPackagePin Number \ni\nn 16-Pin \nSOIC \nPackagePin Type Description\nDATA 2 8 OutputThe DATA  output signal transfers data serially out of the EPCS device \nto the FPGA during the read operation or configuration. During the \nread operation or configuration, the EPCS device is enabled by pulling the \nnCS signal low. The DATA  signal transitions on the falling edge of \nthe DCLK  signal.\nASDI 5 15 InputThe ASDI  signal is used to transfer data serially into the EPCS device. \nThis pin are also receiving data that are programmed into the EPCS device. Data is latched on the rising edge of the \nDCLK  signal.\nnCS 1 7 InputThe nCS signal toggles at the beginning and the end of a valid \ninstruction. When this signal goes high, the device is deselected and the \nDATA  pin is tri-stated. When this signal goes low, the device is \nenabled and in an active mode. After power up, the EPCS device requires a falling edge on the \nnCS signal before the EPCS device \nbegins any operation.\nDCLK 6 16 InputThe FPGA provides the DCLK  signal. This signal provides the timing \nfor the serial interface. The data presented on the ASDI  pin is latched \nto the EPCS device on the rising edge of the DCLK  signal. The data on \nthe DATA  pin changes after the falling edge of the DCLK  signal and is \nlatched into the FPGA on the next falling edge of the DCLK  signal.\nVCC 3, 7, 8 1, 2, 9 Power Connect the power pins to a 3.3-V power supply.\nGND 4 10 GND Ground pin.\nFigure  23 shows the layout recommendation for vertical migration from the EPCS1 \nde\nvice to the EPCS128 device.\nFigure 23. Layout Recommendation for Vertical Migration from the EPCS1 Device to the EPCS128 \nDev\nice\nPin 1 ID\nPin 1 ID\nDevice Package and Ordering Code Page 37\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationDevice Package and Ordering Code\nThis section describes the package offered in EPCS devices and the ordering codes for \neach EPCS device.\nPackage\nThe EPCS1, EPCS4, and EPCS16 devices are available in 8-pin SOIC package. The EPCS64 and EPCS128 devices are available in 16-pin SOIC package. \nIf you use the AS  x1 configuration scheme, you can migrate EPCS64 and EPCS128 \nd \nevices to EPCQ64, EPCQ128, or EPCQ256 devices.\nf F or more information, refer to the Package and Thermal Resistance  page.\nf F or more information about migration to EPCQ, refer to the Quad-Serial Configuration \n(EPCQ) Devices Datasheet .\nOrdering Code\nTable  24 lists the ordering codes for EPCS devices.\nTable  24. EPCS Device Ordering Codes\nDevice Ordering Code  (1)\nEPCS1EPCS1SI8\nEPCS1\nSI8N\nEPCS4EPCS4SI8\nEPCS4\nSI8N\nEPCS16 EPCS16SI8N\nEPCS64 EPCS64SI16N\nEPCS128 EPCS128SI16N\nNote to Table  24:\n(1) N indicates that the device is lead free.\nDocument Revision History\nTable  25 lists the revision history for this document.\nTable  25. Document Revision History  (Part 1 of 4)\nDate Version Changes\nApril 2014 5.1 Removed the operating temperature for commercial use in Table  19.\nJanuary 2014 5.0■Added Table  12 to include the block protection bits for EPCS64 devices.\n■Updated DCLK f MAX for the read status and read silicon ID operations to \n32 MHz in Table  8.\n■Updated t CH, tCL, and t ODIS values in the read operation parameters in Table  17.\n■Updated the “Package” section to include device migration information.\nPage 38 Document Revision History\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationJanuary 2012 4.0■Updated “Package” and “Ordering Code” sections.\n■Updated Figure  5, Figure  6, and Figure  22.\n■Updated Table  16 and Table  18.\n■Minor text edits.\nJune 2011 3.4■Updated Table  3–19.\n■Updated Figure  3–20.\nDecember 2009 3.3■Updated “Features” and “Functional Description” sections.\n■Added “Fast Read Operation” section.\n■Removed Table  4–2 to Table  4–9, Table 4-26, and Table  4–33.\n■Updated Table  3–1.\n■Updated Figure  3–2.\n■Removed “Referenced Documents” section.\nOctober 2008 3.2■Updated “Introduction”, “Active Serial FPGA Configuration”, “Operation \nCodes”, “Read Status Operation”, “Read Device Identification Operation”, and “Package” sections. \n■Updated Table  4–10, Table  4–25, Table  4–26, and Table  4–32. \n■Updated Figure  4–5, Figure  4–13, and Figure  4–19.\n■Added Figure  4–22.\n■Added Table  4–33.\n■Updated new document format.\nMay 2008 3.1■Updated Table  4–3, Table  4–6, Table  4–7, Table  4–28, and Table  4–29.\n■Deleted Note 5 to Table  4–31.\n■Added “Referenced Documents” section.Table 25. Document Revision History  (Part 2 of 4)\nDate Version Changes\nDocument Revision History Page 39\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationAugust 2007 3.0■Updated “Introduction” section.\n■Updated “Functional Description” section.\n■Updated Table  4–1 through Table  4–4 and Table  4–7 through Table  4–9 to with \nEPCS128 information.\n■Added Table  4–6 on Arria GX.\n■Added notes to Figure  4–3.\n■Added notes to Figure  4–4.\n■Updated Table  4–10 with EPCS128 information.\n■Added new Table  4–11 on address range for sectors in EPCS128 device.\n■Updated Table  4–16 with information about “Read Device Identification” and \nadded   (Note  5).\n■Added new Table  4–21 on block protection bits in EPCS128.\n■Added notes to Figure  4–12.\n■Added new section “Read Device Identification Operation” with Table  4–23 and \nFigure  4–13.\n■Updated “Write Bytes Operation”, “Erase Bulk Operation” and “Erase Sector Operation” sections.\n■Updated Table  4–24 to include EPCS128 information.\n■Updated   (Note  1) to Table  4–26.\n■Updated VCC and VI information to include EPCS128 in Table  4–27.\n■Updated VIH inform ation to include EPCS128 in Table  4–29.\n■Updated ICC0 and ICC1  information to include EPCS128 in Table  4–30.\n■Updated Figure  4–21 and Table  4–34 with EPCS128 information.\nApril 2007 2.0■Updated “Introduction” section.\n■Updated “Functional Description” section and added handpara note.\n■Added Table  4–4, Table  4–6, and Table  4–7.\n■Updated “Active Serial FPGA Configuration” section and its handpara note.\n■Added notes to Figure  4–2.\n■Updated Table  4–26 and added   (Note  1).\n■Updated Figure  4–20.\n■Updated Table  4–34.\nJanuary 2007 1.7■Removed reference to PLMSEPC-16 in “Programming and Configuration File \nSupport”.\n■Updated DCLK  pin information in Table  4–32.\nOctober 2006 1.6■Updated Figure  4–19.\n■Updated Table  4–30 and Table  4–32.\nAugust 2005 1.5 ■Updated table 4-4 to include EPCS64 support for Cyclone devices.\nAugust 2005 1.4■Updated tables.\n■Minor text updates.\nFebruary 2005 1.3 Updated hot socketing AC specifications.Table 25. Document Revision History  (Part 3 of 4)\nDate Version Changes\nPage 40 Document Revision History\nSerial Configuration (EPCS) Devices Datasheet April 2014 Altera CorporationOctober 2003 1.2■Added Serial Configuration Device Memory Access section.\n■Updated timing information in Tables 4–10 and \uf020\n4–11 section.\n■Updated timing information in Tables 4-16 and 4-17.\nJuly 2003 1.1 Minor updates.\nMay 2003 1.0■Added document to the Cyclo ne Device Ha ndbook.\n■Initial release.Table 25. Document Revision History  (Part 4 of 4)\nDate Version Changes\nMouser Electronics\n  \nAuthorized Distributor\n \n  \nClick to View Pricing, Inventory, Delivery & Lifecycle Information:\n \n \n \n Intel:   \n\xa0 EPCS4SI8N\xa0 EPCS4SI8\xa0 EPCS1SI8\xa0 EPCS16SI8N\xa0 EPCS128SI16N\xa0 EPCS64SI16N\xa0 EPCS1SI8N\n"}]
!==============================================================================!
### Component Summary: EPCS1SI8N (Intel/Altera)

#### Key Specifications:
- **Voltage Ratings**: 
  - Recommended Operating Voltage: 3.3V (2.7V to 3.6V)
- **Current Ratings**: 
  - Active Mode Supply Current: 5 mA to 15 mA
  - Standby Mode Supply Current: 50 µA
- **Power Consumption**: 
  - Power Dissipation: 54 mW
- **Operating Temperature Range**: 
  - Industrial Use: -40°C to 85°C
- **Package Type**: 
  - 8-pin Small Outline Integrated Circuit (SOIC)
- **Special Features**: 
  - Supports active serial (AS) x1 configuration scheme
  - In-system programming (ISP) support
  - Reprogrammable memory with over 100,000 erase or program cycles
  - Write protection support for memory sectors
- **Moisture Sensitive Level**: 
  - Not specified in the provided datasheet.

#### Description:
The **EPCS1SI8N** is a serial configuration device from Intel (formerly Altera) designed for use in FPGA configurations. It is a non-volatile memory device that stores configuration data for FPGAs, allowing them to be configured upon power-up. The EPCS1 device specifically offers a memory size of 1,048,576 bits (or 128 KB) and operates using a simple four-pin interface, making it easy to integrate into various applications.

#### Typical Applications:
- **FPGA Configuration**: The primary function of the EPCS1SI8N is to store configuration data for SRAM-based FPGAs, enabling them to load their configuration upon power-up.
- **Embedded Systems**: It can be used in embedded systems where configuration data needs to be stored and accessed quickly.
- **Data Storage**: The device can also be utilized for storing small amounts of data that need to be retained even when power is removed.
- **Microprocessor Systems**: It can be integrated with microprocessors to provide additional memory for configuration and data storage.

The EPCS1SI8N is particularly suited for applications requiring low power consumption and a compact footprint, making it ideal for portable and embedded devices.