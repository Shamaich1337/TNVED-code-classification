[{'role': 'system', 'content': 'You are a technical specialist with expertise in electronics. Your task is to analyze datasheets for electronic components and provide a concise summary of the product’s key characteristics and specifications. In addition, you need to gather textual information about the component, including its description and typical applications.Instructions:    Identify the correct component in the datasheet using the provided product code.    Summarize key parameters, including:        Voltage ratings        Current ratings        Power consumption        Operating temperature range        Package type        Special features or notes (if applicable)        Moisture Sensetive Level JEDEC J-STD-020E    Provide a short description of the component, including what it is (e.g., transistor, microcontroller, sensor) and its primary function.    Explain typical applications for the component (e.g., power management, signal processing, data storage, etc.).    Be thorough and accurate: Ensure the information corresponds specifically to the product code, as some datasheets cover multiple variants.Your goal is to create a clear and accurate technical summary that includes both key specifications and a description of what the component is used for.'}, {'role': 'user', 'content': 'Give me information about the component of MAX3078EESA+T production of MAXIM from the text:Functional Diagram and Ordering Information appear at \nend of data sheet.General Description\nThe MAX3107 is an advanced universal asynchronous \nreceiver-transmitter (UART) with 128 words each of \nreceive and transmit first-in/first-out (FIFO) that can be \ncontrolled through I 2C or high-speed SPI. The 2x and \n4x rate modes allow a maximum of 24Mbps data rates. \nA phase-locked loop (PLL), prescaler, and fractional \nbaud-rate generator allow for high-resolution baud-rate \nprogramming and minimize the dependency of baud rate \non reference clock frequency.\nAutosleep and shutdown modes help reduce power con -\nsumption during periods of inactivity. A low 640µA (typ) \nsupply current and tiny 24-pin TQFN (3.5mm x 3.5mm) \npackage make the MAX3107 ideal for low-power portable \ndevices. \nIntegrated logic-level translation on the controller and \ntransceiver (RX/TX and RTS/CTS) interfaces enable use \nwith a wide selection of RS-232/RS-485 transceivers.\nAutomatic hardware and software flow control with select -\nable FIFO interrupt triggering offloads low-level activity \nfrom the host controller. Automatic half-duplex transceiver \ncontrol with programmable setup and hold times allow \nthe MAX3107 to be used in high-speed applications, for \nexample Profibus-DP.\nThe MAX3107 is ideal for use in portable devices,  \nindustrial, and automotive applications. The MAX3107 is \navailable in a 24-pin SSOP package and a 24-pin TQFN \npackage. It is specified over the -40°C to +85°C extended \nambient temperature range.\nApplications\n ●Portable Devices\n ●Industrial Control Systems\n ●Fieldbus Networks\n ●Automotive Infotainment Systems\n ●Medical Systems\n ●Point-of-Sale Systems\n ●HVAC or Building ControlBenefits and Features\n ●Bridges an SPI/MICROWIRE or I 2C Microprocessor \nBus to an Asynchronous Interface Such as RS-485, \nRS-232, or IrDASM\n• SIR- and MIR-Compliant IrDA Encoder/Decoder\n• Line Noise Indication Ensures Data Link Integrity\n ●Saves Up to 23% Board Space\n• 24-Pin TQFN (3.5mm x 3.5mm) and SSOP Packages \n ●Integrated Internal Oscillator Eliminates the Need for \nan External Oscillator and Reduces the BOM Cost \n• Integrated PLL and Divider \n ●Fast Data Rates Allow Maximum System Flexibility \nAcross Interface Standards\n• 24Mbps (max) Data Rate \n• Fractional Baud-Rate Generator \n• SPI Up to 26MHz Clock Rate \n ●Deep, 128-Word Buffer and Automated Control \nFeatures Help Offload Activity on the Microcontroller\n• Auto Transceiver Direction Control \n• Half-Duplex Echo Suppression \n• Auto RTS/CTS and XON/XOFF Flow Control \n• 9-Bit Multidrop-Mode Data Filtering \n -Special Character Detection \n -GPIO-Based Character Detection \n -Four Flexible GPIOs \n ●Power Management Control Features Minimize \nPower Consumption for Portable Applications\n• +2.35V to +3.6V Supply Range \n -Low 640μA (typ) Supply Current at 1Mbaud and \n20MHz Clock \n• Shutdown and Autosleep Modes\n -Low 20μA (typ) Shutdown Power \n ●Logic-Level Translation on the Controller and \nTransceiver Interfaces (Down to 1.7V) Ensure \nSystem Compatibility\n ●Register Compatible with MAX3108, MAX3109, \nMAX14830\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\n19-5014; Rev 7; 5/15EVALUATION KIT AVAILABLE\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.comMaxim Integrated  │ 2TABLE OF CONTENTS\nGeneral Description ............................................................................ 1\nApplications  .................................................................................. 1\nBenefits and Features  .......................................................................... 1\nAbsolute Maximum Ratings ...................................................................... 6\nPackage Thermal Characteristics (Note 1)  .......................................................... 6\nDC Electrical Characteristics ..................................................................... 6\nAC Electrical Characteristics  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\nTest Circuits/Timing Diagrams ................................................................... 10\nTypical Operating Characteristics  ................................................................. 11\nPin Configurations  ............................................................................ 12\nPin Descriptions .............................................................................. 12\nRegister Map  ................................................................................ 14\nDetailed Description ........................................................................... 15\nRegister Set ................................................................................ 15\nReceive and Transmit FIFOs  .................................................................. 15\nTransmitter Operation ........................................................................ 15\nReceiver Operation .......................................................................... 16\nLine Noise Indication ......................................................................... 16\nClocking and Baud-Rate Generation  ............................................................ 16\nCrystal Oscillator  ......................................................................... 17\nExternal Clock Source ..................................................................... 17\nPLL and Predivider  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\nFractional Baud-Rate Generator ................................................................ 17\n2x and 4x Rate Modes  ....................................................................... 18\nMultidrop Mode  .......................................................................... 19\nAuto Data Filtering in Multidrop Mode ......................................................... 19\nAuto Transceiver Direction Control .............................................................. 19\nEcho Suppression ........................................................................... 20\nAuto Hardware Flow Control ................................................................... 20\nAutoRTS Control  ......................................................................... 20\nAutoCTS Control  ......................................................................... 21\nAuto Software (XON/XOFF) Flow Control  ........................................................ 21\nTransmitter Flow Control  ................................................................... 22\nReceiver Flow Control  ..................................................................... 22\nFIFO Interrupt Triggering  ..................................................................... 22\nLow-Power Standby Modes  ................................................................... 22\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.comMaxim Integrated  │ 3Forced Sleep Mode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\nAutosleep Mode .......................................................................... 22\nShutdown Mode .......................................................................... 22\nPower-Up and IRQ................................................................ 22\nInterrupt Structure ........................................................................... 23\nInterrupt Enabling ......................................................................... 23\nInterrupt Clearing ......................................................................... 23\nDetailed Register Descriptions ................................................................. 23\nSerial Controller Interface  ...................................................................... 44\nSPI Interface ............................................................................... 44\nSPI Single-Cycle Access ................................................................... 44\nSPI Burst Access ......................................................................... 44\nI2C Interface  ............................................................................... 44\nSTART, STOP, and Repeated START Conditions ................................................ 45\nSlave Address  ........................................................................... 45\nBit Transfer .............................................................................. 45\nSingle-Byte Write ......................................................................... 45\nBurst Write .............................................................................. 45\nSingle-Byte Read ......................................................................... 46\nBurst Read .............................................................................. 47\nAcknowledge  ............................................................................ 47\nApplications Information ........................................................................ 47\nStartup and Initialization ...................................................................... 47\nLow-Power Operation ........................................................................ 48\nInterrupts and Polling  ........................................................................ 48\nLogic-Level Translation ....................................................................... 48\nConnector Pin Sharing  ....................................................................... 49\nRS-232 5x3 Application  ...................................................................... 49\nTypical Application Circuit  ...................................................................... 49\nChip Information .............................................................................. 49\nOrdering Information  .......................................................................... 49\nFunctional Diagram  ........................................................................... 51\nPackage Information  .......................................................................... 51\nRevision History .............................................................................. 52TABLE OF CONTENTS (CONTINUED)\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.comMaxim Integrated  │ 4LIST OF TABLES\nTable 1. StopBits Truth Table .................................................................... 33\nTable 2. Length[1:0] Truth Table .................................................................. 33\nTable 3. SwFlow[3:0] Truth Table ................................................................. 38\nTable 4. PLLFactor[1:0] Selection Guide  ............................................................ 41\nTable 5. I 2C Address Map  ...................................................................... 45LIST OF FIGURES\nFigure 1. I 2C Timing Diagram  ................................................................... 10\nFigure 2. SPI Timing Diagram  ................................................................... 10\nFigure 3. Transmit FIFO Signals  ................................................................. 15\nFigure 4. Receive Data Format  .................................................................. 16\nFigure 5. Midbit Sampling  ...................................................................... 16\nFigure 6. Receive FIFO  ........................................................................ 17\nFigure 7. Clock Selection Diagram ................................................................ 17\nFigure 8. 2x and 4x Baud Rates  ................................................................. 18\nFigure 9. Auto Transceiver Direction Control ........................................................ 19\nFigure 10. Setup and Hold Times in Auto Transceiver Direction Control  .................................. 20\nFigure 11. Half-Duplex with Echo Suppression  ...................................................... 20\nFigure 12. Echo Suppression Timing .............................................................. 21\nFigure 13. Simplified Interrupt Structure  ........................................................... 23\nFigure 14. PLL Signal Path  ...................................................................... 41\nFigure 15. SPI Single-Cycle Read ................................................................ 44\nFigure 16. SPI Single-Cycle Write ................................................................ 44\nFigure 17. I 2C START, STOP, and Repeated START Conditions  ........................................ 45\nFigure 18. Write Byte Sequence  ................................................................. 46\nFigure 19. Burst Write Sequence ................................................................. 46\nFigure 20. Read Byte Sequence  ................................................................. 46\nFigure 21. Burst Read Sequence ................................................................. 47\nFigure 22. Acknowledge ........................................................................ 47\nFigure 23. Startup and Initialization Flowchart  ...................................................... 48\nFigure 24. Logic-Level Translation ................................................................ 49\nFigure 25. Connector Sharing with a USB Transceiver ................................................ 49\nFigure 26. RS-232 Application ................................................................... 50\nFigure 27. RS-485 Half-Duplex Application ......................................................... 50\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.comMaxim Integrated  │ 5LIST OF REGISTERS\nRHR—Receiver Hold Register ................................................................... 23\nTHR—Transmit Hold Register  ................................................................... 24\nIRQEn—IRQ Enable Register  ................................................................... 24\nISR—Interrupt Status Register  .................................................................. 25\nLSRIntEn—Line Status Register Interrupt Enable .................................................... 26\nLSR—Line Status Register  ..................................................................... 27\nSpclChrIntEn—Special Character Interrupt Enable Register  ........................................... 28\nSpclCharInt—Special Character Interrupt Register ................................................... 29\nSTSIntEn—STS Interrupt Enable Register  ......................................................... 30\nSTSInt—Status Interrupt Register ................................................................ 30\nMODE1 Register  ............................................................................. 31\nMODE2 Register  ............................................................................. 32\nLCR—Line Control Register ..................................................................... 33\nRxTimeOut—Receiver Timeout Register ........................................................... 34\nHDplxDelay Register  .......................................................................... 34\nIrDA Register  ................................................................................ 35\nFlowLvl—Flow Level Register  ................................................................... 35\nFIFOTrgLvl—FIFO Interrupt Trigger Level Register ................................................... 36\nTxFIFOLvl—Transmit FIFO Level Register .......................................................... 36\nRxFIFOLvl—Receive FIFO Level Register  ......................................................... 36\nFlowCtrl—Flow Control Register ................................................................. 37\nXON1 Register ............................................................................... 38\nXON2 Register ............................................................................... 39\nXOFF1 Register  .............................................................................. 39\nXOFF2 Register  .............................................................................. 40\nGPIOConfg—GPIO Configuration Register ......................................................... 40\nGPIOData—GPIO Data Register ................................................................. 40\nPLLConfig—PLL Configuration Register ............................................................ 41\nBRGConfig—Baud-Rate Generator Configuration Register ............................................ 42\nDIVLSB—Baud-Rate Generator LSB Divisor Register ................................................ 42\nDIVMSB—Baud-Rate Generator MSB Divisor Register ............................................... 42\nCLKSource—Clock Source Register .............................................................. 43\nRevID—Revision Identification Register  ........................................................... 43\nTQFN\n Junction-to-Ambient Thermal Resistance ( θJA)..........  65°C/W\n Junction-to-Case Thermal Resistance ( θJC) ..............  15°C/WSSOP\n Junction-to-Ambient Thermal Resistance ( θJA)........... 81°C/W\n Junction-to-Case Thermal Resistance ( θJC) ..............  32°C/W(Voltages referenced to AGND.)\nVL, VA, VEXT, XIN  ...............................................  -0.3V to +4.0V\nV18, XOUT  ..................................................  -0.3V to (V A + 0.3V)\nRST, IRQ, DIN/A1, CS/A0, SCLK/SCL, \n DOUT/SDA, LDOEN, I2C/SPI ................  -0.3V to (V L + 0.3V)\nTX, RX, RTS/CLKOUT, CTS, GPIO_  .... -0.3V to (V EXT + 0.3V)\nDGND  ..................................................................  -0.3V to +0.3VContinuous Power Dissipation (T A = +70°C)\n TQFN (derate 15.4mW/°C above +70°C) .................  1229mW\n SSOP (derate 12.3mW/°C above +70°C)  ..................  988mW\nOperating Temperature Range  ..........................  -40°C to +85°C\nJunction Temperature  .....................................................  +150°C\nStorage Temperature Range  ...........................  -65°C to +150°C\nLead Temperature (soldering, 10s).................................+300°C\nSoldering Temperature (reflow).......................................+260°C\n(VA = +2.35V to +3.6V, V L = +1.71V to +3.6V, V EXT = +1.71V to +3.6V, T A = -40°C to +85°C, unless otherwise noted. Typical values \nare at V A = +2.8V, V L = +1.8V, V EXT = +2.5V, T A = +25°C.) (Note 2)Note 1:  Package thermal resistances were obtained using the method described in JEDEC specification JESD51-7, using a four-layer \nboard. For detailed information on package thermal considerations, refer to www.maximintegrated.com/thermal- tutorial .\nPARAMETER SYMBOL CONDITIONS MIN TYP MAX UNITS\nDigital Interface Supply Voltage VL 1.71 3.6 V\nAnalog Supply Voltage VA 2.35 3.6 V\nUART Interface Logic Supply \nVoltageVEXT 1.71 3.6 V\nLogic Supply Voltage V18 1.65 1.80 1.95 V\nCURRENT CONSUMPTION\nVA Supply Current IA1.8MHz crystal oscillator active, PLL disabled, \nVLDOEN  = VL, SPI/I 2C interface idle220 500 µA\nBaud rate = 1Mbps, external clock, SPI \nfrequency is 8MHz, external loopback PLL \ndisabled, V LDOEN  = VL (Note 3)0.65 1.3 mA\nVA Shutdown Supply Current IA, SHDNShutdown mode, V LDOEN  = 0V, V RST = 0V, \nall inputs and outputs are idle20 35 µA\nVA Sleep Supply Current IA, SLEEPSleep mode, V LDOEN  = VL, VRST = VL, all \ninputs and outputs are idle45 100 µA\nVL Supply Current IL All logic inputs are at V L or V EXT or 0V 4 15 µA\nVEXT Supply Current IEXT All logic inputs are at V L or V EXT or 0V 5 10 µA\nV18 Input Power-Supply Current \nin Shutdown ModeI18SHDNVLDOEN  = 0V (V 18 is powered by an \nexternal 1.85V voltage source), static \npower consumption7 50 µA\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 6DC Electrical CharacteristicsPackage Thermal Characteristics (Note 1)Stresses beyond those listed under “Absolute Maximum Ratings” may cause permanent damage to the device. These are stress ratings only, and functional operation \nof the device at these or any other conditions beyond those indicated in the operational sections of the specifications is not implied. Exposure to absolute maximum \nrating conditions for extended periods may affect device reliability.Absolute Maximum Ratings\n(VA = +2.35V to +3.6V, V L = +1.71V to +3.6V, V EXT = +1.71V to +3.6V, T A = -40°C to +85°C, unless otherwise noted. Typical values \nare at V A = +2.8V, V L = +1.8V, V EXT = +2.5V, T A = +25°C.) (Note 2)\nPARAMETER SYMBOL CONDITIONS MIN TYP MAX UNITS\nSCLK/SCL, DOUT/SDA\nDOUT/SDA Output Low Voltage \nin I2C ModeVOL,I2CILOAD  = -3mA, V L > 2V 0.4 V\nILOAD  = -3mA, V L < 2V 0.2 x V L V\nDOUT/SDA Output Low Voltage \nin SPI ModeVOL,SPI ILOAD  = -2mA 0.4 V\nDOUT/SDA Output High Voltage \nin SPI ModeVOH,SPI ILOAD  = 2mA VL - 0.4 V\nInput Low Voltage VIL SPI and I 2C mode 0.3 x V L V\nInput High Voltage VIH SPI and I 2C mode 0.7 x V L V\nInput Hysteresis VHYST SPI and I 2C mode 0.05 x V L V\nInput Leakage Current IIL VIN = 0 to V L, SPI and I 2C mode -1 +1 µA\nInput Capacitance CIN_I2C_SPI SPI and I 2C mode 5 pF\nI2C/SPI, CS/A0, DIN/A1 INPUTS\nInput Low Voltage VIL SPI and I 2C mode 0.3 x V L V\nInput High Voltage VIH SPI and I 2C mode 0.7 x V L V\nInput Hysteresis VHYST SPI and I 2C mode 50 mV\nInput Leakage Current IIL VIN = 0 to V L, SPI and I 2C mode -1 +1 µA\nInput Capacitance CIN_I2C_SPI SPI and I 2C mode 5 pF\nIRQ OUTPUT (OPEN DRAIN )\nOutput Low Voltage VOL ILOAD  = -2mA 0.4 V\nOutput Leakage ILK VIRQ = 0 to V L, IRQ is not asserted -1 +1 µA\nLDOEN AND RST INPUTS\nInput Low Voltage VIL 0.3 x V L V\nInput High Voltage VIH 0.7 x V L V\nInput Hysteresis VHYST 50 mV\nInput Leakage Current IIN VIN = 0 to V L -1 +1 µA\nRTS/CLKOUT AND TX OUTPUTS\nOutput Low Voltage VOL ILOAD  = -2mA 0.4 V\nOutput High Voltage VOH ILOAD  = 2mA VEXT - 0.4 V\nInput Leakage Current IIN Output three-stated, V IN = 0 to V EXT -1 +1 µA\nInput Capacitance CIN_IRSTB High-Z mode 5 pF\nRX, CTS INPUTS\nInput Low Voltage VIL 0.3 x V EXT V\nInput High Voltage VIH 0.7 x V EXT V\nInput Hysteresis VHYST 50 mV\nCTS Input Leakage Current IIN_CTS VIN = 0 to V EXT -1 +1 µA\nRX Pullup Current IIN_RX VIN = 0V 0.3 1.5 3 µA\nInput Capacitance CIN_IUART 5 pF\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 7DC Electrical Characteristics (continued)\n(VA = +2.35V to +3.6V, V L = +1.71V to +3.6V, V EXT = +1.71V to +3.6V, T A = -40°C to +85°C, unless otherwise noted. Typical values \nare at V A = +2.8V, V L = +1.8V, V EXT = +2.5V, T A = +25°C.) (Note 2)(VA = +2.35V to +3.6V, V L = +1.71V to +3.6V, V EXT = +1.71V to +3.6V, T A = -40°C to +85°C, unless otherwise noted. Typical values \nare at V A = +2.8V, V L = +1.8V, V EXT = +2.5V, T A = +25°C.) (Note 2)\nPARAMETER SYMBOL CONDITIONS MIN TYP MAX UNITS\nUART CLOCKING\nExternal Crystal Frequency fXOSC 1 4 MHz\nExternal Clock Frequency fCLK 0.5 35 MHz\nExternal Clock Duty Cycle (Note 3) 45 55 %\nBaud-Rate Generator Clock \nInputfREF (Note 3) 96 MHz\nI2C BUS: TIMING CHARACTERISTICS (see Figure 1)\nSCL Clock Frequency fSCLStandard mode 100\nkHz\nFast mode 400\nBus Free Time Between a STOP \n(P) and START (S) ConditiontBUFStandard mode 4.7\nµs\nFast mode 1.3\nHold Time for START (S) \nCondition and Repeated START \n(Sr) Condition (Note 3)tHD:STAStandard mode 4.0\nµs\nFast mode 0.6\nLow Period of the SCL Clock tLOWStandard mode 4.7\nµs\nFast mode 1.3\nHigh Period of the SCL Clock tHIGHStandard mode 4.0\nµs\nFast mode 0.6PARAMETER SYMBOL CONDITIONS MIN TYP MAX UNITS\nGPIO_ OUTPUTS AND INPUTS\nOutput Low Voltage VOL ILOAD  = -2mA, push-pull or open drain 0.4 V\nOutput High Voltage VOH ILOAD  = 2mA, push-pull VEXT - 0.4 V\nInput Low Voltage VIL Configured as an input 0.4 V\nInput High Voltage VIH Configured as an input 2/3 x V EXT V\nPulldown Current IPD GPIO_ = V EXT 0.25 1 2.5 µA\nInput Capacitance CIN_IUART Configured as an input 5 pF\nXIN\nInput Low Voltage VIL 0.3 V\nInput High Voltage VIH 1.2 VA V\nInput Capacitance CXI 16 pF\nXOUT\nInput Capacitance CXO 16 pF\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 8AC Electrical CharacteristicsDC Electrical Characteristics (continued)\nNote 2:  All devices are production tested at T A = +25°C. Specifications over temperature are guaranteed by design.\nNote 3:  Not production tested. Guaranteed by design.\nNote 4:  When V 18 is powered by an external voltage regulator, the external power supply must have current capability above or \nequal to I 18.\nNote 5:  CB is the total capacitance of either the clock or data line of the synchronous bus in p F.(VA = +2.35V to +3.6V, V L = +1.71V to +3.6V, V EXT = +1.71V to +3.6V, T A = -40°C to +85°C, unless otherwise noted. Typical values \nare at V A = +2.8V, V L = +1.8V, V EXT = +2.5V, T A = +25°C.) (Note 2)\nPARAMETER SYMBOL CONDITIONS MIN TYP MAX UNITS\nData Hold Time tHD:DATStandard mode 0 0.9\nµs\nFast mode 0 0.9\nData Setup Time tSU:DATStandard mode 250\nns\nFast mode 100\nSetup Time for Repeated START \n(Sr) ConditiontSU:STAStandard mode 4.7\nµs\nFast mode 0.6\nRise Time of SDA and SCL \nSignals Receiving tRStandard mode (0.3 x V L to 0.7 x V L)  \n(Note 5)20 + \n0.1C B1000\nns\nFast mode (0.3 x V L to 0.7 x V L) (Note 5)20 + \n0.1C B300\nFall Time of SDA and SCL \nSignals tFStandard mode (0.7 x V L to 0.3 x V L)  \n(Note 5)20 + \n0.1C B300\nns\nFast mode (0.7 x V L to 0.3 x V L) (Note 5)20 + \n0.1C B300\nSetup Time for STOP (P) \nConditiontSU:STOStandard mode 4.7\nµs\nFast mode 0.6\nCapacitive Load for SDA and \nSCL (Note 3)CBStandard mode 400\npF\nFast mode 400\nI/O Capacitance (SCL, SDA) CI/O 10 pF\nPulse Width of Spike  \nSuppressedtSP 50 ns\nSPI BUS: TIMING CHARACTERISTICS (see Figure 2)\nSCLK Clock Period tCH+CL 38.4 ns\nSCLK Pulse-Width High tCH 16 ns\nSCLK Pulse-Width Low tCL 16 ns\nCS Fall to SCLK Rise Time tCSS 0 ns\nDIN Hold Time tDH 3 ns\nDIN Setup Time tDS 5 ns\nOutput Data Propagation Delay tDO 20 ns\nDOUT Rise and Fall Times tFT 10 ns\nCS Hold Time tCSH 32 ns\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 9AC Electrical Characteristics (continued\nFigure 2. SPI Timing DiagramFigure 1. I 2C Timing Diagram\nCS\nSCLK\nDIN\nDOUTtCSHtCSS\ntCL\ntDS\ntDHtCH\ntDOtCSHSDASTART CONDITION\n(S)\nSTART CONDITION\n(S)REPEATED START CONDITION\n(Sr)STOP CONDITION\n(P)\nSCLtHD:STA\ntSU:DAT tSU:STAtHD:DAT tHD:STA tSU:STOtR tF\ntBUF\ntHIGH tLOW tR tF\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 10Test Circuits/Timing Diagrams\n(VA = 2.5V, V L = 2.5V, V EXT = 2.5V, LDOEN = V L, TA = +25°C, unless otherwise noted.)\nGPIO_ OUTPUT LOW VOLTAGE\nvs. SINK CURRENT (OPEN DRAIN)\nMAX3107 toc07\nVOL (V)ISINK (mA)\n2 15101520253035\n0\n0 3VEXT = 3.3V\nVEXT = 2.5VGPIO_ OUTPUT HIGH VOLTAGE\nvs. SOURCE CURRENT (PUSH-PULL)\nMAX3107 toc06\nVOH (V)ISOURCE  (mA)\n3.0 2.5 2.0 1.5 1.0 0.55101520253035\n0\n0 3.5VEXT = 3.3V\nVEXT = 2.5VIA SUPPLY CURRENT\nvs. PLL FREQUENCY\nMAX3107 toc05\nPLL FREQUENCY (MHz)IA (mA)\n2.252.502.753.003.253.503.754.004.254.504.755.005.255.505.75\n2.00\n10 100PLL = x48\nPLL = x96\nPLL = x144IA SUPPLY CURRENT\nvs. TEMPERATURE\nMAX3107 toc04\nTEMPERATURE (°C)IA (µA)\n60 35 10 -1520406080100120140\n0\n-40 85EXTERNAL 3.6MHz CLOCK\nBAUD RATE = 115kbpsVA = 3.3V\nVA = 2.5VIA SUPPLY CURRENT vs. V A VOLTAGE\n(EXTERNAL CRYSTAL, PLL ENABLED)\nMAX3107 toc03\nVA (V)IA (mA)\n3.35 3.10 2.60 2.850.9250.9500.9751.0001.050\n1.0251.0751.100\n0.900\n2.35 3.603.686MHz EXT. CRYSTAL\nBAUD RATE = 115kbps\n6x PLL MULT.FACTORLDOEN = V LLDOEN = AGND\n1.8V APPLIED TO V 18IA SUPPLY CURRENT vs. V A VOLTAGE\n(EXTERNAL CLOCK, PLL ENABLED)\nMAX3107 toc02\nVA (V)IA (mA)\n3.35 3.10 2.85 2.602.22.42.62.83.03.23.43.63.8\n2.0\n2.35 3.60EXTERNAL 614kHz CLOCK\nBAUD RATE = 115kbps\n6x PLL MULT.FACTORLDOEN = V L\nLDOEN = AGND\n1.8V APPLIED TO V 18IA SUPPLY CURRENT vs. V A VOLTAGE\n(EXTERNAL CLOCK, PLL DISABLED)\nMAX3107 toc01\nVA (V)IA (µA)\n3.35 3.10 2.85 2.6020406080100120140\n0\n2.35 3.60EXTERNAL 3.6MHz CLOCK\nBAUD RATE = 115kbps\nLDOEN = V L\nLDOEN = AGND\n1.8V APPLIED TO V 18\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nMaxim Integrated  │ 11\nwww.maximintegrated.comTypical Operating Characteristics\nPIN\nNAME FUNCTION\nTQFN-EP SSOP\n1 4 V18Internal 1.8V LDO Output and 1.8V Logic Supply Input. Bypass V 18 with a 1µF \nceramic capacitor to DGND. Keep V18 powered in shutdown mode.\n2 5 I2C/SPISPI or Active-Low I 2C Selector Input. Drive I2C/SPI high to enable SPI. Drive I2C/SPI \nlow to enable I 2C.\n3 6 LDOENLDO Enable Input. Drive LDOEN high to enable the internal 1.8V LDO. Drive LDOEN \nlow to disable the internal LDO. Power V18 with an external 1.8V supply when \nLDOEN is low.\n4 7 DOUT/SDASerial-Data Output. When I2C/SPI is high, DOUT/SDA functions as the DOUT SPI \nserial-data output. When I2C/SPI is low, DOUT/SDA functions as the SDA I 2C serial-\ndata input/output.\n5 8 SCLK/SCLSerial-Clock Input. When I2C/SPI is high, SCLK/SCL functions as the SCLK SPI serial-\nclock input (up to 26MHz). When I2C/SPI is low, SCLK/SCL functions as the SCL I 2C \nserial-clock input (up to 400kHz).\n6 9 CS/A0Active-Low Chip-Select and Address 0 Input. When I2C/SPI is high, CS/A0 functions \nas the CS SPI active-low chip select. When I2C/SPI is low, CS/A0 functions as the A0 \nI2C device address programming input. Connect CS/A0 to DGND or V L.TQFN\n(3.5mm × 3.5mm)MAX310719\n20\n21\n22\n1 2 3 4 5 618 17 16 15 14 13\n23\n2412\n11\n10\n9\n8\n7TX\nXOUTVEXT\nXIN\nVA +\nV18\nI2C/SPI\nLDOEN\nDOUT/SDA\nSCLK/SCL\nCS/A0RX\nGPIO3\nGPIO2\nGPIO1\nAGND\n*EP\n*CONNECT EP TO AGND.GPIO0\nVLDGND\nRST\nDIN/A1IRQCTSTOP VIEW\n24\n23\n22\n21\n20\n19\n171\n2\n3\n4\n5\n6\n8XOUT\nVEXT\nTX\nRX V18VAAGNDXIN\nMAX3107\nCTS\nGPIO2 SCLK/SCLLDOEN\n18 7 GPIO3 DOUT/SDA\n15 10 GPIO0 DIN/A116 9 GPIO1 CS/A0\n13 12 VL RST14 11 DGND IRQI2C/SPI\nSSOP+\nRTS/CLKOUTRTS/CLKOUT\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 12Pin DescriptionsPin Configurations\nPIN\nNAME FUNCTION\nTQFN-EP SSOP\n7 10 DIN/A1Serial-Data and Address 1 Input. When I2C/SPI is high, DIN/A1 functions as the DIN \nSPI serial-data input. When I2C/SPI is low, DIN/A1 functions as the A1 I 2C device \naddress programming input and connects to DIN/A1 DGND or V L.\n8 11 IRQ Active-Low Interrupt Open-Drain Output. IRQ is asserted when an interrupt is pending.\n9 12 RSTActive-Low Reset Input. Drive RST low to force the UART into hardware reset mode. \nIn hardware reset mode, the oscillator and the internal PLL are shut down; there is no \nclock activity.\n10 13 VLDigital Interface Logic-Level Supply. V L powers the internal logic-level translators for \nRST, IRQ, DIN/A1, CS/A0, SCLK/SCL, DOUT/SDA, LDOEN, and I2C/SPI. Bypass V L \nwith a 0.1µF ceramic capacitor to DGND. V L must be powered in all modes.\n11 14 DGND Digital Ground\n12 15 GPIO0General-Purpose Input/Output 0. GPIO0 is user programmable as an input or output \n(push-pull or open drain). GPIO0 has a weak pulldown resistor to ground.\n13 16 GPIO1General-Purpose Input/Output 1. GPIO1 is user programmable as an input or output \n(push-pull or open drain). GPIO1 has a weak pulldown resistor to ground.\n14 17 GPIO2General-Purpose Input/Output 2. GPIO2 is user programmable as an input or output \n(push-pull or open drain). GPIO2 has a weak pulldown resistor to ground.\n15 18 GPIO3General-Purpose Input/Output 3. GPIO3 is user programmable as an input or output \n(push-pull or open drain). GPIO3 has a weak pulldown resistor to ground.\n16 19 CTS Active-Low Clear-to-Send Input. CTS is a flow-control input.\n17 20 RTS/CLKOUTActive-Low Request-to-Send Output. RTS/CLKOUT can be set high or low by \nprogramming bit 7 ( RTS) of the LCR register.\n18 21 RX Receive Input. Serial UART data input. RX has an internal weak pullup resistor to V EXT.\n19 22 TX Transmit Output. Serial UART data output.\n20 23 VEXTTransceiver Interface Level Supply. V EXT powers the internal logic-level translators \nfor RX, TX, RTS, CTS, and GPIO_. Bypass V EXT with a 0.1µF ceramic capacitor to \nDGND.\n21 24 XOUTCrystal Output. When using an external crystal, connect one end of the crystal to \nXOUT and the other to XIN. When using an external clock source, leave XOUT \nunconnected.\n22 1 XINCrystal/Clock Input. When using an external crystal, connect one end of the crystal to \nXIN and the other one to XOUT. When using an external clock source, drive XIN with \nthe external clock.\n23 2 AGND Analog Ground\n24 3 VAAnalog Supply. V A powers the PLL and internal LDO. Bypass V A with a 0.1µF ceramic \ncapacitor to AGND.\n— — EPExposed Paddle. Connect EP to AGND. EP is not intended as an electrical connection \npoint. Only for TQFN-EP package.\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 13Pin Descriptions (continued)\n*Denotes nonzero default reset value: ISR = 0x60, LCR = 0x05, FIFOTrgLvl = 0xFF, PLLConfig = 0x01, DIVLSB = 0x01, \nCLKSource = 0x08, RevID = 0xA1.\n†Denotes nonread/write value: RHR = R, THR = W, ISR = COR, SpclCharInt = COR, STSInt = R/COR, LSR = R, TxFIFOLvl = R, \nRxFIFOLvl = R, RevID = R.REGISTER ADDR BIT 7 BIT 6 BIT 5 BIT 4 BIT 3 BIT 2 BIT 1 BIT 0\nFIFO DATA\nRHR †* 0x00 RData7 RData6 RData5 RData4 RData3 RData2 RData1 RData0\nTHR† 0x00 TData7 TData6 TData5 TData4 TData3 TData2 TData1 TData0\nINTERRUPTS\nIRQEn 0x01 CTSIEn RxEmtyIEn TxEmtyIEn TxTrgIEn RxTrgIEn STSIEn SpclChrIEn LSRErrIEn\nISR*† 0x02 CTSInt RxEmptyInt TxEmptyInt TFifoTriglnt RFifoTrigInt STSInt SpCharInt LSRErrInt\nLSRIntEn 0x03 — — NoiseIntEn RBreakIEn FrameErrIEn ParityIEn ROverrIEn RTimoutIEn\nLSR*† 0x04 CTSbit — RxNoise RxBreak FrameErr RxParityErr RxOverrun RTimeout\nSpclChrIntEn 0x05 — — MltDrpIntEn BREAKIntEn XOFF2IntEn XOFF1IntEn XON2IntEn XON1IntEn\nSpclCharInt † 0x06 — — MultiDropInt BREAKInt XOFF2Int XOFF1Int XON2Int XON1Int\nSTSIntEn 0x07 — SleepIntEn ClkRdyIntEn — GPI3IntEn GPI2IntEn GPI1IntEn GPI0IntEn\nSTSInt *† 0x08 — SleepInt ClockReady — GPI3Int GPI2Int GPI1Int GPI0Int\nUART MODES\nMODE1 0x09 IRQSel AutoSleep ForcedSleep TrnscvCtrl RTSHiZ TXHiZ TxDisabl RxDisabl\nMODE2 0x0A EchoSuprs MultiDrop Loopback SpecialChr RxEmtyInv RxTrigInv FIFORst RST\nLCR* 0x0B RTS TxBreak ForceParity EvenParity ParityEn StopBits Length1 Length0\nRxTimeOut 0x0C TimOut7 TimOut6 TimOut5 TimOut4 TimOut3 TimOut2 TimOut1 TimOut0\nHDplxDelay 0x0D Setup3 Setup2 Setup1 Setup0 Hold3 Hold2 Hold1 Hold0\nIrDA 0x0E — — TxInv RxInv MIR — SIR IrDAEn\nFIFO CONTROL\nFlowLvl 0x0F Resume3 Resume2 Resume1 Resume0 Halt3 Halt2 Halt1 Halt0\nFIFOTrgLvl * 0x10 RxTrig3 RxTrig2 RxTrig1 RxTrig0 TxTrig3 TxTrig2 TxTrig1 TxTrig0\nTxFIFOLvl † 0x11 TxFL7 TxFL6 TxFL5 TxFL4 TxFL3 TxFL2 TxFL1 TxFL0\nRxFIFOLvl † 0x12 RxFL7 RxFL6 RxFL5 RxFL4 RxFL3 RxFL2 RxFL1 RxFL0\nFLOW CONTROL\nFlowCtrl 0x13 SwFlow3 SwFlow2 SwFlow1 SwFlow0 SwFlowEn GPIAddr AutoCTS AutoRTS\nXON1 0x14 Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nXON2 0x15 Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nXOFF1 0x16 Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nXOFF2 0x17 Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nGPIOs\nGPIOConfg 0x18 GP3OD GP2OD GP1OD GP0OD GP3Out GP2Out GP1Out GP0Out\nGPIOData 0x19 GPI3Dat GPI2Dat GPI1Dat GPI0Dat GPO3Dat GPO2Dat GPO1Dat GPO0Dat\nCLOCK CONFIGURATION\nPLLConfig* 0x1A PLLFactor1 PLLFactor0 PreDiv5 PreDiv4 PreDiv3 PreDiv2 PreDiv1 PreDiv0\nBRGConfig 0x1B — — 4xMode 2xMode FRACT3 FRACT2 FRACT1 FRACT0\nDIVLSB 0x1C Div7 Div6 Div5 Div4 Div3 Div2 Div1 Div0\nDIVMSB 0x1D Div15 Div14 Div13 Div12 Div11 Div10 Div9 Div8\nCLKSource * 0x1E CLKtoRTS — —- ClockEn PLLBypass PLLEn CrystalEn —\nREVISION\nRevID *† 0x1F 1 0 1 0 0 0 0 1\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 14Register Map\n(All default reset values are 0x00, unless otherwise noted. All registers are R/W, unless otherwise noted.)\nMICROWIRE is a registered trademark of National \nSemiconductor Corp.Detailed Description\nThe MAX3107 UART is a bridge between an SPI/\nMICROWIRE ® or I 2C microprocessor bus and an \nasynchronous serial-data communication link, such as \nRS-485, RS-232, or IrDA. The MAX3107 contains an \nadvanced UART, a fractional baud-rate generator, and \nfour GPIOs. The MAX3107 is configured and monitored, \nand data is written and read from 8-bit registers through \nSPI or I 2C. These registers are organized by related \nfunction as shown in the Register Map .\nThe host controller loads data into the Transmit Holding \nregister (THR) through SPI or I 2C. This data is automati -\ncally pushed into the transmit FIFO and sent out at TX. \nThe MAX3107 adds START, STOP, and parity bits to the \ndata and sends the data out at the selected baud rate. \nThe clock configuration registers determine the baud rate, \nclock source selection, and clock frequency prescaling.\nThe receiver in the MAX3107 detects a START bit as a \nhigh-to-low RX transition. An internal clock samples this \ndata. The received data is automatically placed in the \nreceive FIFO and can then be read out of the RxFIFO \nthrough the RHR.\nRegister Set\nThe MAX3107 has a flat register structure without shadow \nregisters. The registers are 8 bits wide. The MAX3107 \nregisters have some similarities to the 16C550 registers. \nReceive and Transmit FIFOs\nThe UART’s receiver and the transmitter each have a \n128-word deep FIFO, reducing the intervals that the host \nprocessor needs to dedicate for high-speed, high-volume \ndata transfer. As the data rates of the asynchronous RX, \nTX interfaces increase and get closer to those of the host \ncontroller’s SPI/I 2C data rates, UART management and \nflow control can make up a significant portion of the host’s \nactivity. By increasing FIFO size, the host is interrupted \nless often and can utilize SPI/I 2C burst data block \ntransfers to/from the FIFOs.\nFIFO trigger levels can generate interrupts to the host \ncontroller, signaling that programmed FIFO fill levels \nhave been reached. The transmitter and receiver trig -\nger levels are programmed through FIFOTrgLvl with a \nresolution of eight FIFO locations. When a receive FIFO \ntrigger is generated, the host knows that the receive \nFIFO has a defined number of words waiting to be read \nout or that a known number of vacant FIFO locations areavailable and ready to be filled. The transmit FIFO trigger \ngenerates an interrupt when the transmit FIFO level is \nabove the programmed trigger level. The host then knows \nto throttle data writing to the transmit FIFO.\nThe host can read out the number of words present in each \nof the FIFOs through the TxFIFOLvl and RxFIFOLvl regis -\nters. Note: The TxFIFOLvl and RxFIFOLvl values can be \nin error. See the TxFIFOLvl register description for details. \nTransmitter Operation\nFigure 3 shows the structure of the transmitter with the \nTxFIFO. The transmit FIFO can hold up to 128 words that \nare written to it through THR.\nThe transmit FIFO can be programmed to generate \nan interrupt when a programmed number of words are \npresent in the TxFIFO through the FIFOTrgLvl register. \nThe TxFIFO interrupt trigger level is selectable through \nFIFOTrgLvl[3:0]. When the transmit FIFO fill level reaches \nthe programmed trigger level, the ISR[4] interrupt is set.\nThe transmit FIFO is empty when ISR[5]: TxEmtyInt is set.  \nISR[5] turns high when the transmitter starts transmit -\nting the last word in the TxFIFO. Hence, the transmitter \nis completely empty after ISR[5] is set with an additional \ndelay equal to the length of a complete character (includ -\ning START, parity, and STOP bits).\nThe contents of the TxFIFO and RxFIFOs are both \ncleared through MODE2[1]: FIFORst. To halt transmis -\nsion, set MODE1[1]: TxDisabl to 1. After MODE1[1] is \nset, the transmitter completes transmission of the current \nFigure 3. Transmit FIFO SignalsCURRENT FILL LEVEL\nTRANSMITTER TXTRANSMIT FIFOFIFOTrgLvl[3:0]TRIGGERISR[4]THRDATA FROM SPI/I2C INTERFACE\n128\n3\n2\n1LEVELTxFIFOLvl\nEMPTYISR[5]\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 15\ncharacter and then ceases transmission. The TX output \nlogic can be inverted through IrDA[5]: TxInv. If not stated \notherwise, all transmitter logic described in this data sheet \nassumes IrDA[5] is 0. Note: Errors in transmitted data can \noccur when the THR is being written to while the transmitter \nis sending data. See the THR register description for details.\nReceiver Operation\nThe receiver expects the format of the data at RX to be \nas shown in Figure 4. The quiescent logic state is a high \nand the first bit (the START bit) is logic-low. The receiver \nsamples the data near the midbit instant (Figure 4). The \nreceived words and their associated errors are deposited \ninto the receive FIFO. Errors and status information are \nstored for every received word (Figure 6). The host reads \ndata out of the receive FIFO through the Receive Holding \nregister (RHR), oldest data first. The status information \nof the word previously read out of the RHR is located in \nthe Line Status register (LSR). After a word is read out of \nthe RHR, the LSR contains the status information for that \nword. Note:  If data is read out of RHR simultaneously \nwhen the receiver is receiving data, errors can occur. See \nthe RHR register description for details.\nThe following three error conditions are determined for \neach received word: parity error, framing error, and noise \non the line. Line noise is detected by checking the con -\nsistency of the logic of the three samples (Figure 5). The \nreceiver can be turned off through MODE1[0]: RxDisabl. When this bit is set to 1, the MAX3107 turns the receiver \noff immediately following the current word and does \nnot receive any further data. The RX input logic can be \ninverted through IrDA[4]: RxInv.\nLine Noise Indication\nWhen operating in standard (i.e., not 2x or 4x rate) mode, \nthe MAX3107 checks that the binary logic level of the \nthree samples per received bit are identical. If any of the \nthree samples have differing logic levels, then noise on the \ntransmission line has affected the received data and is con -\nsidered to be noisy. This noise indication is reflected in the \nLSR[5]: RxNoise bit for each received byte. Parity errors \nare another indication of noise, but are not as sensitive.\nClocking and Baud-Rate Generation\nThe MAX3107 can be clocked by an external crystal or an \nexternal clock source. Figure 7 shows a simplified diagram \nof the clocking circuitry. When the MAX3107 is clocked by \nthe crystal, the STSInt[5]: ClockReady indicates when the \nclocks have settled and the baud-rate generator is ready \nfor stable operation.\nThe baud-rate clock can be routed to the RTS/CLKOUT \noutput. The clock rate is 16x the baud rate in standard \noperating mode, and 8x the baud rate in 2x rate mode. In 4x \nrate mode, the CLKOUT frequency is 4x the programmed \nbaud rate. If the fractional portion of the baud-rate genera -\ntor is used, the clock is not regular and exhibits jitter.Figure 5. Midbit SamplingFigure 4. Receive Data Format\n1RX\nBAUD\nBLOCK2 3 4 5 6 7 8 9ONE BIT PERIOD\n10 11\nMAJORITY\nCENTER\nSAMPLER12 13 14 15 16ARECEIVED DATALSB\nSTART D0 D1 D2 D3 D4 D5 D6 D7 PARITY STOP STOPMSB\nMIDBIT\nSAMPLING\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 16\nCrystal Oscillator\nSet CLKSource[4]: ClockEn to 1 and CLKSource[1]: \nCrystalEn to 1 to enable and select the crystal oscillator. \nThe on-chip crystal oscillator has load capacitances of \n20pF integrated in both XIN and XOUT. Connect an exter -\nnal crystal or ceramic oscillator between XIN and XOUT.External Clock Source\nWhen an external clock signal is used, this should \nbe connected to XIN. Leave XOUT unconnected. \nSet CLKSource[4]: ClockEn to 1 and CLKSource[1]: \nCrystalEn to 0 to select external clocking.\nPLL and Predivider\nThe internal predivider and PLL allow for a wide range \nof external clock frequencies and baud rates. The PLL \ncan be configured to multiply the input clock rate by a \nfactor of 6, 48, 96, or 144 through PLLConfig[7:6]. The \npredivider, located between the input clock and the PLL, \nallows division of the input clock by a factor between 1 \nand 63 by writing to PLLConfig[5:0]. See the PLLConfig \nregister description for more information.\nFractional Baud-Rate Generator\nThe internal fractional baud-rate generator provides a \nhigh degree of flexibility and high resolution in baud-\nrate programming. The baud-rate generator has a 16-bit \ninteger divisor and a 4-bit word for the fractional divisor.  \nThe fractional baud-rate generator can be used with the \nexternal crystal or clock source.\nThe integer and fractional divisors are calculated through \nthe divisor, D:\nREFfD16 BaudRate=×\nwhere f REF is the reference frequency input to the baud-\nrate generator and D is the ideal divisor. f REF must be \nless than 96MHz. In 2x and 4x rate modes, replace the \ndivisor 16 by 8 or 4, respectively.\nThe integer divisor portion, DIV, of the divisor, D, is \nobtained by truncating D:\nDIV = TRUNC(D)\nFigure 7. Clock Selection DiagramFigure 6. Receive FIFO\nCRYSTAL\nOSCILLATORXOUTCrystalEn\nXIN\nBAUD-RATE\nGENERATORClockEn PLLByps\nPLLEnPLL DIVIDERRECEIVE FIFOFIFOTrgLvl[7:4]TRIGGERISR[3]WORD ERROR 128\nRxFIFOLvl\n4\n3\n2\n1\nTIMEOUT\nEMPTY\nERRORSOVERRUNLSR[1]RECEIVED\nDATA\nRHRRECEIVER RX\nI2C/SPI INTERFACE\nLSR[0]\nISR[6]\nLSR[5:2]CURRENT FILL LEVEL\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 17\nDIV can be a maximum of 16 bits wide and is programmed \ninto the 2-byte-wide registers DIVMSB and DIVLSB. The \nminimum allowed for DIVLSB is 1.\nThe fractional portion of the divisor, FRACT, is a 4-bit \nnibble, which is programmed into BRGConfig[3:0]. The \nmaximum value is 15, allowing the divisor to be pro -\ngrammed with a resolution of 0.0625. FRACT is calcu -\nlated as: \nFRACT = ROUND(16 x (D-DIV))\nThe following is an example of calculating the divisor. \nIt is based on a required baud rate of 190kbaud and a \nreference input frequency of 28.23MHz and 1x (default) \nrate mode.\nThe ideal divisor is calculated as:\nD = 28,230,000/(16 x 190,000)\n= 9.2861842105263157894736842105263\nhence DIV = 9.\nFRACT =\nROUND(4.5789473684210526315789473684211) = 5\nso that DIVMSB = 0x00, DIVLSB = 0x09, and \nBRGConfig[3:0] = 0x05.\nThe resulting (actual) baud rate can be calculated as:\nREFACTUAL\nACTUALfBR16 D=×For this example: D ACTUAL  = 9 + 5/16 = 9.3125\nwhere:\nDACTUAL  = DIV + FRACT/16\nand:\nBRACTUAL = 28,230,000/(16 x 9.3125) \n= 189463.0872483221476510067114094 baud\nThus, the baud rate is within 0.28% of the ideal rate.\n2x and 4x Rate Modes\nTo support higher baud rates than possible with standard \n(16x sampling) operation, the MAX3107 offers 2x and 4x \nrate modes. In this case, the reference clock rate only \nneeds to be either 8x or 4x of the baud rate, respec -\ntively. The bits are only sampled once at the midbit instant \ninstead of the usual three samples to determine the logic \nvalue of the bits. This reduces the tolerance to line noise \non the received data. The 2x and 4x modes are selectable \nthrough BRGConfig[5:4]. Note that IrDA encoding and \ndecoding does not operate in 2x and 4x modes.\nWhen 2x rate mode is selected, the actual baud rate \nis twice the rate programmed into the baud-rate gen -\nerator. If 4x rate mode is enabled, the actual baud rate \non the line is quadruple that of programmed baud rate \n(Figure 8).\nFigure 8. 2x and 4x Baud RatesFRACTIONAL\nRATE\nGENERATORfREF BAUD RATEBaudRateConfig[5:4]DIV[LSB]\nDIV[MSB]\nNOTE: IrDA DOES NOT WORK IN 2x AND 4x MODES.FRACT\n1x, 2x, 4x RATE\nMODES\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 18\nMultidrop Mode\nIn multidrop mode, also known as 9-bit mode, the word \nlength is 8 bits and a 9th bit is used for distinguishing \nbetween an address and a data word. Multidrop mode is \nenabled through MODE2[6]: MultiDrop. Parity checking is \ndisabled and an SpclCharInt[5]: MultiDropInt interrupt is \ngenerated when an address (9th bit set) is received.\nIt is up to the host processor to filter out the data intended \nfor its address. Alternatively, the auto data-filtering mode \ncan be used to automatically filter out the data intended \nfor the station’s specific 9-bit mode address.\nAuto Data Filtering in Multidrop Mode\nIn multidrop mode, the MAX3107 can be configured \nto automatically filter out data that is not meant for its \naddress. The address is user-definable either by pro -\ngramming a register value or a combination of a register \nvalues and GPIO hardware inputs. Use either XOFF2 \nor XOFF2[7:4] in combination with GPIO_ to define the \naddress.\nEnable multidrop mode by setting MODE2[6]: MultiDrop \nto 1 and enable auto data filtering by setting MODE2[4]: \nSpecialChr to 1.\nWhen using register bits in combination with GPIO_ to \ndefine the address, the MSB of the address is written to \nXOFF2[7:4] register bits, while the LSBs of the address \nare defined through the GPIOs. To enable this mode, \nset FlowCtrl[2]: GPIAddr, MODE2[4]: SpecialChr, and \nMODE2[6]: MultiDrop to 1. GPIO_ is automatically read \nwhen FlowCtrl[2]: GPIAddr is set to 1, and the address is \nupdated on logic changes at GPIO_.In the auto data-filtering mode, the MAX3107 auto -\nmatically accepts data that is meant for its address and \nplaces this into the receive FIFO, while it discards data \nthat is not meant for its address. The received address \nword is not put into the FIFO.\nAuto Transceiver Direction Control\nIn some half-duplex communication systems, the trans -\nceiver’s transmitter must be turned off when data is being \nreceived so as not to load the bus. This is the case in half-\nduplex RS-485 communication. Similarly in full-duplex \nmultidrop communication, like RS-485 or RS-422/V.11, \nonly one transmitter can be enabled at any one time and \nthe others must be disabled. The MAX3107 can auto -\nmatically enable/disable a transceiver’s transmitter and/\nor receiver. This relieves the host processor of this time-\ncritical task.\nThe RTS/CLKOUT output is used to control the transceiv -\ners’ transmit enable input and is automatically set high \nwhen the MAX3107’s transmitter starts transmission. This \noccurs as soon as data is present in the transmit FIFO. \nAuto transceiver direction control is enabled through \nMODE1[4]: TrnscvCtrl. Figure 9 shows a typical MAX3107 \nconnection in a RS-485 application.\nThe RTS/CLKOUT output can be set high in advance \nof TX transmission by a programmable time period \ncalled the setup time (Figure 10). The setup time is pro -\ngrammed through HDplxDelay[7:4]. Similarly, the RTS/\nCLKOUT signal can be held high for a programmable \nperiod after the transmitter has completed transmission. \nThe hold time is programmed through HDplxDelay[3:0].\nFigure 9. Auto Transceiver Direction ControlMAX3107 MAX13431TRANSMITTERTX\nB\nAD\nRTS/CLKOUT\nRXTxFIFO\nRECEIVERAUTO\nTRANSCEIVER\nCONTROL\nRxFIFODI\nROREDE\nR\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 19\nEcho Suppression\nThe MAX3107 can suppress echoed data, sometimes \nfound in half-duplex communication (e.g., RS-485 and \nIrDA). If the transceiver’s receiver is not turned off \nwhile the transceiver is transmitting, copies (echoes) are \nreceived by the UART. The MAX3107’s receiver can block \nthe reception of this echoed data by enabling echo sup -\npression. Set MODE2[7]: EchoSuprs to 1 to enable echo \nsuppression.\nThe MAX3107 receiver can block echoes with a long \nround trip delay. The transmitter can be configured \nto remain enabled after the end of transmission for a \nprogrammable period of time: the hold time delay. The \nhold time delay is set by the HDplxDelay[3:0] register. \nSee the HDplxDelay description in the Detailed Register \nDescriptions  section for more information.\nAuto transceiver direction control and echo suppression \ncan operate simultaneously.Auto Hardware Flow Control\nThe MAX3107 is capable of auto hardware ( RTS and \nCTS) flow control without the need for host processor \nintervention. When AutoRTS control is enabled, the \nMAX3107 automatically controls the RTS handshake \nwithout the need for host processor intervention. AutoCTS \nflow control separately turns the MAX3107’s transmit -\nter on and off based on the CTS input. AutoRTS and \nAutoCTS flow control are independently enabled through \nFlowCtrl[1:0].\nAutoRTS Control\nAutoRTS flow control ensures that the receive FIFO does \nnot overflow by signaling to the far-end UART to stop \ndata transmission. The MAX3107 does this automati -\ncally by controlling RTS/CLKOUT. AutoRTS flow control \nis enabled through FlowCtrl[0]: AutoRTS. The HALT and \nRESUME levels determine the threshold levels at which \nRTS/CLKOUT is asserted and deasserted. HALT and \nFigure 11. Half-Duplex with Echo SuppressionFigure 10. Setup and Hold Times in Auto Transceiver Direction Control\nMAX3107 MAX13431TRANSMITTERTX\nB\nAD\nRXTxFIFO\nRECEIVERECHO\nSUPPRESSION\nRxFIFODI\nROREDE\nRRTS/CLKOUTTX\nFIRST CHARACTER LAST CHARACTERRTS/CLKOUT\nSETUP\nHOLD\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 20\nRESUME are programmed in FlowLvl. With differing \nHALT and RESUME levels, hysteresis can be defined for \nthe RTS/CLKOUT transitions.\nWhen the RxFIFO fill level reaches the HALT level \n(FlowLvl[3:0]), the MAX3107 deasserts RTS/ CLKOUT. \nRTS/CLKOUT remains deasserted until the RxFIFO is \nemptied and the number of words falls to the RESUME \nlevel.\nInterrupts are not generated when the HALT and \nRESUME levels are reached. This allows the host con -\ntroller to be completely disengaged from RTS flow control \nmanagement. \nAutoCTS Control\nWhen AutoCTS flow control is enabled, the UART auto -\nmatically starts transmitting data when the CTS input is \nlogic-level low and stops transmitting when CTS is logic-\nhigh. This frees the host processor from managing this \ntiming-critical flow-control task. AutoCTS flow control is \nenabled through FlowCtrl[1]: AutoCTS. During AutoCTS \nflow control the CTS interrupt works normally. Set the \nIRQEn[7]: CTSIntEn to 0 to disable CTS interrupts; then \nISR[7]: CTSInt is fixed to logic 0 and the host does not \nreceive interrupts from CTS. If CTS is set high during \ntransmission, the MAX3107 completes transmission of \nthe current word and halts transmission afterwards.Turn the transmitter off by setting MODE1[1] to 1  before \nenabling AutoCTS control.\nAuto Software (XON/XOFF) Flow Control\nWhen auto software flow control is enabled, the MAX3107 \nrecognizes and/or sends predefined XON/XOFF charac -\nters to control the flow of data across the asynchronous \nserial link. Auto flow works autonomously and does not \ninvolve host intervention, similar to auto hardware flow \ncontrol. To reduce the chance of receiving corrupted \ndata that equals a single-byte XON or XOFF character, \nthe MAX3107 allows for double-wide (16-bit) XON/XOFF \ncharacters. XON and XOFF are programmed into the \nXON1, XON2 and XOFF1, XOFF2 registers.\nFlowCtrl[7:3] are used for enabling and configuring \nauto software flow control. An ISR[1] interrupt is gener -\nated when XON or XOFF are received and details are \nfound in SpclCharInt. The IRQ can be masked by setting \nIRQEn[1]: SpclChrIEn to 0.\nSoftware flow control consists of transmitter control and \nreceiver overflow control, which can operate indepen -\ndently of each other.Figure 12. Echo Suppression TimingTX\nRXDI TO RO PROPAGATION DELAYHOLD DELAY STOP\nBIT\nRTS/CLKOUT\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 21\nTransmitter Flow Control\nIf auto transmitter control (FlowCtrl[5:4]) is enabled, the \nreceiver compares all received words with the XOFF and \nXON characters. If a XOFF is received, the MAX3107 \nhalts its transmitter from sending further data. The \nreceiver is not affected and continues reception. Upon \nreceiving an XON, the transmitter restarts sending data. \nThe received XON and XOFF characters are filtered out \nand are not put into the receive FIFO, as they do not have \nsignificance to the higher layer protocol. An interrupt is not \ngenerated.\nTurn the transmitter off (MODE1[1]) before enabling trans -\nmitter control.\nReceiver Flow Control\nIf auto receiver overflow control (FlowCtrl[7:6]) is enabled, \nthe MAX3107 automatically sends XOFF and XON con -\ntrol characters to the far-end UART to avoid receiver \noverflow. XOFF1/XOFF2 are sent when the receive FIFO \nfill level reaches the HALT value set in the FlowLvl regis -\nter. When the host controller reads data from the Receive \nFIFO to a level equal to the RESUME level programmed \ninto the FlowLvl register, XON1/XON2 are automati -\ncally sent to the far-end station to signal it to resume data \ntransmission.\nIf dual-character (XON1 and XON2/XOFF1 and XOFF2) \nflow control is selected, XON1/XOFF1 are transmitted \nbefore XON2/XOFF2.\nFIFO Interrupt Triggering\nReceive and transmit FIFO fill-dependent interrupts are \ngenerated if FIFO trigger levels are defined. When the \nnumber of words in the FIFOs reach or exceed a trigger \nlevel, as programmed in FIFOTrgLvl, an ISR[3] or ISR[4] \ninterrupt is generated. There is no relationship between \nthe trigger levels and the HALT or RESUME levels. \nThe FIFO trigger level can, for example, be used for a \nblock data transfer, since it gives the host an indication \nwhen a given block size of data is available for readout in \nthe receive FIFO or available for transfer to the transmit \nFIFO.\nLow-Power Standby Modes\nThe sleep and shutdown modes reduce power con -\nsumption during periods of inactivity. In both sleep and \nshutdown modes, the UART disables specific functional \nblocks to reduce power consumption.\nForced Sleep Mode\nIn forced sleep mode, all UART-related on-chip clocking is \nstopped. The following are inactive: the crystal oscillator, \nthe PLL, the predivider, the receiver, and the transmitter. \nThe SPI/I 2C interface and the registers remain active.Thus, the host controller can access the resisters. To \nenter sleep mode, set MODE1[5] to 1. To wake up, set \nMODE1[5] to 0.\nAutosleep Mode\nThe MAX3107 can be configured to operate in autosleep \nmode by setting MODE1[6] to 1. In autosleep mode, the \nMAX3107 automatically enters sleep mode when all the \nfollowing conditions are met:\n ●Both FIFOs are empty.\n ●There are no pending IRQ interrupts.\n ●There is no activity on any input pins for a period \nequal to 65,536 UART characters lengths.\nThe MAX3107 exits autosleep mode as soon as activity is \ndetected on any of the GPIO_, RX, or CTS inputs.\nTo manually wake up the MAX3107, set MODE1[6] to \n0. After wake-up is initiated, the internal clock starts up \nand a period of time is needed for clock stabilization. The \nSTSInt[5]: ClockReady bit indicates when the clocks are \nstable. If an external clock source is used, the STSInt[5] \nbit does not indicate clock stability.\nShutdown Mode\nShutdown mode is the lowest power consumption mode. \nIn shutdown mode, all the MAX3107 circuitry is off. This \nincludes the I 2C/SPI interface, the registers, the FIFOs, \nand clocking circuitry. The LDO is kept on. To enter shut -\ndown mode, connect RST to DGND.\nWhen the RST input is toggled high, the MAX3107 exits \nshutdown mode. When the MAX3107 sets IRQ to logic-\nhigh, the chip initialization is completed. The MAX3107 \nneeds to be reprogrammed following a shutdown. Keep \nV18 powered by the internal LDO or an external 1.8V \nsupply during shutdown.\nPower-Up and IRQ\nIRQ has two functions. During normal operation (MODE1[7] \nis 1), IRQ operates as a hardware interrupt output, where -\nby the IRQ is active when an interrupt is pending. An IRQ \ninterrupt is only produced during normal operation, if at \nleast one of the IRQEn interrupt enable bits are enabled.\nDuring power-up or following a reset, IRQ has a differ -\nent function. It is held low until the MAX3107 is ready for \nprogramming following an initialization delay. Once IRQ \ngoes high, the MAX3107 is ready to be programmed. \nThe MODE1[7]: IRQSel bit should then be set in order to \nenable normal IRQ interrupt operation.\nIn polled mode, the RevID register can be polled to \ncheck whether the MAX3107 is ready for operation. If \nthe controller gets a valid response from RevID, then the \nMAX3107 is ready for operation.\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 22\nBits 7–0: RData[7:0]\nThe RHR is the bottom of the receive FIFO and is the register used for reading data out of the receive FIFO. It contains the oldest \n(first received) character in the receive FIFO. RHR[0] is the first data bit of the serial-data word received by the receiver at the RX \npin. Note that the data read out of RHR can be in error. This occurs when the UART receiver is receiving a character at the same \ntime as a value is being read out of RHR and the FIFO level counter is being updated. In the event of this error condition, the \nresult is that a character is read out twice from the RHR. To avoid this, the receiver should not be receiving data while the RHR \nis being read out. This can be achieved via flow control, or prior knowledge of the amount of data that is expected to be received.\nBits 7–0: TData[7:0]Interrupt Structure\nThe structure of the interrupt is shown in Figure 13. There \nare four interrupt source registers: ISR, LSR, STSInt, \nand SpclCharInt. The interrupt sources are divided into \ntop-level and low-level interrupts. The top-level interrupts \ntypically occur more often and can be read out directly \nthrough the ISR. The low-level interrupts typically occur \nless often and their specific source can be read out \nthrough the LSR, STSInt, or SpclChar registers. The three \nLSBs of the ISR point to the low-level interrupt registers \nthat contain the source detail of the interrupt source.\nInterrupt Enabling\nEvery interrupt bit of the four interrupt registers can \nbe enabled or masked through an associated interrupt enable register bit. These are the IRQEn, LSRIntEn, \nSpclChrIntEn and STSIntEn registers.\nInterrupt Clearing\nWhen an ISR interrupt is pending (i.e., any bit in ISR is \nset) and the ISR is subsequently read, the ISR bits and \nIRQ are cleared. Both the SpclCharInt and the STSInt \nregisters also are clear on read (COR). The LSR bits are \nonly cleared when the source of the interrupt is removed, \nnot when LSR is read.\nDetailed Register Descriptions\nThe MAX3107 has a flat register structure, without shad -\now registers, that makes programming and code simple \nand efficient. All registers are 8 bits wide.\nFigure 13. Simplified Interrupt StructureADDRESS: 0x00\nMODE: R\nBIT 7 6 5 4 3 2 1 0\nNAME RData7 RData6 RData5 RData4 RData3 RData2 RData1 RData0\nRESET X X X X X X X X\n7 6 5 4 3 2 1 0ISR8[7]IRQPOWER-UP DONEMODE1[7]: IRQSel\n[0]\nLOW-LEVEL INTERRUPTSTOP-LEVEL INTERRUPTS\n7 6 5 4 3 2 1 0SpclChrInt8\n7 6 5 4 3 2 1 0STSInt8\n7 6 5 4 3 2 1 0LSR8\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 23RHR—Receiver Hold Register\nThe THR is the register that the host controller writes data to for subsequent UART transmission. This data is deposited \nin the transmit FIFO. THR[0] is the LSB. It is the first data bit of the serial-data word that the transmitter sends out, right \nafter the START bit. Note that an error can occur in the TxFIFO when a character is written into THR at the same time \nas the transmitter is transmitting out data via TX. In the event of this error condition, the result is that the character will \nnot be transmitted. To avoid this, stop the transmitter when writing data to the THR. This can be done via the TxDisable \nbit in the MODE1 register.  \nThe IRQEn is used to enable the IRQ physical interrupt. Any of the eight ISR interrupt sources can be enabled to gener -\nate an IRQ. The IRQEn bits only influence the IRQ output and do not have any effect on the ISR contents or behavior. \nEvery one of the IRQEn bits operates on an ISR bit.\nBit 7: CTSIEn\nThe CTSIEn bit enables IRQ interrupt generation when the CTSInt interrupt bit is set in the ISR. Set CTSIEn bit low to \ndisable IRQ generation from CTSInt.\nBit 6: RxEmtyIEn\nThe RxEmtyIEn bit enables IRQ interrupt generation when the RxEmtyInt interrupt bit is set in the ISR. Set RxEmtyIEn \nbit low to disable IRQ generation from RxEmtyInt.\nBit 5: TxEmtyIEn\nThe TxEmtyIEn bit enables IRQ interrupt generation when the TxEmptyInt interrupt bit is set in the ISR. Set TxEmtyIEn \nbit low to disable IRQ generation from TxEmptyInt.\nBit 4: TxTrgIEn\nThe TxTrgIEn bit enables IRQ interrupt generation when the TFifoTrigInt interrupt bit is set in the ISR. Set TxTrgIEn bit \nlow to disable IRQ generation from TFifoTrigInt.\nBit 3: RxTrgIEn\nThe RxTrgIEn bit enables IRQ interrupt generation when the RFifoTrigInt interrupt bit is set in the ISR. Set RxTrgIEn bit \nlow to disable IRQ generation from RFifoTrigInt.\nBit 2: STSIEn\nThe STSIEn bit enables IRQ interrupt generation when the STSInt interrupt bit is set in the ISR. Set STSIEn bit low to \ndisable IRQ generation from STSInt.\nBit 1: SpclChrlEn\nThe SpclChrIEn bit enables IRQ interrupt generation when the SpCharInt interrupt bit is set in the ISR. Set SpclChrIEn \nbit low to disable IRQ generation from SpCharInt.\nBit 0: LSRErrlEnADDRESS: 0x01\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME CTSIEn RxEmtyIEn TxEmtyIEn TxTrgIEn RxTrgIEn STSIEn SpclChrIEn LSRErrIEn\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x00\nMODE: W\nBIT 7 6 5 4 3 2 1 0\nNAME TData7 TData6 TData5 TData4 TData3 TData2 TData1 TData0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 24IRQEn—IRQ Enable RegisterTHR—Transmit Hold Register\nThe LSRErrIEn bit enables IRQ interrupt generation when the LSRErrInt interrupt bit is set in the ISR[0]. Set LSRErrIEn \nlow to disable IRQ generation from LSRErrInt.\nThe ISR provides an overview of all interrupts generated in the MAX3107. These interrupts are cleared on reading the \nISR. When the MAX3107 is operated in polled mode, the ISR can be polled to establish the UART’s status. In interrupt-\ndriven mode, IRQ interrupts are enabled through the appropriate IRQEn bits. The ISR contents give direct information \non the cause for the interrupt or point to other registers that contain more detailed information.\nBit 7: CTSInt\nThe CTSInt is set when a logic state transition occurs at the CTS input. This bit is cleared after ISR is read. The current \nlogic state of the CTS input can be read out through the LSR[7]: CTSbit.\nBit 6: RxEmptyInt\nThe RxEmptyInt is set when the receive FIFO is empty. This bit is cleared after ISR is read. Its meaning can be inverted \nby setting the MODE2[3]: RxEmtyInv bit.\nBit 5: TxEmptyInt\nThe TxEmptyInt bit is set when the transmit FIFO is empty. This bit is cleared once ISR is read.\nBit 4: TFifoTriglnt\nThe TFifoTrigInt bit is set when the number of characters in the transmit FIFO is equal to or greater than the transmit \nFIFO trigger level defined in FIFOTrgLvl[3:0]. TFifoTrigInt is cleared when the transmit FIFO level falls below the trigger \nlevel or after the ISR is read. It can be used as a warning that the transmit FIFO is nearing overflow.\nBit 3: RFifoTriglnt\nThe RFifoTrigInt bit is set when the receive FIFO fill level reaches the receive FIFO trigger level, as defined in the \nFIFOTrgLvl[7:4]. This can be used as an indication that the receive FIFO is nearing overrun. It can also be used to report \nthat a known number of words are available which can be read out in one block. The meaning of RFifoTrigInt can be \ninverted through MODE2[2]. RFifoTrigInt is cleared when ISR is read.\nBit 2: STSInt\nThe STSInt bit is set high when any bit in the STSInt register that is enabled through a STSIntEn bit is high. The STSInt \nbit is cleared on reading ISR.\nBit 1: SpCharlnt\nThe SpCharInt bit is set high when a special character is received, a line BREAK is detected, or an address character is \nreceived in multidrop mode. The cause for the SpCharInt interrupt can be read from the SpclCharInt register, if enabled \nthrough the SpclChrIntEn bits. The SpCharInt interrupt is cleared when the ISR is read.\nBit 0: LSRErrlnt\nThe LSRErrInt bit is set high when any LSR bits, which are enabled through the LSRIntEn, are set. This bit is cleared \nafter the ISR is read.ADDRESS: 0x02\nMODE: COR\nBIT 7 6 5 4 3 2 1 0\nNAME CTSInt RxEmptyInt TxEmptyInt TFifoTrigInt RFifoTrigInt STSInt SpCharInt LSRErrInt\nRESET 0 1 1 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 25ISR—Interrupt Status Register\nThe LSRIntEn allows routing of LSR interrupt bits to the ISR[0].\nBits 7 and 6: No Function\nBit 5: NoiseIntEn\nSet the NoiseIntEn bit high to enable routing the RxNoise interrupt to LSR[0]. If NoiseIntEn is set low, RxNoise is not \nrouted to LSR[0].\nBit 4: RBreaklEn\nSet the RBreakIEn bit high to enable routing the RxBreak interrupt to LSR[0]. If RBreakIEn is set low, RxBreak is not \nrouted to LSR[0].\nBit 3: FrameErrlEn\nSet the FrameErrIEn bit high to enable routing the FrameErr interrupt to LSR[0]. If FrameErrIEn is set low, FrameErr is \nnot routed to LSR[0].\nBit 2: ParitylEn\nSet the ParityIEn bit high to enable routing the RxParityErr interrupt to LSR[0]. If ParityIEn is set low, RxParityErr is not \nrouted to the LSR[0].\nBit 1: ROverrlEN\nSet the ROverrIEn bit high to enable routing the RxOverrun interrupt to LSR[0]. If ROverrIEn is set low, RxOverrun is not \nrouted to LSR[0].\nBit 0: RTimoutlEn\nSet the RTimoutIEn bit high to enabled routing the RTimeout interrupt to LSR[0]. If RTimoutIEn is set low, the RTimeout \nis not routed to LSR[0].ADDRESS: 0x03\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME — — NoiseIntEn RBreakIEn FrameErrIEn ParityIEn ROverrIEn RTimoutIEn\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 26LSRIntEn—Line Status Register Interrupt Enable\nThe LSR shows all errors related to the word previously read out of the RxFIFO. The LSR bits are not cleared upon a \nread; these bits stay set until the character with errors is read out of the RHR. The LSR also reflects the current state \nof the CTS input.\nBit 7: CTSbit \nThe CTSbit reflects the current logic state of the CTS input. This bit is cleared when the CTS input is low. Following a \npower-up or reset, the logic state of the CTS bit depends on the CTS input.\nBit 6: No Function\nBit 5: RxNoise\nIf noise is detected on the RX input during reception of a character, the RxNoise bit is set for that character. The RxNoise \nbit indicates that there was noise on the line while the character most recently read from the RHR was received. The \nRxNoise flag can generate an ISR[0] interrupt, if enabled through LSRIntEn[5].\nBit 4: RxBreak\nIf a line BREAK (RX input low for a period longer than the programmed character duration) is detected, a BREAK \ncharacter is put in the RxFIFO and the RxBreak bit is set for this character. A BREAK character is represented by an all-\nzeros data character. The RxBreak bit distinguishes a regular character with all zeros from a BREAK character. LSR[4] \ncorresponds to the character most recently read from the RHR. The RxBreak flag can generate an ISR[0] interrupt, if \nenabled through LSRIntEn[4].\nBit 3: FrameErr\nThe FrameErr bit is set high when the received data frame does not match the expected frame format in length. \nFrameErr corresponds to the frame error of the character most recently read from the RHR. A frame error is related to \nerrors in expected STOP bits.\nThe FrameErr flag can generate an ISR[0] interrupt, if enabled, through LSRIntEn[3].\nBit 2: RxParityErr\nIf the parity computed on the character being received does not match the received character’s parity bit, the RxParityErr \nbit is set for that character. RxParityErr indicates a parity error for the word most recently read from the RHR. \nIn 9-bit multidrop mode (MODE2[6] = 1) the receiver does not check parity and the RxParityErr represents the 9th (i.e., \naddress or data) bit.\nThe RxParityErr flag can generate an ISR[0] interrupt, if enabled through LSRIntEn[2].\nBit 1: RxOverrun\nIf the receive FIFO is full and additional data is received that does not fit into the receive FIFO, the RxOverrun bit is set. \nThe receive FIFO retains the data in it and discards all new data that does not fit into it. The RxOverrun indication is \ncleared after the LSR is read or the RxFIFO level falls below its maximum. The RxOverrun flag can generate an ISR[0] \ninterrupt, if enabled through LSRIntEn[1].ADDRESS: 0x04\nMODE: R\nBIT 7 6 5 4 3 2 1 0\nNAME CTSbit — RxNoise RxBreak FrameErr RxParityErr RxOverrun RTimeout\nRESET X 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 27LSR—Line Status Register\nBit 0: RTimeout\nThe RTimeout bit indicates that stale data is present in the receive FIFO. RTimeout is set when the youngest character \nresides in the RxFIFO for longer than the period programmed into the RxTimeOut register. The timeout counter restarts \nwhen at least one character is read out of the RxFIFO or a new character is received by the RxFIFO. If the value in \nRxTimeOut is zero, RTimeout is disabled. RTimeout is cleared when a word is read out of the RxFIFO or a new word is \nreceived. The RTimeout flag can generate an ISR[0] interrupt, if enabled through LSRIntEn[0].\nBits 7 and 6: No Function\nBit 5: MltDrpIntEn\nThe MltDrpIntEn bit enables routing the SpclCharInt[5]: MultiDropInt interrupt to ISR[1]. If MltDrpIntEn is set low (default), \nthe MultiDropInt is not routed to the ISR[1].\nBit 4: BREAKIntEn\nThe BREAKIntEn bit enables routing the SpclCharInt[4]: BREAKInt interrupt to ISR[1]. If BREAKIntEn is set low (default), \nthe BREAKInt is not routed to the ISR[1].\nBit 3: XOFF2IntE\nThe XOFF2IntEn bit enables routing the SpclCharInt[3]: XOFF2Int interrupt to ISR[1]. If XOFF2IntEn is set low (default), \nthe XOFF2Int is not routed to the ISR[1].\nBit 2: XOFF1IntEn\nThe XOFF1IntEn bit enables routing the SpclCharInt[2]: XOFF1Int interrupt to ISR[1]. If XOFF1IntEn is set low (default), \nthe XOFF1Int is not routed to the ISR[1].\nBit 1: XON2IntEn\nThe XON2IntEn bit enables routing the SpclCharInt[1]: XON2Int interrupt to ISR[1]. If XON2IntEn is set low (default), the \nXON2Int is not routed to the ISR[1].\nBit 0: XON1IntEn\nThe XON1IntEn bit enables routing the SpclCharInt[0]: XON1Int interrupt to ISR[1]. If XON1IntEn is set low (default), the \nXON1Int is not routed to the ISR[1].ADDRESS: 0x05\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME — — MltDrpIntEn BREAKIntEn XOFF2IntEn XOFF1IntEn XON2IntEn XON1IntEn\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 28SpclChrIntEn—Special Character Interrupt Enable Register\nBits 7 and 6: No Function\nBit 5: MultiDropInt\nThe MultiDropInt interrupt is set when the MAX3107 receives an address character in 9-bit multidrop mode (MODE2[6] is \n1). This bit is cleared when SpclCharInt is read. The SpclCharInt bit can be routed to ISR[1] by enabling SpclChrIntEn[5].\nBit 4: BREAKInt\nThe BreakInt interrupt is set when a line BREAK (RX low for longer than one character length) is detected by the receiver. \nThis bit is cleared after SpclCharInt is read. The BREAKInt interrupt can be routed to ISR[1] by enabling SpclChrIntEn[4].\nBit 3: XOFF2Int\nThe XOFF2Int interrupt bit is set when an XOFF2 special character is received and special character detection is \nenabled, through MODE2[4]. This interrupt is cleared upon reading SpclCharInt. The XOFF2Int interrupt can be routed \nto the ISR[1] interrupt bit, if enabled through SpclChrIntEn[3].\nBit 2: XOFF1Int\nThe XOFF1Int interrupt bit is set when an XOFF1 special character is received and special character detection is \nenabled, through MODE2[4]. This interrupt is cleared upon reading SpclCharInt. The XOFF1Int interrupt can be routed \nto the ISR[1] interrupt bit, if enabled through SpclChrIntEn[2].\nBit 1: XON2Int\nThe XON2Int interrupt bit is set when an XON2 special character is received and special character detection is enabled, \nthrough MODE2[4]. This interrupt is cleared upon reading SpclCharInt. The XON2Int interrupt can be routed to the ISR[1] \ninterrupt bit, if enabled through SpclChrIntEn[1].\nBit 0: XON1Int\nThe XON1Int interrupt bit is set when an XON1 special character is received and special character detection is enabled, \nthrough MODE2[4]. This interrupt is cleared upon reading SpclCharInt. The XON1Int interrupt can be routed to the ISR[1] \ninterrupt bit, if enabled through SpclChrIntEn[0].ADDRESS: 0x06\nMODE: COR\nBIT 7 6 5 4 3 2 1 0\nNAME — — MultiDropInt BREAKInt XOFF2Int XOFF1Int XON2Int XON1Int\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 29SpclCharInt—Special Character Interrupt Register\nBits 7 and 4: No Function\nBit 6: SleepIntEn\nSet the SleepIntEn bit high to route the SleepInt status bit to the ISR[2]: STSInt. If set low, the STSIntEn masks the ISR[2] \nbit from SleepInt.\nBit 5: ClkRdyIntEn\nSet the ClkRdyIntEn bit high to route the ClockReady status bit to the ISR[2]: STSInt bit. If set low, the ClkRdyIntEn \nmasks the ISR[2] bit from the ClockReady status.\nBits 3–0: GPI[3:0]IntEn\nThe GPI[3:0]IntEn bits that are set high route the associated STSInt[3:0]: GPI[3:0]Int bits to the ISR[2] interrupt. GPI[3:0]\nIntEn bits that are set low, mask the ISR[2] interrupt from the associated GPI[3:0]Int bit.\nBits 7 and 4: No Function\nBit 6: SleepInt\nThe SleepInt bit is set when the MAX3107 enters sleep mode. The SleepInt bit is cleared when the MAX3107 exits sleep \nmode. This status bit is cleared when the clock is disabled and cannot be cleared upon reading. The SleepInt bit can \ngenerate an ISR[2]: STSInt interrupt, if enabled through STSIntEn[6].\nBit 5: ClockReady\nThe ClockReady bit is set high when the clock, the divider, and the PLL have settled, and the MAX3107 is ready for data \ncommunication. The ClockReady bit only works with the crystal oscillator. It does not work with external clocking through \nXIN.\nThe ClockReady status bit is cleared when the clock is disabled and is not cleared upon read. This bit can generate an \nISR[2]: STSInt interrupt, if enabled through STSIntEn[5].\nBits 3–0: GPI[3:0]Int\nThe GPI[3:0]Int interrupts are set high when a change of logic state occurs on the associated GPIO_ input. GPI[3:0]Int \nis cleared upon reading. These interrupts can be selectively routed to the ISR[2] interrupt bit through the STSIntEn[3:0].ADDRESS: 0x08\nMODE: R/COR\nBIT 7 6 5 4 3 2 1 0\nNAME — SleepInt ClockReady — GPI3Int GPI2Int GPI1Int GPI0Int\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x07\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME — SleepIntEn ClkRdyIntEn — GPI3IntEn GPI2IntEn GPI1IntEn GPI0IntEn\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 30STSInt—Status Interrupt RegisterSTSIntEn—STS Interrupt Enable Register\nBit 7: IRQSel\nDepending on the logic level of the IRQSel bit, IRQ has different meanings. After a hardware or software (MODE2[0]) \nreset, the IRQSel bit is set low and after a short delay, the IRQ output signals the end of the MAX3107’s power-up \nsequence. The IRQ is low during power-up and transitions to high when the MAX3107 is ready to be programmed.\nIRQSel can then be set high. In this case, IRQ becomes a regular interrupt output that signals pending interrupts, as \nindicated in the ISR. Details of the IRQSel are described in the Power-Up and IRQ section.\nBit 6: AutoSleep\nSet the AutoSleep bit high to set the MAX3107 to automatically enter low-power sleep mode after a period of no activ -\nity (see the Autosleep Mode  section). A STSInt[6]: SleepInt interrupt is generated when the MAX3107 goes to sleep or \nwakes up.\nBit 5: ForcedSleep\nSet the ForcedSleep bit high to force the MAX3107 into low-power sleep mode (see the Sleep Mode  section). The current \nsleep or wake state can be read out through this ForcedSleep bit, even when the UART is in sleep mode.\nBit 4: TrnscvCtrl\nThis bit enables the automatic transceiver direction control. Set TrnscvCtrl high so that RTS/CLKOUT automatically con -\ntrols the transceiver’s transmit/receive enable/disable inputs. Setting TrnscvCtrl high sets RTS/CLKOUT low so that the \ntransceiver is in receive mode. When the TxFIFO contains data available for transmission, the auto direction control sets \nRTS/CLKOUT high before the transmitter sends out the data. When the transmitter is empty, RTS/CLKOUT is automati -\ncally forced low again.\nSetup and hold times of RTS/CLKOUT with respect to the TX output can be defined through the HDplxDelay register. A \ntransmitter empty interrupt ISR[5] is generated when the transmitter is empty.\nBit 3: RTSHiZ\nSet the RTSHiZ bit high to three-state RTS/CLKOUT.\nBit 2: TxHiZ\nSet the TxHiz bit high to three-state the TX output.\nBit 1: TxDisabl\nSet the TxDisabl bit high to disable transmission. If the TxDisabl bit is set high during transmission, the transmitter com -\npletes sending out the current character and then ceases transmission. Data still present in the transmit FIFO remains \nin the TxFIFO. The TX output is set to logic-high after transmission.\nBit 0: RxDisabl\nSet the RxDisabl bit high to disable the receiver so that the receiver stops receiving data. All data present in the receive \nFIFO remains in the RxFIFO.ADDRESS: 0x09\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME IRQSel AutoSleep ForcedSleep TrnscvCtrl RTSHiZ TxHiZ TxDisabl RxDisabl\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 31MODE1 Register\nBit 7: EchoSuprs\nSet the EchoSuprs bit high so that the MAX3107’s receiver gates any data it receives when its transmitter is busy \ntransmitting. In half-duplex communication (like IrDA and RS-485) this allows blocking of the locally echoed data. The \nreceiver can block data for an extended time after the transmitter ceases transmission by programming a hold time in \nHDplxDelay[3:0] bits.\nBit 6: MultiDrop\nSet the MultiDrop bit high to enable the 9-bit multidrop mode. If this bit is set, parity checking is not performed by the \nreceiver and parity generation is not done by the transmitter. The parity error bit, LSR[2], has a different meaning in this \ncase. The parity error bit represents the 9th bit (address/data indication) that is received with each 9-bit character.\nBit 5: Loopback\nSet the Loopback bit high to enable internal local loopback mode. This internally connects TX to RX and also RTS/\nCLKOUT to CTS. In local loopback mode, the TX output and the RX output are disconnected from the internal transmit -\nter and receiver. The TX output is in three-state. The RTS output remains connected to the internal logic and reflects the \nlogic state programmed in LCR[7]. The CTS input is disconnected from RTS and the internal logic. CTS thus remains in \na high-impedance state.\nBit 4: SpecialChr\nThe SpecialChr bit enables special character detection. The receiver can detect up to four special characters, as selected \nin FlowCtrl:[5:4] and defined in the XON1, XON2, XOFF1 and/or XOFF2 registers, possibly in combination with GPIO_ \ninputs, enabled through FlowCtrl[2]: GPIAddr. When a special character is received it is put into the RxFIFO and a special \ncharacter detect interrupt ISR[1] is generated.\nSpecial character detection can be used in addition to auto XON/XOFF flow control, if enabled through FlowCtrl[3]. In \nthis case XON/OFF flow control is then limited to single character XON and XOFF and only two special characters can \nthen be defined (in XON2 and XOFF2).\nBit 3: RxEmtyInv\nThe RxEmtyInv bit inverts the meaning of the receiver empty interrupt: ISR[6]: RxEmtyInt. If RxEmtyInv is set low (default \nstate), the ISR[6] interrupt is generated when the receive FIFO is empty. If the RxEmtyInv is set high, the ISR[6] interrupt \nis generated when data is put into the empty receive FIFO.\nBit 2: RxTrigInv\nThe RxTrigInv bit inverts the meaning of the RxFIFO triggering. When set, an ISR[3]: RFifoTrigInt is generated when \nthe RxFIFO is emptied to the trigger level: FIFOTrgLvl[7:4]. If the RxTrgInv bit is low (default state), the ISR[3] interrupt \nis generated when the RxFIFO fill level that starts from a level below FIFOTrgLvl[7:4] is filled up to the trigger level pro -\ngrammed into FIFOTrgLvl[7:4].\nBit 1: FIFORst\nSet the FIFORst bit high to clear both the receive and transmit FIFOs of all data contents. After the FIFO reset, the \nFIFORst bit must then be set back to 0 to continue normal operation.\nBit 0: RST\nSet the RST bit high to reset the MAX3107. The SPI/I 2C bus stays active during this reset, therefore, communication with \nthe MAX3107 is possible. All register bits are reset to their reset state and all FIFOs are cleared.\nOnce set high, the RST bit must be cleared by writing a 0 to RST.ADDRESS: 0x0A\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME EchoSuprs MultiDrop Loopback SpecialChr RxEmtyInv RxTrigInv FIFORst RST\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 32MODE2 Register\nBit 7: RTS\nThe RTS bit gives direct control of the RTS/CLKOUT output logic. If the RTS bit is set high, then RTS/CLKOUT is set to \nlogic-high. The RTS bit only works if the CLKSource[7]:CLKtoRTS is not set high.\nBit 6: TxBreak\nSet TxBreak to 1 to generate a line break whereby the TX output is held low until TxBreak is set to 0.\nBit 5: ForceParity\nForceParity enables forced parity, as used in 9-bit multidrop communication. Set both LCR[3] and ForceParity to use \nforced parity. The parity bit is forced high by the transmitter if LCR[4] low. The parity bit is forced low if LCR[4] is high.\nBit 4: EvenParity\nSet EvenParity high to enable even parity. If EvenParity is set low odd parity generation/checking is used.\nBit 3: ParityEn\nThe ParityEn bit enables the use of a parity bit on the TX and RX interfaces. When ParityEn is low, then parity usage is \ndisabled. When ParityEn is set to 1, the transmitter generates the parity bit as defined in LCR[4] and the receiver checks \nthe received parity bit.\nBit 2: StopBits\nThis defines the number of STOP bits and depends on the length of the word programmed in LCR[1:0] (Table 1). When \nStopBits is high and the word length is 5, the transmitter generates a word with a STOP bit length equal to 1.5. Under \nthese conditions, the receiver recognizes a STOP bit length greater than a 1-bit duration.\nBits 1 and 0: Length[1:0]\nThe Length[1:0] bits configure the length of the words that the transmitter generates and the receiver checks for at the \nasynchronous TX and RX interfaces (Table 2).\nTable 2. Length[1:0] Truth Table Table 1. StopBits Truth Table\nLength1 Length0 WORD LENGTH\n0 0 5\n0 1 6\n1 0 7\n1 1 8LCR[2] WORD LENGTH STOP BIT LENGTH\n0 5, 6, 7, 8 1\n1 5 1–1.5\n1 6, 7, 8 2ADDRESS: 0x0B\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME RTS TxBreak ForceParity EvenParity ParityEn StopBits Length1 Length0\nRESET 0 0 0 0 0 1 0 1\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 33LCR—Line Control Register\nBits 7–0: TimOut[7:0]\nThe receive data timeout bits allow programming a time delay after the last (newest) character in the receive FIFO was \nreceived until a receive data timeout LSR[0] interrupt is generated. The duration is measured in character intervals and \nis dependent on the character length, parity, and STOP bit setting and is inversely proportional to the baud rate. If the \nRxTimeOut value equals zero, a timeout interrupt is not generated.\nThe HDplxDelay register allows programming setup and hold times between RTS/CLKOUT and the TX output in auto \ntransceiver direction control mode: MODE1[4] is 1. The Hold[3:0] time can also be used for echo suppression in half-\nduplex communication. HDplxDelay also functions in the 2x and 4x rate modes.\nBits 7–4: Setup[7:4]\nThe Setupx bits define a setup time for RTS/CLKOUT to transition high before the transmitter starts transmission of its \nfirst character in auto transceiver direction control mode: MODE1[4]. This allows the MAX3107 to account for skew dif -\nferences of the external transmitter’s enable delay and propagation delays. Setup[7:4] can also be used to fix a stable \nstate on the transmission line prior to start of transmission.\nThe unit of the HDplxDelay setup time delay is a 1-bit interval, making this delay baud-rate dependent. The maximum \ndelay is 15-bit intervals.\nBits 3–0: Hold[3:0]\nThe Hold[3:0] bits define a hold time for RTS/CLKOUT to be held stable (high) after the transmitter ends transmission of \nits last character in auto transceiver direction control mode: MODE1[4]. RTS/CLKOUT turns low after the last STOP bit \nwas sent with a Hold[3:0] delay. This keeps the external transmitter enabled during the hold duration.\nThe second factor that the Hold[3:0] bits define, is a delay in echo suppression mode, MODE2[7]. See the Echo \nSuppression  section for more information.\nThe unit of the HDplxDelay hold time delay is a 1-bit interval, making the delay baud-rate dependent. The maximum \ndelay is 15-bit intervals.ADDRESS: 0x0D\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME  Setup3 Setup2 Setup1 Setup0 Hold3 Hold2 Hold1 Hold0\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x0C\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME TimOut7 TimOut6 TimOut5 TimOut4 TimOutO3 TimOut2 TimOut1 TimOut0\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 34HDplxDelay RegisterRxTimeOut—Receiver Timeout Register\nThe IrDA allows selection of IrDA SIR and MIR-compliant pulse shaping at the TX and RX interfaces. It also allows inver -\nsion of the TX and RX logic, independently of whether IrDA is enabled or not.\nBits 7 and 6: No Function\nBit 5: TxInv\nSet the TxInv bit high to invert the logic at the TX output. This is independent of IrDA operation.\nBit 4: RxInv\nSet the RxInv bit high to invert the logic state at the RX input. This is independent of IrDA operation.\nBit 3: MIR\nSet the MIR and IrDAEn bits high to select IrDA 1.1 (MIR) with 1/4 period pulse widths.\nBit 2: No Function\nBit 2 must be kept logic 0.\nBit 1: SIR\nSet the SIR bit and the IrDAEn bits high to select IrDA 1.0 pulses (SIR) with 3/16th period pulses.\nBit 0: IrDAEn\nSet the IrDAEn bit high so that IrDA-compliant pulses are produced at the TX output and the MAX3107 receiver expects \nsuch pulses at its Rx input. If IrDAEn is set to low (default), normal (nonIrDA) pulses are generated and expected at the \nreceiver. IrDAEn must be used in conjunction with the SIR or MIR select bits.\nFlowLvl is used for selecting the RxFIFO threshold levels used for software (XON/XOFF) and hardware ( RTS/CTS) flow control.\nBits 7–4: Resume[7:4]\nResume[7:4] sets the transmit FIFO threshold at which an XON is automatically sent or RTS/CLKOUT is automati -\ncally set low. This signals the far-end station to start transmission. The actual threshold level is calculated as 8 times \nResume[7:4]. The resulting level is in the range of 0 to 120.\nBits 3–0: Halt[3:0]\nHalt[3:0] sets a receive FIFO threshold level at which an XOFF is automatically sent or RTS/CLKOUT is automatically \nset high, depending on whether auto software or hardware flow control is enabled. This signals the far-end station to halt \ntransmission. The actual threshold level is calculated as 8 times Halt[3:0]. Hence, the selectable threshold granularity is \neight. The resulting level is in the range of 0 to 120.ADDRESS: 0x0F\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME Resume3 Resume2 Resume1 Resume0 Halt3 Halt2 Halt1 Halt0\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x0E\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME — — TxInv RxInv MIR — SIR IrDAEn\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 35FlowLvl—Flow Level RegisterIrDA Register\nBits 7–4: RxTrig[3:0]\nThese 4 bits allow definition of the receive FIFO threshold level at which an ISR[3] interrupt is generated. This can be used \nto signal that the receive FIFO is nearing overflow or that a predefined number of FIFO locations are available for being read \nout in one block. The actual FIFO trigger level is 8 times RxTrig[7:4], hence, the selectable threshold granularity is eight.\nBits 3–0: TxTrig[3:0]\nThese 4 bits allow definition of the transmit FIFO threshold level at which the MAX3107 generates an ISR[4] interrupt. This can \nbe used to manage data flow to the transmit FIFO. For example, if the trigger level is defined near the bottom of the TxFIFO, the \nhost knows that a predefined number of FIFO locations are available for being written to in one block. Alternatively, if the trigger \nlevel is set near the top of the FIFO, the host is warned when the transmit FIFO is nearing overflow, if written to on a word-by-\nword basis. The actual FIFO trigger level is 8 times TxTrig[3:0], hence, the selectable threshold granularity is eight.\nBits 7–0: TxFL[7:0]\nThe TxFIFOLvl register represents the current number of words in the transmit FIFO whenever the transmit UART is \nidle.  When the transmit UART actively sends out characters, the value in this register can sometimes be inaccurate if \nthis register is read at the same time that the transmit UART updates the transmit FIFO. First, disable the transmitter to \nget an accurate value. To manage the transmit FIFO even when the transmit UART is active, do not use this register to \ndetermine transmit FIFO state. Rather, use the TFifoEmpty bit or the TFifoTrigInt bits.\nBits 7–0: RxFL[7:0]\nThe RxFIFOLvl register represents the current number of words in the receive FIFO whenever the receive UART is \nidle.  When the receive UART actively receives characters, the value in this register can sometimes be inaccurate if this \nregister is read at the same time that the receive UART updates the receive FIFO. To manage the receive FIFO even \nwhen the receive UART is active, do not use this register to determine receive FIFO state. Use the RFIFOEmptyInt bit, \nthe RxTrgInt bit, and the RTimeOut bit instead.ADDRESS: 0x12\nMODE: R\nBIT 7 6 5 4 3 2 1 0\nNAME RxFL7 RxFL6 RxFL5 RxFL4 RxFL3 RxFL2 RxFL1 RxFL0\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x11\nMODE: R\nBIT 7 6 5 4 3 2 1 0\nNAME TxFL7 TxFL6 TxFL5 TxFL4 TxFL3 TxFL2 TxFL1 TxFL0\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x10\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME RxTrig3 RxTrig2 RxTrig1 RxTrig0 TxTrig3 TxTrig2 TxTrig1 TxTrig0\nRESET 1 1 1 1 1 1 1 1\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 36RxFIFOLvl—Receive FIFO Level RegisterTxFIFOLvl—Transmit FIFO Level RegisterFIFOTrgLvl—FIFO Interrupt Trigger Level Register\nBits 7–4: SwFlow[3:0]\nThe SwFlow[3:0] bits configure auto software flow control and/or special character detection in combination with the \ncharacters defined in the XON1, XON2, XOFF1 and/or XOFF2 registers. See Table 3.\nFlowCtrl[5:4] select which of the XON1, XON2, XOFF1 or/and XOFF2 characters are used for special character detec -\ntion and/or auto flow control. If auto receiver flow control is enabled through SwFlowEn and FlowCtrl[7:6], the XON and \nXOFF characters that the MAX3107 receives are filtered out and are not put into the RxFIFO. Set the SwFlowEn bit \nto 0 and set MODE2[4] to 1 to only enable special character detection. Under these conditions, auto flow transmit flow \ncontrol is not active.\nIf both special character detection (MODE2[4]) and auto software flow control (FlowCtrl[3]) are to be enabled, XON1 and \nXOFF1 define the auto flow control characters, while XON2 and XOFF2 define the special character detection characters.\nBit 3: SwFlowEn\nThe SwFlowEn bit enables auto software flow control. The characters used for auto software flow control are selected in \nSwFlow[7:4]. If special character detection (MODE2[4] set to 1) is used in addition to auto software flow control, XON1 \nand XOFF1 are used for flow control, while XON2 and XOFF2 define the special characters.\nBit 2: GPIAddr\nThe GPIAddr bit, when set, enables that the four GPIO_ inputs are used in conjunction with XOFF2 for the definition of \na special character. This can be used, for example, for defining the address of a RS-485 slave device through hardware. \nThe GPIO_ inputs logic levels, which define the 4 LSBs of the special character, while the 4 MSBs are defined by the \nXOFF2[7:4] bits. If GPIAddr is set, the contents of the XOFF2[3:0] bits are neglected. In this case, the XOFF2[3:0] bits, \nwhen read, also do not reflect the logic on GPIO_.\nBit 1: AutoCTS\nThe AutoCTS bit enables auto CTS flow control by which the transmitter stops and starts sending data depending on \nthe logic state at the CTS input. See the Auto Hardware Flow Control  section for a description of AutoCTS flow con -\ntrol. Logic changes at the CTS input result in an ISR[7]: CTSInt interrupt. The transmitter must be turned off by setting \nMODE1[1] to 1 before AutoCTS is enabled.\nBit 0: AutoRTS\nThe AutoRTS bit enables auto RTS flow control by which the MAX3107 sets its RTS/CLKOUT output dependent on \nthe receive FIFO fill level. The FIFO thresholds at which RTS/CLKOUT changes state are set in FlowLvl. See the Auto \nHardware Flow Control  section for more information.ADDRESS: 0x13\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME SwFlow3 SwFlow2 SwFlow1 SwFlow0 SwFlowEn GPIAddr AutoCTS AutoRTS\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 37FlowCtrl—Flow Control Register\nThe XON1 and XON2 register contents define the XON characters used for auto XON/XOFF flow control and/or the \nspecial characters used for special character detection. See details in the FlowCtrl register description.\nBits 7–0: Bit[7:0]\nThese bits define the XON1 character if single-character XON auto software flow control is enabled in FlowCntrl[7:4]. \nIf double-character flow control is selected in FlowCntrl[7:4], these bits constitute the LSB of the XON character. If \nspecial character detection is enabled in MODE2[4] and auto flow control is not enabled, these bits define a special \ncharacter. If special character detection and auto software flow control are enabled, XON1 defines the XON flow \ncontrol character.X = Don’t careTable 3. SwFlow[3:0] Truth Table\nADDRESS: 0x14\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nRESET 0 0 0 0 0 0 0 0SwFlow3 SwFlow2 SwFlow1 SwFlow0\nDESCRIPTION\nRECEIVER FLOW CONTROLTRANSMITTER FLOW \nCONTROL/SPECIAL \nCHARACTER DETECTION\n0 0 0 0 No flow control/no character detection.\n0 0 X X No receiver flow control.\n1 0 X X Transmitter generates XON1, XOFF1.\n0 1 X X Transmitter generates XON2, XOFF2.\n1 1 X X Transmitter generates XON1, XON2, XOFF1, and XOFF2.\nX X 0 0 No transmitter flow control.\nX X 1 0Receiver compares XON1 and XOFF1 and controls the \ntransmitter accordingly. XON1 and XOFF1 special character \ndetection.\nX X 0 1Receiver compares XON2 and XOFF2 and controls the \ntransmitter accordingly. XON2 and XOFF2 special character \ndetection. \nX X 1 1Receiver compares XON1, XON2, XOFF1, and XOFF2 and \ncontrols the transmitter accordingly. XON1, XON2, XOFF1, \nand XOFF2 special character detection.\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 38XON1 Register\nThe XON1 and XON2 register contents define the XON characters for auto XON/XOFF flow control and/or the special \ncharacters used in special character detection. See details in the FlowCtrl register description.\nBits 7–0: Bit[7:0]\nThese bits define the XON2 character if single-character auto software flow control is enabled in FlowCntrl[7:4]. If \ndouble-character flow control is selected in FlowCntrl[7:4], these bits constitute the MSB of the XON character. If special \ncharacter detection is enabled in MODE2[4], and auto software flow control is not enabled, these bits define a special \ncharacter. If both special character detection and auto software flow control are enabled (MODE2[4] and FlowCntrl[3]), \nthese bits define a special character.\nThe XOFF1 and XOFF2 register contents define the XOFF characters for auto XON/XOFF flow control and/or the special \ncharacters used in special character detection. See details in the FlowCtrl register description.\nBits 7–0: Bit[7:0]\nThese bits define the XOFF1 character if single-character XOFF auto software flow control is enabled in FlowCntrl[7:4]. \nIf double character flow control is selected in FlowCntrl[7:4], these bits constitute the LSB of the XOFF character. If \nspecial character detection is enabled in MODE2[4] and auto software flow control is not enabled, these bits define a \nspecial character. If special character detection and software flow control are both enabled, XOFF1 defines the XOFF \nflow control character.ADDRESS: 0x16\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x15\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 39XOFF1 RegisterXON2 Register\nThe XOFF1 and XOFF2 register contents define the XOFF characters for auto XON/XOFF flow control and/or special \ncharacters used in special character detection. See details in the FlowCtrl register description.\nBits 7–0: Bit[7:0]\nThese bits define the XOFF2 character if auto software flow control is enabled in FlowCntrl[7:4]. If double-character flow \ncontrol is selected in FlowCntrl[7:4], these bits constitute the MSB of the XOFF character. If special character detection is \nenabled in MODE2[4] and auto flow control is not enabled, these bits define a special character. If both special character \ndetection and auto flow control are enabled (MODE2[4] and FlowCntrl[3]), these bits define a special character.\nThe four GPIOs can be configured as inputs or outputs and can be operated in push-pull or open-drain mode. The \nreference clock has to be active for the GPIOs to work.\nBits 7–4: GP[3:0]OD\nSet the GP[3:0]OD bits to 1 to configure open-drain output or input operation. If GP[3:0]OD are 0 (default), the GPIO_are \npush-pull outputs, if configured as outputs in GPIOConfg[3:0]. If configured as inputs in GPIOConfg[3:0], the GPIO_ are \nhigh-impedance inputs with weak pulldowns.\nBits 3–0: GP[3:0]Out\nThe GP[3:0]Out bits configure the GPIO_ to be inputs or outputs. Set the GP[3:0]Out bits high to configure the associated \nGPIO_ as outputs. The GP[3:0]Out bits which are set low, are configured to be inputs.\nBits 7–4: GPI[3:0]Dat\nThe GPI[3:0]Dat bits reflect the logic on GPIO_ when configured as inputs through GPIOConfg[3:0].\nBits 3–0: GPO[3:0]Dat\nThe GPO[3:0]Dat bits allows programming the logic state of the GPIO_, when these are configured as outputs through \nGPIOConfg[3:0]. For open-drain operation, pullup resistors are needed on GPIO_.ADDRESS: 0x19\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME GPI3Dat GPI2Dat GPI1Dat GPI0Dat GPO3Dat GPO2Dat GPO1Dat GPO0Dat\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x18\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME GP3OD GP2OD GP1OD GP0OD GP3Out GP2Out GP1Out GP0Out\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x17\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 40GPIOData—GPIO Data RegisterGPIOConfg—GPIO Configuration RegisterXOFF2 Register\nBits 7 and 6: PLLFactor[1:0]\nThe two PLLFactor[1:0] bits allow programming the PLL’s multiplication factor. The input and output frequencies of the \nPLL have to be limited to the ranges shown in Table 4. Enable the PLL through CLKSource[2].\nBits 5–0: PreDiv[5:0] \nThe six PreDiv[5:0] bits allow programming the divisor of the PLL’s predivider. The divisor must be chosen such that \nthe output frequency of the predivider, which equals the PLL’s input frequency, is limited to the ranges shown in T able 4. The \ninput frequency of XIN is f CLK; fPLLIN  = fCLK/PreDiv (Figure 4). PreDiv is an integer that must be in the range of 1 to 63.\nTable 4. PLLFactor[1:0] Selection GuideFigure 14. PLL Signal Path\nPLLFactor1 PLLFactor0MULTIPLICATION \nFACTORfPLLIN fREF\nMIN (kHz) MAX MIN (MHz) MAX (MHz)\n0 0 6 500 800kHz 3 4.8\n0 1 48 850 1.2MHz 40.8 56\n1 0 96 425 1MHz 40.8 96\n1 1 144 390 667kHz 56 96ADDRESS: 0x1A\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME PLLFactor1 PLLFactor0 PreDiv5 PreDiv4 PreDiv3 PreDiv2 PreDiv1 PreDiv0\nRESET 0 0 0 0 0 0 0 1\nPREDIVIDERfCLKPLLfPLLIN fREFFRACTIONAL\nBAUD-RATE\nGENERATOR\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 41PLLConfig—PLL Configuration Register\nBits 7 and 6: No Function\nBit 5: 4xMode\nWhen the 4xMode bit is set high, the MAX3107 baud rate is quadruple the regular (16x sampling) baud rate. The 2xMode \nbit should be set low if 4xMode is enabled. See the 2x and 4x Rate Modes  section for more information.\nBit 4: 2xMode\nWhen the 2xMode bit is set high, the MAX3107 baud rate is double the regular (16x sampling) baud rate. See the 2x and \n4x Rate Modes  section for a detailed description.\nBits 3–0: FRACT[3:0]\nThis is the fractional portion of the baud-rate generator divisor. Set FRACT[3:0] to zero if not used. See the Fractional \nBaud-Rate Generator  section for calculations.\nDIVLSB and DIVMSB define the baud-rate generator integer divisors. The minimum value is 1. See the Fractional Baud \nRate Generator  section for more information.\nBits 7–0: Div[7:0]\nDiv[7:0] are the 8 LSBs of the integer divisor portion (DIV) of the baud-rate generator.\nBits 7–0: Div[15:8]\nDiv[15:8] is the MSB portion of the integer divisor (DIV).ADDRESS: 0x1D\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME Div15 Div14 Div13 Div12 Div11 Div10 Div9 Div8\nRESET 0 0 0 0 0 0 0 0ADDRESS: 0x1C\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME Div7 Div6 Div5 Div4 Div3 Div2 Div1 Div0\nRESET 0 0 0 0 0 0 0 1ADDRESS: 0x1B\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME — — 4xMode 2xMode FRACT3 FRACT2 FRACT1 FRACT0\nRESET 0 0 0 0 0 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 42DIVMSB—Baud-Rate Generator MSB Divisor RegisterDIVLSB—Baud-Rate Generator LSB Divisor RegisterBRGConfig—Baud-Rate Generator Configuration Register\nBit 7: CLKtoRTS\nSet the CLKtoRTS bit to 1 to route the baud-rate generator (16x baud rate) output clock to RTS/CLKOUT. The clock \nfrequency is a factor of 16x, 8x, or 4x of the baud rate, depending on the BRGConfig[5:4] settings.\nBits 6 and 5: No Function\nBit 4: ClockEn\nSet the ClockEn bit high to enable an external clocking (crystal or clock generator at XIN). Set the ClockEn bit to 0 to \ndisable clocking.\nBit 3: PLLBypass\nSet the PLLBypass bit high to enable bypassing the internal PLL and predivider.\nBit 2: PLLEn\nSet the PLLEn bit high to enable the internal PLL. If PLLEn is set low, the internal PLL is disabled.\nBit 1: CrystalEn\nSet the CrystalEn bit high to enable the crystal oscillator. When using an external clock source at XIN, CrystalEn must \nbe set low.\nBit 0: No Function\nAlways keep Bit 0 at logic 0.\nBit 7–0: Bit[7:0]\nThe RevID register indicates the revision number of the MAX3107 silicon, starting with 0xA1. This can be used during \nsoftware development.ADDRESS: 0x1F\nMODE: R\nBIT 7 6 5 4 3 2 1 0\nNAME Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nRESET 1 0 1 0 0 0 0 1ADDRESS: 0x1E\nMODE: R/W\nBIT 7 6 5 4 3 2 1 0\nNAME CLKtoRTS — — ClockEn PLLBypass PLLEn CrystalEn —\nRESET 0 0 0 0 1 0 0 0\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 43RevID—Revision Identification RegisterCLKSource—Clock Source Register\nSerial Controller Interface\nThe MAX3107 can be controlled through SPI or I 2C as \ndefined by the logic on I2C/SPI. See the Pin Configurations  \nfor further details.\nSPI Interface\nThe SPI supports both single-cycle and burst-read/write \naccess. The SPI master must generate clock and data \nsignals in SPI MODE0 (i.e., with clock polarity CPOL = 0 \nand clock phase CPHA = 0).\nSPI Single-Cycle Access\nFigure 15 shows a single-cycle read and Figure 16 shows \na single-cycle write.\nSPI Burst Access\nBurst access allows writing and reading in one block by \nonly defining the initial register address in the SPI com -\nmand byte. Multiple characters can be loaded into the \ntransmit FIFO by using the THR (0x00) as the initial burst \nread address. Similarly, multiple characters can be read \nout of the receiver FIFO by using the RHR (0x00) as the \nSPI’s burst read address. If the SPI burst address is dif -\nferent to 0x00, the MAX3107 automatically increments the register address after each SPI data byte. Efficient \nprogramming of multiple consecutive registers is thus \npossible. Chip select, CS/A0, must be kept low during \nthe whole cycle. The SCLK/SCL clock continues clocking \nthroughout the burst access cycle. The burst cycle ends \nwhen the SPI master pulls CS/A0 high.\nFor example, writing 128 bytes into the TxFIFO can be \nachieved by a burst write access through the following \nsequence:\n ●Pull CS/A0 low\n ●Send SPI write command\n ●Send 128 byes\n ●Release CS/A0\nThis takes a total of (1 + 128) x 8 clock cycles.\nI2C Interface\nThe MAX3107 contains an I 2C-compatible interface for \ndata communication with a host processor (SCL and \nSDA). The interface supports a clock frequency up to \n400kHz. SCL and SDA require pullup resistors that are \nconnected to a positive supply.\nFigure 16. SPI Single-Cycle WriteFigure 15. SPI Single-Cycle Read\nCS\nW A6 A5 A4 A3 A2 A1 A0 D7 D6 D5 D4 D3 D2 D1 D0SCLK\nSDI\nA_ = REGISTER ADDRESS\nD_ = 8-BIT REGISTER CONTENTSCS\nR A6 A5 A4 A3 A2 A1 A0\nD7 D6 D5 D4 D3 D2 D1 D0SCLK\nSDI\nSDO\nA_ = REGISTER ADDRESS\nD_ = 8-BIT REGISTER CONTENTS\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 44\nSTART, STOP, and Repeated START Conditions\nWhen writing to the MAX3107 using I 2C, the master \nsends a START condition (S) followed by the MAX3107 \nI2C address. After the address, the master sends \nthe register address of the register that is to be pro -\ngrammed. The master then ends communication by \nissuing a STOP condition (P) to relinquish control of the \nbus, or a repeated START condition (Sr) to communicate \nto another I 2C slave. See Figure 17.\nSlave Address\nThe MAX3107 includes a 7-bit slave address. The first 5 \nbits (MSBs) of the slave address are factory-programmed \nand always 01011. These slave addresses are unique \ndevice IDs. Connect A1, A0 to ground or V L to set the \nI2C slave address (Table 5). The address is defined as \nthe 7 MSBs followed by the read/write bit. Set the read/\nwrite bit to 1 to configure the MAX3107 to read mode. Set \nthe read/write bit to 0 to configure the MAX3107 to write mode. The address is the first byte of information sent to \nthe MAX3107 after the START condition.\nBit Transfer\nOne data bit is transferred during each SCL clock cycle. \nThe data on SDA must remain stable during the high \nperiod of the SCL clock pulse. Changes in SDA while \nSCL is high and stable are considered control signals \n(see the START, STOP, and Repeated START Conditions \nsection). Both SDA and SCL remain high when the bus is \nnot active.\nSingle-Byte Write\nWith this operation the master sends an address and 1 \nor 2 data bytes to the slave device (Figure 18). The write \nbyte procedure is as follows:\n1) The master sends a START condition.\n2) The master sends the 7-bit slave ID plus a write bit \n(low).\n3) The addressed slave asserts an ACK on the data line.\n4) The master sends the 8-bit register address.\n5) The active slave asserts an ACK on the data line only \nif the address is valid (NACK if not).\n6) The master sends the 8-bit data byte.\n7) The slave asserts an ACK on the data line.\n8) The master generates a STOP condition.\nBurst Write\nWith this operation the master sends an address and mul -\ntiple data bytes to the slave device (Figure 19). The burst \nwrite procedure is as follows:\n1) The master sends a START condition.Figure 17. I 2C START, STOP, and Repeated START Conditions\nTable 5. I2C Address Map\nDIN/A1 CS/A0READ/ \nWRITEI2C ADDRESS\n0 0W 0x58\nR 0x59\n0 1W 0x5A\nR 0x5B\n1 0W 0x5C\nR 0x5D\n1 1W 0x5E\nR 0x5F SCL\nSDAS Sr P\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 45\n2) The master sends the 7-bit slave ID plus a write bit (low).\n3) The addressed slave asserts an ACK on the data \nline.\n4) The master sends the 8-bit register address.\n5) The slave asserts an ACK on the data line only if the \naddress is valid (NACK if not).\n6) The master sends 8 bits of data.\n7) The slave asserts an ACK on the data line.\n8) Repeat steps 6 and 7 N - 1 times.\n9) The master generates a STOP condition.Single-Byte Read\nWith this operation the master sends an address and \nreceives 1 or 2 data bytes from the slave device (Figure 20). \nThe read byte procedure is as follows:\n1) The master sends a START condition.\n2) The master sends the 7-bit slave ID plus a write bit (low).\n3) The addressed slave asserts an ACK on the data line.\n4) The master sends the 8-bit register address.\n5) The active slave asserts an ACK on the data line only \nif the address is valid (NACK if not).\n6) The master sends a repeated START (Sr).\n7) The master sends the 7-bit slave ID plus a read bit (high).Figure 20. Read Byte SequenceFigure 19. Burst Write SequenceFigure 18. Write Byte Sequence\nS\nSrDEVICE SLAVE ADDRESS - W A\nDEVICE SLAVE ADDRESS - RREAD SINGLE BYTE\nAREGISTER ADDRESS A\n8 DATA BITS NA\nFROM MASTER TO STAVE FROM SLAVE TO MASTERPS DEVICE SLAVE ADDRESS - W A\n8 DATA BITS - 1BURST WRITE\nAREGISTER ADDRESS A\n8 DATA BITS - N A8 DATA BITS - 2 A\nFROM MASTER TO STAVE FROM SLAVE TO MASTERPS\nPDEVICE SLAVE ADDRESS - W A\n8 DATA BITS\nFROM MASTER TO STAVEWRITE SINGLE BYTE\nFROM SLAVE TO MASTERAREGISTER ADDRESS A\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 46\n8) The addressed slave asserts an ACK on the data \nline.\n9) The slave sends 8 data bits.\n10) The master asserts a NACK on the data line.\n11) The master generates a STOP condition.\nBurst Read\nWith this operation the master sends an address and \nreceives multiple data bytes from the slave device \n(Figure 21). The burst read procedure is as follows:\n1) The master sends a START condition.\n2) The master sends the 7-bit slave ID plus a write bit (low).\n3) The addressed slave asserts an ACK on the data line.\n4) The master sends the 8-bit register address.\n5) The slave asserts an ACK on the data line only if the \naddress is valid (NACK if not).\n6) The master sends a repeated START condition.\n7) The master sends the 7-bit slave ID plus a read bit \n(high). 8)   The slave asserts an ACK on the data line.9) The slave sends 8 bits of data.\n10) The master asserts an ACK on the data line.\n11) Repeat steps 9 and 10 N - 1 times.\n12) The master generates a STOP condition.\nAcknowledge\nData transfers are acknowledged with an acknowledge \nbit (ACK) or a not-acknowledge bit (NACK). Both the \nmaster and the MAX3107 generate ACK bits. To gener -\nate an ACK, pull SDA low before the rising edge of the \n9th clock pulse and keep it low during the high period \nof the 9th clock pulse (see Figure 22). To generate a \nNACK, leave SDA high before the rising edge of the 9th \nclock pulse and keep it high for the duration of the 9th \nclock pulse. Monitoring for NACK bits allows for detection \nof unsuccessful data transfers.\nApplications Information\nStartup and Initialization\nThe MAX3107 can be initialized following power-up or \na hardware or software reset as shown in Figure 23.  \nTo verify that the MAX3107 is ready for operation after \na power-up or reset, check the IRQ output if interrupt \ndriven operation is employed.\nIn polled mode, repeatedly read a known register until \nthe expected contents are returned. Note that the con -\ntents of the RevID change if new revisions of the product \nare released. If reading RevID, it is recommended to only \ncheck for the most significant 4 bits: Ah.Figure 22. AcknowledgeFigure 21. Burst Read Sequence\nNOT ACKNOWLEDGE\nACKNOWLEDGE1 2 8 9\nSDASCLSS\nSrDEVICE SLAVE ADDRESS - W A\nDEVICE SLAVE ADDRESS - RBURST READ\nAREGISTER ADDRESS A\n8 DATA BITS - 1 A\nA 8 DATA BITS - 3 8 DATA BITS - 2 A\n8 DATA BITS - N A\nFROM MASTER TO STAVE FROM SLAVE TO MASTERP\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 47\nLow-Power Operation\nTo reduce the power consumption during normal opera -\ntion, the following techniques can be adopted:\n ●Do not use the internal PLL. This saves the most \npower of the options listed here. Disable and bypass \nthe PLL. With the PLL enabled, the current to the \nVA supply is in the range of a few mA (depending \non clock and multiplication factor), while it drops to \nbelow 1mA if disabled.\n ●Keep the internal clock rates as low as possible.\n ●Use low voltage on the V A supply.\n ●Use an external 1.8V supply. This saves the power \ndissipated in the internal 1.8V linear regulator for the \n1.8V logic supply. Connect the external 1.8V supply to  \nV18 and disable the internal regulator by connecting \nLDOEN to DGND.Interrupts and Polling\nThe host controller can manage and control the MAX3107 \nthrough polling and/or through interrupts. In polled \nmode, the IRQ physical interrupt output is not used and  \nthe host controller polls the ISR register at frequent inter -\nvals to establish the state of the MAX3107.\nAlternatively, the MAX3107’s physical IRQ interrupt can \nbe used to interrupt the host controller at specified events, \nmaking polling unnecessary. The IRQ output is an open-\ndrain output that requires a pullup resistor to V L.\nLogic-Level Translation\nThe MAX3107 can be directly connected to transceivers \nand controllers that have different supply voltages. The  \nVL input defines the logic voltage levels of the controller \ninterface while the V EXT voltage defines the logic of the \ntransceiver interface. This ensures flexibility when select -\ning a controller and transceiver. Figure 24 is an example \nof a setup when the controller, transceiver, and the \nMAX3107 are powered by three different supplies.Figure 23. Startup and Initialization FlowchartPOWER-UP/\nRST INPUT PULLED HIGH/\nRST BIT SET LOW\nIS IRQ HIGH?\nOR\nRevID READ\nSUCCESSFULLY\nYN\nCONFIGURE\nCLOCKING\nCONFIGURE\nMODESCONFIGURE\nFIFO CONTROL\nCONFIGURE\nFLOW CONTROL\nCONFIGURE\nGPIOs\nSTART\nCOMMUNICATIONENABLE\nINTERRUPTS\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 48\nConnector Pin Sharing\nThe TX and RTS/CLKOUT outputs can be programmed \nto be high impedance. This can be used in cases where \nthe MAX3107 shares a common connector with other \ncommunication devices. Set the output of the MAX3107 \nto high impedance when the other communication \ndevices are active. Program MODE1[2]: TxHiZ high to \nset TX to a high-impedance state. Program MODE1[3]: \nRTSHiZ high to set RTS/CLKOUT to a high-impedance \nstate. Figure 25 shows an example of connector sharing \nwith a USB transceiver.\nRS-232 5x3 Application\nThe four GPIOs can be used to implement the other flow- \ncontrol signals defined in ITU V.24. Figure 26 shows how \nthe GPIOs create the DSR, DTR, DCD, and RI signals \nfound on some RS-232/V.28 interfaces.\nSet FlowCtrl[1:0] high to enable auto hardware RTS/CTS \nflow control.Typical Application Circuit\nFigure 27 shows the MAX3107 being used in a half-duplex \nRS-485 application. The microcontroller, the RS-485 \ntransceiver, and the MAX3107 are powered by 3.3V. SPI \nis used as the controller’s communication interface.\nThe MAX14840 receiver is continually enabled so that \nechoing occurs. Enable auto echo suppression in the \nMAX3107 UART by setting MODE2[7]: EchoSuprs to 1.\nSet MODE1[4]: TranscvCtrl high to enable auto trans -\nceiver direction control to automatically control the DE \ninput of the transceiver.\nOrdering InformationFigure 25. Connector Sharing with a USB TransceiverFigure 24. Logic-Level Translation\n+Denotes a lead(Pb)-free/RoHS-compliant package.\nT = Tape and reel.\n*EP = Exposed pad.\n/V denotes an automotive qualified partPART TEMP RANGE PIN-PACKAGE\nMAX3107EAG+T -40°C to +85°C 24 SSOP \nMAX3107ETG+T -40°C to +85°C 24 TQFN-EP*\nMAX3107ETG/V+T -40°C to +85°C 24 TQFN-EP*MAX3107TX\nRX\nMAX13481ED+\nD-OETX/D+\nRX/D-SHARED\nCONNECTORMAX3107TX\nRX\nRTS/CLKOUT\nAGND DGNDVLVA VEXT\nRST\nIRQSPI/I2CMAX3078\nTRANSCEIVERVCC\nDI\nDEROVDD2.5V1.8V 3.3V\nMICROCONTROLLER\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 49Chip Information\nPROCESS: BiCMOS\nFigure 27. RS-485 Half-Duplex ApplicationFigure 26. RS-232 Application\nMAX14840A\nBDI\nRO\nREDE\nMAX3107TX\nRX\nXOUT\nAGND V18 DGND\n100nFVEXT VA VL\nIRQSPI/I2CLDOEN\nRST\nXINSPI3.3V\nMICROCONTROLLER\nCLOCKRTS\n10kΩ\n1µF100nFMAX3107TX\nRXTx\nRxSPI/I2CMAX3245\nT1IN\nR1OUT\nMICROCONTROLLERRST\nLDOENIRQRTS/CLKOUT\nCTSRTSCTST2IN\nR2OUT\nGPIO0\nGPIO1DTRDSRT3IN\nR3OUT\nGPIO2\nGPIO3DCD\nRIR4OUT\nR5OUT\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 50\nPACKAGE TYPE PACKAGE CODE OUTLINE NO.LAND  \nPATTERN NO.\n24 SSOP A24+1 21-0056 90-0110\n24 TQFN-EP T243A3+1 21-0188 90-0122MAX3107LOGIC-LEVEL\nTRANSLATIONSPI/I2CTX AND FIFOLDO\nPLLFLOW\nCONTROL\nLOGIC-LEVEL\nTRANSLATIONREGISTERS\nAND\nCONTROL\nRx AND FIFO\nFRACTIONAL\nBAUD-RATE\nGENERATORGPIOGPIO0RXCTS\nGPIO1\nGPIO2\nGPIO3CRYSTAL\nOSCILLATORTXV18 VA\nDGND AGNDVEXTVL\nLDOEN\nI2C/SPI\nDIN/A1\nDOUT/SDA\nCS/A0\nSCLK/SCL\nRST\nIRQ\nXIN\nXOUTDIVIDERRTS/CLKOUT\nMAX3107 SPI/I 2C UART with 128-Word FIFOs\nwww.maximintegrated.com\nMaxim Integrated  │ 51Package Information\nFor the latest package outline information and land patterns (footprints), go to www.maximintegrated.com/packages . Note that a “+”, \n“#”, or “-” in the package code indicates RoHS status only. Package drawings may show a different suffix character, but the drawing \npertains to the package regardless of RoHS status.Functional Diagram\nREVISION\nNUMBERREVISION\nDATEDESCRIPTIONPAGES\nCHANGED\n0 10/09 Initial release —\n1 4/10Changed the maximum number for the “External Clock Frequency” specification \nfrom 30MHz to 35MHz in the AC Electrical Characteristics  table8\nReplaced the text in the SPI Burst Access  section 44\n2 4/10Increased the maximum V IL specification for the XIN Clock Input in the Electrical \nCharacteristics  from 0.2V to 0.3V.8\n3 8/11Removed internal oscillator and updated register information; V18 capacitor \nincreased to 1µF; keep supplies powered during shutdown1, 2, 6, 8,  \n11–18, 22, 24, \n27, 30, 32, 35, \n41, 43, 48–51\n4 3/14 Removed automotive part from Ordering Information  table 1\n5 1/15 Replacing automotive references on page 1 1\n6 2/15Added to the Receive and Transmit FIFOs  section a note about how the TxFIFOLvl \nand RxFIFOLvl values can be in error; added a note to the Transmitter Operation  \nand Receiver Operation sections about how errors can occur; updated the RHR, \nTHR, TxFIFOLvl, and RxFIFOLvl register bit descriptions 15, 16, 23, 24, 36\n7 5/15 Revised Benefits and Features  section 1\nMaxim Integrated cannot assume responsibility for use of any circuitry other than circuitry entirely embodied in a Maxim Integrated product. No circuit patent licenses \nare implied. Maxim Integrated reserves the right to change the circuitry and specifications without notice at any time. The parametric values (min and max limits) \nshown in the Electrical Characteristics table are guaranteed. Other parametric values quoted in this data sheet are provided for guidance.\nMaxim Integrated and the Maxim Integrated logo are trademarks of Maxim Integrated Products, Inc.MAX3107 SPI/I 2C UART with 128-Word FIFOs\n© 2015 Maxim Integrated Products, Inc.  │ 52Revision History\nFor pricing, delivery, and ordering information, please contact Maxim Direct at 1-888-629-4642, or visit Maxim Integrated’s website at www.maximintegrated.com.\n'}]
!==============================================================================!
### Component Summary: MAX3107EESA+T

#### Key Specifications:
- **Voltage Ratings:**
  - Digital Interface Supply Voltage (VL): 1.71V to 3.6V
  - Analog Supply Voltage (VA): 2.35V to 3.6V
  - UART Interface Logic Supply Voltage (VEXT): 1.71V to 3.6V
  - Logic Supply Voltage (V18): 1.65V to 1.95V

- **Current Ratings:**
  - Typical Supply Current (VA): 640µA at 1Mbaud and 20MHz clock
  - Shutdown Supply Current: 20µA (typ)
  - Sleep Supply Current: 45µA (typ)

- **Power Consumption:**
  - Low power consumption with autosleep and shutdown modes.

- **Operating Temperature Range:**
  - -40°C to +85°C

- **Package Type:**
  - Available in 24-pin SSOP and 24-pin TQFN packages.

- **Special Features:**
  - Integrated logic-level translation for RS-232/RS-485 compatibility.
  - 128-word deep FIFO for both transmit and receive.
  - Supports I2C and SPI communication interfaces.
  - Phase-locked loop (PLL) for high-resolution baud-rate programming.
  - Auto transceiver direction control and echo suppression.
  - Configurable for 2x and 4x baud rate modes.

- **Moisture Sensitive Level (MSL):**
  - MSL is not specified in the provided data.

#### Description:
The **MAX3107** is an advanced universal asynchronous receiver-transmitter (UART) designed for high-speed data communication. It features a dual FIFO architecture (128 words each for transmit and receive) and can be controlled via I2C or SPI interfaces. The device supports data rates up to 24Mbps and includes a fractional baud-rate generator, allowing for precise baud rate settings independent of the reference clock frequency. 

#### Typical Applications:
The MAX3107 is suitable for a variety of applications, including:
- **Portable Devices:** Ideal for low-power applications where battery life is critical.
- **Industrial Control Systems:** Used in environments requiring robust communication protocols.
- **Fieldbus Networks:** Facilitates communication in industrial automation.
- **Automotive Infotainment Systems:** Supports data transfer in automotive applications.
- **Medical Systems:** Ensures reliable data communication in medical devices.
- **Point-of-Sale Systems:** Provides connectivity for transaction processing.
- **HVAC or Building Control:** Used in systems managing heating, ventilation, and air conditioning.

### Conclusion:
The MAX3107EESA+T is a versatile and efficient UART solution, particularly well-suited for applications requiring low power consumption and high-speed data transfer. Its integrated features and flexibility make it an excellent choice for modern communication systems across various industries.