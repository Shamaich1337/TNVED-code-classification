[{'role': 'system', 'content': 'You are a technical specialist with expertise in electronics. Your task is to analyze datasheets for electronic components and provide a concise summary of the product’s key characteristics and specifications. In addition, you need to gather textual information about the component, including its description and typical applications.Instructions:    Identify the correct component in the datasheet using the provided product code.    Summarize key parameters, including:        Voltage ratings        Current ratings        Power consumption        Operating temperature range        Package type        Special features or notes (if applicable)        Moisture Sensetive Level JEDEC J-STD-020E    Provide a short description of the component, including what it is (e.g., transistor, microcontroller, sensor) and its primary function.    Explain typical applications for the component (e.g., power management, signal processing, data storage, etc.).    Be thorough and accurate: Ensure the information corresponds specifically to the product code, as some datasheets cover multiple variants.Your goal is to create a clear and accurate technical summary that includes both key specifications and a description of what the component is used for.'}, {'role': 'user', 'content': 'Give me information about the component of C8051F310-GQR production of SILICON LABORATORIES from the text:Rev. 1.8 10/17 Copyright © 2017 by Silicon Laboratories C8051F31x8/16 kB ISP Fl ash MCU FamilyC8051F310/1/2/3/4/5/6/7\nAnalog Peripherals\n-10-Bit ADC (C8051F3 10/1/2/3/6 only)\n• Up to 200  ksps\n• Up to 21, 17, or 13 external single-ended or differen -\ntial inputs\n• VREF from external pin or VDD\n• Built-in temperature sensor\n• External conversion start input\n-Comparators \n• Programmable hysteresis and response time\n• Configurable as interrupt or reset source (Compara -\ntor0)\n• Low current ( \uf03c 0.5 µA)\nOn-Chip Debug\n-On-chip debug circuitry facilitates full speed, \nnon-intrusive in -system debug \uf020\n(no emulator required)\n-Provides breakpoints, single stepping, \uf020\ninspect/modify memory and registers\n-Superior performance to emulation systems using \nICE-Chips, target pods, and sockets\n-Complete development kit\nSupply Voltage 2.7 to 3.6  V\n-Typical operating current: 5  mA at 25 MHz;\uf020\n11 µA at 32 kHz\n-Typical stop mode current: 0.1  µA \n-Temperature range: –40 to +85  °CHigh Speed 8051  µC Core\n-Pipelined instruction architecture; executes 70% of instructions in 1 or 2\n system clocks\n-Up to 25  MIPS throughput with 25  MHz clock\n-Expanded interrupt handler\nMemory\n-1280  bytes internal data RAM (1024 + 256)\n-16 kB (C8051F310/1/6/7) or 8  kB (C8051F312/3/4/5) \nFlash; In-system programmable in 512-byte sectors\nDigital Peripherals\n-29/25/21 Port I/O; \uf020\nAll 5 V tolerant with high sink current\n-Hardware enhanced UART, SMBus™, and SPI™ \nserial ports\n-Four general purpose 16-bit counter/timers\n-16-bit programmable counter array (PCA) with five capture/compare modules\n-Real time clock capability using PCA or timer and \uf020\nexternal clock source\nClock Sources\n-Internal oscillator: 24.5  MHz with ±2% accuracy \nsupports crystal-less UART operation\n-External oscillator: Crystal, RC, C, or clock (1 or 2 \npin modes)\n-Can switch between clock s ources on-the-fly; useful \nin power saving modes\nPackages\n-32-pin LQFP (C8051F310/2/4)\n-28-pin QFN (C8051F311/3/5)\n-24-pin QFN (C8051F316/7)\nANALOG \nPERIPHERALS\n10-bit\n200ksps\nADC\n16 kB/8 kB \nISP FLASH1280 B \nSRAM\nPOR DEBUG \nCIRCUITRY14 \nINTERRUPTS8051 CPU\n(25MIPS)TEMP \nSENSORDIGITAL I/O\nPROGRAMMABLE PRECISION INTERNAL \nOSCILLATOR\nHIGH-SPEED CONTROLLER COREA\nM\nU\nX\nCROSSBAR\nVOLTAGE \nCOMPARATORS+\n-\n WDTPort 0\n+-UART\nSMBus\nPCA\nTimer 0\nTimer 1\nTimer 2\nTimer 3Port 1\nPort 2\nPort 3SPI\nC8051F310/1/2/3/6 only\nC8051F310/1/2/3/4/5/6/7\n2 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 3Table Of Contents\n1. System Overview............ ................ ................ ................. .............. .............. ........... 17\n1.1. CIP-51™ Microcontroller Core.. ................ ................. .............. .............. ........... 27\n1.1.1. Fully 8051 Compatible...... ................ ................. .............. .............. ........... 27\n1.1.2. Improved Throughput............ .............. .............. .............. .............. ........... 27\n1.1.3. Additional Features .......... ................ ................. .............. .............. ........... 28\n1.2. On-Chip Memory......... ................ ................. .............. .............. .............. ........... 29\n1.3. On-Chip Debug Circuitr y.................... ................. ................ ................. ............. 30\n1.4. Programmable Digital I/O and Crossbar............... ................. ................ ........... 31\n1.5. Serial Ports ............ ................. ................ ................ ................. .............. ........... 32\n1.6. Programmable Counter Array... ................ ................. .............. .............. ........... 32\n1.7. 12-Bit Analog to Digital Conver ter.................... .............. ............... ........... ......... 33\n1.8. Comparators ............. ................ ................ ................. .............. .............. ........... 34\n2. Absolute Maximum Ratings ........ ................ ................ ................. .............. ........... 35\n3. Global DC Electrical Characteristi cs ...................... ................ ................. ............. 36\n4. Pinout and Package Definitions..... ............... ................. .............. .............. ........... 39\n5. 12-Bit ADC (ADC0,  C8051F310/1/2/3/6 only) ... .............. .............. .............. ........... 51\n5.1. Analog Multiplexer ...... ................ ................. .............. .............. .............. ........... 51\n5.2. Temperature Sensor............ ................. ................ ................. ................ ........... 52\n5.3. Modes of Operation ............. ................. ................ ................. ................ ........... 54\n5.3.1. Starting a Conversion....... ................ ................. .............. .............. ........... 54\n5.3.2. Tracking Modes................ ................ ................. .............. .............. ........... 55\n5.3.3. Settling Time R equirements................ .............. .............. .............. ........... 56\n5.4. Programmable Window Detector ................. .............. .............. .............. ........... 61\n5.4.1. Window Detector In Sing le-Ended Mode .......... .............. .............. ........... 63\n5.4.2. Window Detector In  Differential Mode..... .............. ............... ........... ......... 64\n6. Voltage Reference (C8051F310/1/2/3/6 only)..... .............. .............. .............. ......... 67\n7. Comparators ................ ................. ................ ................ ................. .............. ........... 69\n8. CIP-51 Microcontroller ............. ................. ................ ................. ................ ........... 79\n8.1. Instruction Set........... ................ ................ ................. .............. .............. ........... 80\n8.1.1. Instruction and CPU Timing .. .............. .............. .............. .............. ........... 80\n8.1.2. MOVX Instruction and Program Memory ... ................ ................. ............. 81\n8.2. Memory Organization........... ................. ................ ................. ................ ........... 85\n8.2.1. Program Memory.............. ................ ................. .............. .............. ........... 85\n8.2.2. Data Memory........ ................. .............. .............. .............. .............. ........... 86\n8.2.3. General Purpose Registers ................. .............. .............. .............. ........... 86\n8.2.4. Bit Addressable Lo cations.............. ................ ................. .............. ........... 86\n8.2.5. Stack ................. ................ ................. .............. .............. .............. ........... 86\n8.2.6. Special Function Registers. ................. .............. .............. .............. ........... 87\n8.2.7. Register Descriptions ....... ................ ................. .............. .............. ........... 90\n8.3. Interrupt Handler................ ................ ................. ................ ................. ............. 93\n8.3.1. MCU Interrupt Sources a nd Vectors ............ ................. ................ ........... 94\n8.3.2. External Interrupts.......... ................ ................ ................. .............. ........... 95\n8.3.3. Interrupt Priorities........ ................. ................ ................. ................ ........... 95\nC8051F310/1/2/3/4/5/6/7\n4 Rev. 1.88.3.4. Interrupt Latency .............. ................ ................. .............. .............. ........... 95\n8.3.5. Interrupt Register Descrip tions.............. .............. .............. .............. ......... 97\n8.4. Power Management Modes........... .............. .............. .............. .............. ......... 102\n8.4.1. Idle Mode............ ................ ................. .............. .............. .............. ......... 102\n8.4.2. Stop Mode...................... ................ ................ ................. .............. ......... 103\n9. Reset Sources.......... ................ ................ ................. ................ ................. ........... 105\n9.1. Power-On Reset .................. ................. ................ ................. ................ ......... 106\n9.2. Power-Fail Reset / VDD Monito r.................. .............. .............. .............. ......... 106\n9.3. External Reset .......... ................ ................ ................. .............. .............. ......... 107\n9.4. Missing Clock Dete ctor Reset................. ................ ................. .............. ......... 108\n9.5. Comparator0 Reset..... ................ ................. .............. .............. .............. ......... 108\n9.6. PCA Watchdog Timer Reset....... ................. .............. .............. .............. ......... 108\n9.7. Flash Error Reset...... ................ ................ ................. .............. .............. ......... 108\n9.8. Software Reset ......... ................ ................ ................. .............. .............. ......... 108\n10.Flash Memory  .......... ................ ................. ................ ................. ................ ......... 111\n10.1.Programming The Flash Memory ................ .............. .............. .............. ......... 111\n10.1.1.Flash Lock and Key Functi ons................ .............. ............... ........... ....... 111\n10.1.2.Flash Erase Procedure ...... ................. .............. .............. .............. ......... 111\n10.1.3.Flash Write Procedure ..... ................ ................. .............. .............. ......... 112\n10.2.Non-volatile Data Storage ... ................. ................ ................. ................ ......... 112\n10.3.Security Options ....... ................ ................ ................. .............. .............. ......... 113\n10.4.Flash Write and Erase Guidelines............... .............. .............. .............. ......... 115\n10.4.1.VDD Maintenance and the VDD Monitor ............ .............. .............. ......... 115\n10.4.2.PSWE Maintenance......... ................ ................. .............. .............. ......... 115\n10.4.3.System Clock ....... ................. .............. .............. .............. .............. ......... 116\n11.External RAM ............... ................. ................ ................ ................. .............. ......... 119\n12.Oscillators................ ................ ................ ................. ................ ................. ........... 121\n12.1.Programmable Internal Oscilla tor.................... .............. ............... ........... ....... 121\n12.2.External Oscillator Drive Circuit................ ................. .............. .............. ......... 124\n12.3.System Clock Selectio n................. .............. .............. .............. .............. ......... 124\n12.4.External Crystal Example .... ................. ................ ................. ................ ......... 126\n12.5.External RC Example .......... ................. ................ ................. ................ ......... 127\n12.6.External Capacitor Example... ................ ................ ................. .............. ......... 127\n13.Port Input/Output  ....... ................. ................ ................ ................. .............. ......... 129\n13.1.Priority Crossbar Decoder ... ................. ................ ................. ................ ......... 131\n13.2.Port I/O Initialization ........ .............. .............. .............. .............. .............. ......... 133\n13.3.General Purpose Port I/O.... ................. ................ ................. ................ ......... 135\n14.SMBus ................. ................ ................. .............. .............. .............. .............. ......... 145\n14.1.Supporting Documents............. ................ ................. .............. .............. ......... 146\n14.2.SMBus Configuration... ............... ................. .............. .............. .............. ......... 146\n14.3.SMBus Operation ....... ................ ................. .............. .............. .............. ......... 146\n14.3.1.Arbitration......... ................ ................ ................. .............. .............. ......... 147\n14.3.2.Clock Low Extension........ ................ ................. .............. .............. ......... 148\n14.3.3.SCL Low Timeout.... .............. .............. .............. .............. .............. ......... 148\n14.3.4.SCL High (SMBus Free) Ti meout .............. ................ ................. ........... 148\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 514.4.Using the SMBus........ ................ ................. .............. .............. .............. ......... 149\n14.4.1.SMBus Configuration Regist er................ .............. ............... ........... ....... 150\n14.4.2.SMB0CN Control Register . ................. .............. .............. .............. ......... 153\n14.4.3.Data Register ....... ................. .............. .............. .............. .............. ......... 156\n14.5.SMBus Transfer Modes... .............. .............. .............. .............. .............. ......... 157\n14.5.1.Master Transmitter Mode.. ............... ................. .............. .............. ......... 157\n14.5.2.Master Receiver Mode.............. ................. ................ ................. ........... 158\n14.5.3.Slave Receiver Mode....... ................ ................. .............. .............. ......... 159\n14.5.4.Slave Transmitter Mode.... ............... ................. .............. .............. ......... 160\n14.6.SMBus Status Decoding ................ .............. .............. .............. .............. ......... 161\n15.UART0................ ................ ................ ................. .............. .............. .............. ......... 163\n15.1.Enhanced Baud Rate G eneration.................. .............. .............. .............. ....... 164\n15.2.Operational Modes ....... ................. .............. .............. .............. .............. ......... 165\n15.2.1.8-Bit UART........... ................. .............. .............. .............. .............. ......... 165\n15.2.2.9-Bit UART........... ................. .............. .............. .............. .............. ......... 166\n15.3.Multiprocessor Communications ... .............. .............. .............. .............. ......... 167\n16.Enhanced Serial Peripheral Interface (SPI0)..... .............. .............. .............. ....... 173\n16.1.Signal Descriptions....... ................. .............. .............. .............. .............. ......... 174\n16.1.1.Master Out, Slave In (MOS I)...................... ................ ................. ........... 174\n16.1.2.Master In, Slave Out (MISO)............... .............. .............. .............. ......... 174\n16.1.3.Serial Clock (SCK) ........... ................ ................. .............. .............. ......... 174\n16.1.4.Slave Select (NSS) .......... ................ ................. .............. .............. ......... 174\n16.2.SPI0 Master Mode Operation. ................ ................ ................. .............. ......... 175\n16.3.SPI0 Slave Mode Operation..... ................ ................. .............. .............. ......... 177\n16.4.SPI0 Interrupt Sources ........ ................. ................ ................. ................ ......... 177\n16.5.Serial Clock Timing... ................ ................ ................. .............. .............. ......... 178\n16.6.SPI Special Function Registers. ............... ................. .............. .............. ......... 180\n17.Timers ................... ................. ................ ................ ................. ................ .............. 18 7\n17.1.Timer 0 and Ti mer 1 ............... ................ ................ ................. .............. ......... 187\n17.1.1.Mode 0: 13-bit Counter/Timer ................. .............. ............... ........... ....... 187\n17.1.2.Mode 1: 16-bit Counter/Timer ................. .............. ............... ........... ....... 189\n17.1.3.Mode 2: 8-bit Counter/Tim er with Auto-Reload.......... ................. ........... 189\n17.1.4.Mode 3: Two 8-bit Counter /Timers (Timer 0 Only)..... ................. ........... 190\n17.2.Timer 2 ............. ................ ................ ................. ................ ................. ........... 195\n17.2.1.16-bit Timer with Auto-Rel oad............... .............. .............. .............. ....... 195\n17.2.2.8-bit Timers with Auto-Rel oad............... .............. .............. .............. ....... 196\n17.3.Timer 3 ............. ................ ................ ................. ................ ................. ........... 199\n17.3.1.16-bit Timer with Auto-Rel oad............... .............. .............. .............. ....... 199\n17.3.2.8-bit Timers with Auto-Rel oad............... .............. .............. .............. ....... 200\n18.Programmable Counter Array ...... ................ ................. .............. .............. ......... 203\n18.1.PCA Counter/Timer ............. ................. ................ ................. ................ ......... 204\n18.2.Capture/Compare Modules ...... ................ ................. .............. .............. ......... 205\n18.2.1.Edge-triggered Captur e Mode................. .............. ............... ........... ....... 206\n18.2.2.Software Timer (Compare) Mode................. ................. ................ ......... 207\nC8051F310/1/2/3/4/5/6/7\n6 Rev. 1.818.2.3.High-Speed Output Mode ..... .............. .............. .............. .............. ......... 208\n18.2.4.Frequency Output Mode ....... .............. .............. .............. .............. ......... 209\n18.2.5.8-Bit Pulse Width Modulato r Mode............... ................. ................ ......... 210\n18.2.6.16-Bit Pulse Width Modulat or Mode............. ................. ................ ......... 211\n18.3.Watchdog Timer Mode .... .............. .............. .............. .............. .............. ......... 212\n18.3.1.Watchdog Timer Operation... .............. .............. .............. .............. ......... 212\n18.3.2.Watchdog Timer Usage ........ .............. .............. .............. .............. ......... 213\n18.4.Register Descriptions for PCA. ............... ................ ................. .............. ......... 215\n19.Revision Specific Behavior ......... ................ ................ ................. .............. ......... 221\n19.1.Revision Identification.......... ................. ................ ................. ................ ......... 221\n19.2.Reset Behavior......... ................ ................ ................. .............. .............. ......... 221\n19.2.1.Weak Pullups on GPIO Pins ................. .............. .............. .............. ....... 221\n19.2.2.VDD Moni tor and the RST  Pin ............ .............. .............. .............. ......... 221\n19.3.PCA Counter ............ ................ ................ ................. .............. .............. ......... 222\n20.C2 Interface................ ................ ................. ................ ................. ................ ......... 223\n20.1.C2 Interface Registers......... ................. ................ ................. ................ ......... 223\n20.2.C2 Pin Sharing ......... ................ ................ ................. .............. .............. ......... 225\nDocument Change List............... .............. .............. .............. .............. .............. ........  226\nContact Information.......... ................. ................ ................ ................. .............. ........  228\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 7List of Figures\n1. System Overview\nFigure 1.1. C8051F310 Block Diagr am...................... ................ ................. ............. 19\nFigure 1.2. C8051F311 Block Diagr am...................... ................ ................. ............. 20\nFigure 1.3. C8051F312 Block Diagr am...................... ................ ................. ............. 21\nFigure 1.4. C8051F313 Block Diagr am...................... ................ ................. ............. 22\nFigure 1.5. C8051F314 Block Diagr am...................... ................ ................. ............. 23\nFigure 1.6. C8051F315 Block Diagr am...................... ................ ................. ............. 24\nFigure 1.7. C8051F316 Block Diagr am...................... ................ ................. ............. 25\nFigure 1.8. C8051F317 Block Diagr am...................... ................ ................. ............. 26\nFigure 1.9. Comparison of Pe ak MCU Execution Speeds ......... ................. ............. 27\nFigure 1.10. On-Chip Clo ck and Reset................ .............. .............. .............. ........... 28\nFigure 1.11. On-Board Memory Map. ............... ................. .............. .............. ........... 29\nFigure 1.12. Deve lopment/In-System Debug Di agram............. ............ ........... ......... 30\nFigure 1.13. Digital Cro ssbar Diagram ................ .............. .............. .............. ........... 31\nFigure 1.14. PCA Block Diagram.... ................ ................ ................. .............. ........... 32\nFigure 1.15. 12-Bit ADC Block Diagram....... ................ ................. ................ ........... 33\nFigure 1.16. Compar ator0 Block Diagram........ ................. .............. .............. ........... 34\n2. Absolute Maximum Ratings\n3. Global DC Electrical Characteristics4. Pinout and Package Definitions\nFigure 4.1. LQFP-32 Pi nout Diagram (Top View) ............... .............. .............. ......... 41\nFigure 4.2. LQFP-32 Pa ckage Diagram................ .............. .............. .............. ......... 42\nFigure 4.3. Typical LQFP-32 Land ing Diagram............ ................. ................ ........... 43\nFigure 4.4. QFN-28 Pinout Diagr am (Top View) .......... ................. ................ ........... 44\nFigure 4.5. QFN-28 Package Drawin g ................ .............. .............. .............. ........... 45\nFigure 4.6. Typical QFN-28 Landi ng Diagram.............. ................. ................ ........... 46\nFigure 4.7. QFN-24 Pinout Diagr am (Top View) .......... ................. ................ ........... 47\nFigure 4.8. QFN-24 Package Drawin g ................ .............. .............. .............. ........... 48\nFigure 4.9. Typical QFN-24 Landi ng Diagram.............. ................. ................ ........... 49\nFigure 4.10. QFN-24 Solder Pa ste Recommendation.... ................. .............. ........... 50\n5. 12-Bit ADC ( ADC0, C8051F310/1/2/3/6 only)\nFigure 5.1. ADC0 Functional Bl ock Diagram.............. ................ ................. ............. 51\nFigure 5.2. Typical Temperatur e Sensor Transfer Function..... ............ ........... ......... 52\nFigure 5.3. Temperature Sensor  Error with 1-Point Calibration ........... ........... ......... 53\nFigure 5.4. 12-Bit ADC Track and Conversion Example Timing ................. ............. 55\nFigure 5.5. ADC0 Equiva lent Input Circuits. ............... ................ ................. ............. 56\nFigure 5.6. ADC Window Compare Example: Right-Jus tified Single-Ended Data ... 63\nFigure 5.7. ADC Window Co mpare Example: Left-Justifi ed Single-Ended Data ..... 63\nFigure 5.8. ADC Window Co mpare Example: Right-Justifi ed Differential Data ....... 64\nFigure 5.9. ADC Window Com pare Example: Left-Justified Di fferential Data.......... 64\n6. Voltage Reference (C8051F310/1/2/3/6 only)\nFigure 6.1. Voltage Reference Functional Block Diagram ....... ............ ........... ......... 67\nC8051F310/1/2/3/4/5/6/7\n8 Rev. 1.87. Comparators\nFigure 7.1. Comparator0 Functi onal Block Diagram .... ................. ................ ........... 69\nFigure 7.2. Comparator1 Functi onal Block Diagram .... ................. ................ ........... 70\nFigure 7.3. Comparator Hysteres is Plot ........... ................. .............. .............. ........... 71\n8. CIP-51 Microcontroller \nFigure 8.1. CIP-51 Block Diagram.. ................ ................ ................. .............. ........... 79\nFigure 8.2. Memory Map ........... ................ ................. ................ ................. ............. 85\n9. Reset Sources\nFigure 9.1. Reset Sources......... ................ ................. ................ ................. ........... 105\nFigure 9.2. Power-On and VDD Monitor Reset Timing ....... .............. .............. ....... 106\n10.Flash Memory  \nFigure 10.1. Flash Program Memo ry Map.................. ................ ................. ........... 113\n11.External RAM\n12.Oscillators\nFigure 12.1. Oscillator Diagram............... .............. .............. .............. .............. ....... 121\nFigure 12.2. 32.768 kHz External Crystal Example...... ................. ................ ......... 126\n13.Port Input/Output  \nFigure 13.1. Port I/O Functional Block Diagram................ .............. .............. ......... 129\nFigure 13.2. Port I/O Ce ll Block Diagram ............ .............. .............. .............. ......... 130\nFigure 13.3. Crossbar Priority Decoder with No Pins Sk ipped............... ................ 131\nFigure 13.4. Crossbar Priority Decoder with Crystal Pins  Skipped .......... .............. 132\n14.SMBus\nFigure 14.1. SMBus Block Diagram ............. ................ ................. ................ ......... 145\nFigure 14.2. Typical SMBu s Configuration.......... .............. .............. .............. ......... 146\nFigure 14.3. SMBus Transac tion............. .............. .............. .............. .............. ....... 147\nFigure 14.4. Typical SM Bus SCL Generation........ .............. .............. .............. ....... 151\nFigure 14.5. Typical Ma ster Transmitter Sequence............. .............. .............. ....... 157\nFigure 14.6. Typical Ma ster Receiver Sequence................. .............. .............. ....... 158\nFigure 14.7. Typical Slave Rece iver Sequence............ ................. ................ ......... 159\nFigure 14.8. Typical Slave Trans mitter Sequence........ ................. ................ ......... 160\n15.UART0\nFigure 15.1. UART0 Block Diagram ............. ................ ................. ................ ......... 163\nFigure 15.2. UART0 Baud Rate Logic............ ................ ................. .............. ......... 164\nFigure 15.3. UART Interconnect Di agram ............. .............. .............. .............. ....... 165\nFigure 15.4. 8-Bit UART  Timing Diagram............ .............. .............. .............. ......... 165\nFigure 15.5. 9-Bit UART  Timing Diagram............ .............. .............. .............. ......... 166\nFigure 15.6. UART Multi-Proc essor Mode Interconne ct Diagram .......... ................ 167\n16.Enhanced Serial Peripheral Interface (SPI0)\nFigure 16.1. SPI Bl ock Diagram ............ .............. .............. .............. .............. ......... 173\nFigure 16.2. Multiple -Master Mode Connection Diagram...... ............... ........... ....... 176\nFigure 16.3. 3-Wire  Single Master and Sl ave Mode Connection Di agram............. 176\nFigure 16.4. 4-Wire  Single Master and Sl ave Mode Connection Di agram............. 176\nFigure 16.5. Master Mode Data/ Clock Timing.............. ................. ................ ......... 178\nFigure 16.6. Slave Mode  Data/Clock Timing (CKPHA = 0) ... ............... ........... ....... 179\nFigure 16.7. Slave Mode  Data/Clock Timing (CKPHA = 1) ... ............... ........... ....... 179\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 9Figure 16.8. SPI Ma ster Timing (CKPHA = 0).. ................. .............. .............. ......... 183\nFigure 16.9. SPI Ma ster Timing (CKPHA = 1).. ................. .............. .............. ......... 183\nFigure 16.10. SPI Slave Timing (C KPHA = 0).............. ................. ................ ......... 184\nFigure 16.11. SPI Slave Timing (C KPHA = 1).............. ................. ................ ......... 184\n17.Timers \nFigure 17.1. T0 Mode 0 Bl ock Diagram............... .............. .............. .............. ......... 188\nFigure 17.2. T0 Mode 2 Bl ock Diagram............... .............. .............. .............. ......... 189\nFigure 17.3. T0 Mode 3 Bl ock Diagram............... .............. .............. .............. ......... 190\nFigure 17.4. Timer 2 16- Bit Mode Block Diagram .. ............. .............. .............. ....... 195\nFigure 17.5. Timer 2 8- Bit Mode Block Diagram .. ................. ............... ........... ....... 196\nFigure 17.6. Timer 3 16- Bit Mode Block Diagram .. ............. .............. .............. ....... 199\nFigure 17.7. Timer 3 8- Bit Mode Block Diagram .. ................. ............... ........... ....... 200\n18.Programmable Counter Array \nFigure 18.1. PCA Block Diagram.... ................ ................ ................. .............. ......... 203\nFigure 18.2. PCA Counter /Timer Block Diagram.... ............. .............. .............. ....... 204\nFigure 18.3. PCA Interrupt Blo ck Diagram ................. ................ ................. ........... 205\nFigure 18.4. PCA Captur e Mode Diagram............. .............. .............. .............. ....... 206\nFigure 18.5. PCA Software Time r Mode Diagram........ ................. ................ ......... 207\nFigure 18.6. PCA High Speed Output Mode Diagram........... ............... ........... ....... 208\nFigure 18.7. PCA Fr equency Output Mode ......... .............. .............. .............. ......... 209\nFigure 18.8. PCA 8-Bit PWM Mode Diagram .......... .............. ............... ........... ....... 210\nFigure 18.9. PCA 16-Bit PWM Mode ................ ................. .............. .............. ......... 211\nFigure 18.10. PCA Module 4 with Watchdog Ti mer Enabled ..... ................. ........... 212\n19.Revision Specific Behavior\nFigure 19.1. Reading Package Marking ........... ................. .............. .............. ......... 221\n20.C2 Interface\nFigure 20.1. Typical C2 Pin Sharing.......... ................. ................ ................. ........... 225\nC8051F310/1/2/3/4/5/6/7\n10 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 11List of Tables\n1. System Overview\nTable 1.1. Product Select ion Guide ................. ................. .............. .............. ........... 18\n2. Absolute Maximum Ratings\nTable 2.1. Absolute Maximum Rati ngs* ............. .............. .............. .............. ........... 35\n3. Global DC Electrical Characteristics\nTable 3.1. Global DC Electrical Characteristics ........... ................. ................ ........... 36\nTable 3.2. Electrical Characte ristics Quick Referenc e .............. ................. ............. 38\n4. Pinout and Package Definitions\nTable 4.1. Pin Definitions for t he C8051F31x ............ ................ ................. ............. 39\nTable 4.2. LQFP-32 Package Dime nsions ................ ................ ................. ............. 42\nTable 4.3. LQFP-32 Landi ng Pattern Dimensions ................ ............... ........... ......... 43\nTable 4.4. QFN-28 Package  Dimensions ........... .............. .............. .............. ........... 45\nTable 4.5. QFN-28 Landing Pattern Dimensions .... .............. ............... ........... ......... 46\nTable 4.6. QFN-24 Package  Dimensions ........... .............. .............. .............. ........... 48\n5. 12-Bit ADC ( ADC0, C8051F310/1/2/3/6 only)\nTable 5.1. ADC0 Elec trical Characteristics .... ................ ................. .............. ........... 65\n6. Voltage Reference (C8051F310/1/2/3/6 only)\nTable 6.1. External Vo ltage Reference Circuit Electrical Characteristics ................ 68\n7. Comparators\nTable 7.1. Comparator Electrical  Characteristics ... .............. ............... ........... ......... 78\n8. CIP-51 Microcontroller \nTable 8.1. CIP-51 Instruction Se t Summary .............. ................ ................. ............. 81\nTable 8.2. Special Function Regi ster (SFR) Memory Map ...... ............ ........... ......... 87\nTable 8.3. Special Functi on Registers ................ .............. .............. .............. ........... 88\nTable 8.4. Interrupt Summ ary ................. .............. .............. .............. .............. ......... 96\n9. Reset Sources\nTable 9.1. Reset Electric al Characteristics ...... ................. .............. .............. ......... 110\n10.Flash Memory  \nTable 10.1. Flash Electric al Characteristics ....... .............. .............. .............. ......... 112\nTable 10.2. Flash Security Summar y ................. .............. .............. .............. ......... 114\n11.External RAM12.Oscillators\nTable 12.1. Internal Oscillator El ectrical Characteristics ...... ............... ........... ....... 123\n13.Port Input/Output  \nTable 13.1.  Port I/O DC Electr ical Characteristics . .............. ............... ........... ....... 143\n14.SMBus\nTable 14.1. SMBus Clock Source Selection .............. ................ ................. ........... 150\nTable 14.2. Minimum SDA Setup and  Hold Times ...... ................. ................ ......... 151\nC8051F310/1/2/3/4/5/6/7\n12 Rev. 1.8Table 14.3. Sources for Hardwa re Changes to SMB0CN ......... ................. ........... 155\nTable 14.4. SMBus Status Decoding ............... ................. .............. .............. ......... 161\n15.UART0\nTable 15.1. Timer Settings  for Standard Baud Rates \uf020\nUsing the Internal Osci llator ............ .............. .............. .............. ......... 170\nTable 15.2. Timer Settings  for Standard Baud Rates \uf020\nUsing an External 25 MHz Osc illator ............. .............. .............. ......... 170\nTable 15.3. Timer Settings  for Standard Baud Rates \uf020\nUsing an External 22.1184 MHz Oscillator ................ ................ ......... 171\nTable 15.4. Timer Settings  for Standard Baud Rates \uf020\nUsing an External 18.432 MHz Oscillator ...... .............. .............. ......... 171\nTable 15.5. Timer Settings  for Standard Baud Rates \uf020\nUsing an External 11.0592 MHz Oscillator ................ ................ ......... 172\nTable 15.6. Timer Settings  for Standard Baud Rates \uf020\nUsing an External 3.6864 MHz Oscillator ...... .............. .............. ......... 172\n16.Enhanced Serial Peripheral Interface (SPI0)\nTable 16.1. SPI Slave Timing Para meters ......... .............. .............. .............. ......... 185\n17.Timers 18.Programmable Counter Array \nTable 18.1. PCA Timebase Input Op tions ............ .............. .............. .............. ....... 204\nTable 18.2. PCA0CPM Register  Settings for PCA Captur e/Compare Modules .... 205\nTable 18.3. Watchdog Time r Timeout Intervals\n1 ..................................................................214\n19.Revision Specific Behavior\n20.C2 Interface\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 13List of Registers\nSFR Definition 5.1. AMX0P: AMUX0 Positive Channel Select  . . . . . . . . . . . . . . . . . . . 57\nSFR Definition 5.2. AMX0N: AMUX 0 Negative Channel Select . . . . . . . . . . . . . . . . . . 58\nSFR Definition 5.3. ADC0CF: ADC0 C onfiguration  . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\nSFR Definition 5.4. ADC0H: ADC0 Data Word MSB  . . . . . . . . . . . . . . . . . . . . . . . . . . 59\nSFR Definition 5.5. ADC0L: ADC0 Data Word LSB  . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\nSFR Definition 5.6. ADC0CN: ADC0 Control  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\nSFR Definition 5.7. ADC0GTH: A DC0 Greater-Than Data High Byte  . . . . . . . . . . . . . 61\nSFR Definition 5.8.  A DC0GTL: ADC0 Greater-Than Data Low Byte . . . . . . . . . . . . . . 61\nSFR Definition 5.9. ADC0LTH: AD C0 Less-Than Data High Byte  . . . . . . . . . . . . . . . . 62\nSFR Definition 5.10. ADC0LTL: AD C0 Less-Than Data Low Byte . . . . . . . . . . . . . . . . 62\nSFR Definition 6.1. REF0CN: Reference Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\nSFR Definition 7.1. CPT0CN : Comparator0 Control . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\nSFR Definition 7.2. CPT0MX : Comparator0 MUX Select ion  . . . . . . . . . . . . . . . . . . . . 73\nSFR Definition 7.3. CPT0MD : Comparator0 Mode Selection . . . . . . . . . . . . . . . . . . . . 74\nSFR Definition 7.4. CPT1CN : Comparator1 Control . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\nSFR Definition 7.5. CPT1MX : Comparator1 MUX Select ion  . . . . . . . . . . . . . . . . . . . . 76\nSFR Definition 7.6. CPT1MD : Comparator1 Mode Selection . . . . . . . . . . . . . . . . . . . . 77\nSFR Definition 8.1. DPL: Da ta Pointer Low Byte  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\nSFR Definition 8.2. DPH: Data Pointer High Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\nSFR Definition 8.3. SP: Stack Pointer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\nSFR Definition 8.4. PSW: Pr ogram Status Word  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\nSFR Definition 8.5. ACC: Accu mulator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\nSFR Definition 8.6. B: B Register  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\nSFR Definition 8.7. IE: Interrupt Enable   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\nSFR Definition 8.8. IP: Interr upt Priority  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\nSFR Definition 8.9. EIE1: Extended Interrupt Enable 1  . . . . . . . . . . . . . . . . . . . . . . . . 99\nSFR Definition 8.10. EIP1: Extended Interrupt Priority 1  . . . . . . . . . . . . . . . . . . . . . . 100\nSFR Definition 8.11. IT01CF: INT0/I NT1 Configuration  . . . . . . . . . . . . . . . . . . . . . . . 101\nSFR Definition 8.12. PC ON: Power Control  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\nSFR Definition 9.1. VDM0CN : VDD Monitor Control  . . . . . . . . . . . . . . . . . . . . . . . . . 107\nSFR Definition 9.2. RSTSRC: Reset Source  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\nSFR Definition 10.1. PSCTL:  Program Store R/W Control . . . . . . . . . . . . . . . . . . . . . 116\nSFR Definition 10.2. FLKEY:  Flash Lock and Key  . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\nSFR Definition 10.3. FLSCL: Flash Scale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\nSFR Definition 11.1. EMI0 CN: External Memory Interface Cont rol  . . . . . . . . . . . . . . 119\nSFR Definition 12.1. OSCICL: Intern al Oscillator Calibration . . . . . . . . . . . . . . . . . . . 122\nSFR Definition 12.2. OSCICN: Inter nal Oscillator Control  . . . . . . . . . . . . . . . . . . . . . 122\nSFR Definition 12.3. CLKSEL: Clock Select . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\nSFR Definition 12.4. OSCXCN:  External Oscillator C ontrol  . . . . . . . . . . . . . . . . . . . . 125\nSFR Definition 13.1. XBR0: Port I/O Crossbar Regist er 0  . . . . . . . . . . . . . . . . . . . . . 134\nSFR Definition 13.2. XBR1: Port I/O Crossbar Regist er 1  . . . . . . . . . . . . . . . . . . . . . 135\nSFR Definition 13.3. P0: Port0  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\nSFR Definition 13.4. P0MDIN : Port0 Input Mode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\nC8051F310/1/2/3/4/5/6/7\n14 Rev. 1.8SFR Definition 13.5. P0MDOUT: Port 0 Output Mode . . . . . . . . . . . . . . . . . . . . . . . . . 137\nSFR Definition 13.6. P0SKI P: Port0 Skip  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137\nSFR Definition 13.7. P1: Port1  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\nSFR Definition 13.8. P1MDIN : Port1 Input Mode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\nSFR Definition 13.9. P1MDOUT: Port 1 Output Mode . . . . . . . . . . . . . . . . . . . . . . . . . 139\nSFR Definition 13.10. P1 SKIP: Port1 Skip  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139\nSFR Definition 13.11. P2: Port2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\nSFR Definition 13.12. P2MDIN : Port2 Input Mode  . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\nSFR Definition 13.13. P2MDOUT: Port 2 Output Mode . . . . . . . . . . . . . . . . . . . . . . . . 141\nSFR Definition 13.14. P2 SKIP: Port2 Skip  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\nSFR Definition 13.15. P3: Port3  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\nSFR Definition 13.16. P3MDIN : Port3 Input Mode  . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\nSFR Definition 13.17. P3MDOUT: Port 3 Output Mode . . . . . . . . . . . . . . . . . . . . . . . . 143\nSFR Definition 14.1. SMB0CF: SMBu s Clock/Configuration  . . . . . . . . . . . . . . . . . . . 152\nSFR Definition 14.2. SMB0CN : SMBus Control  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\nSFR Definition 14.3. SMB0DAT: SMBus Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\nSFR Definition 15.1. SCON0: Serial Port 0 Control  . . . . . . . . . . . . . . . . . . . . . . . . . . 168\nSFR Definition 15.2. SBUF0:  Serial (UART0) Port Data Buffer  . . . . . . . . . . . . . . . . . 169\nSFR Definition 16.1. SPI0CF G: SPI0 Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . 180\nSFR Definition 16.2. SPI0CN: SPI0 Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\nSFR Definition 16.3. SPI0CK R: SPI0 Clock Rate . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\nSFR Definition 16.4. SPI0DAT: SPI0 Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\nSFR Definition 17.1. TCON: Timer Cont rol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191\nSFR Definition 17.2. TMOD: Ti mer Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192\nSFR Definition 17.3. CKCON: Clock Control  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\nSFR Definition 17.4. TL0: Timer 0 Low Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nSFR Definition 17.5. TL1: Timer 1 Low Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nSFR Definition 17.6. TH0: Timer 0 Hi gh Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nSFR Definition 17.7. TH1: Timer 1 Hi gh Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nSFR Definition 17.8. TMR2CN: Timer 2 Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197\nSFR Definition 17.9. TMR2RLL: Ti mer 2 Reload Register Low Byte  . . . . . . . . . . . . . 198\nSFR Definition 17.10. TMR2 RLH: Timer 2 Reload Re gister High Byte  . . . . . . . . . . . 198\nSFR Definition 17.11. TMR2L:  Timer 2 Low Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198\nSFR Definition 17.12. TMR2H Timer 2 High Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198\nSFR Definition 17.13. TMR3CN: Timer 3 Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201\nSFR Definition 17.14. TMR3 RLL: Timer 3 Reload Regi ster Low Byte  . . . . . . . . . . . . 202\nSFR Definition 17.15. TMR3 RLH: Timer 3 Reload Re gister High Byte  . . . . . . . . . . . 202\nSFR Definition 17.16. TMR3L:  Timer 3 Low Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\nSFR Definition 17.17. TMR3H Timer 3 High Byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\nSFR Definition 18.1. PCA0CN: PCA Control  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\nSFR Definition 18.2. PCA0MD: PCA Mode   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nSFR Definition 18.3. PCA0CPMn : PCA Capture/Compare Mode Re gisters  . . . . . . . 217\nSFR Definition 18.4. PCA0L:  PCA Counter/Timer Low Byte  . . . . . . . . . . . . . . . . . . . 218\nSFR Definition 18.5. PCA0H: PCA Counter/Timer High Byte . . . . . . . . . . . . . . . . . . . 218\nSFR Definition 18.6. PCA0CPLn: PCA Capture Module Low Byte . . . . . . . . . . . . . . . 218\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 15SFR Definition 18.7. PCA0CPHn: PCA Capture Module High Byte . . . . . . . . . . . . . . 219\nC2 Register Definition 20.1. C2ADD:  C2 Address  . . . . . . . . . . . . . . . . . . . . . . . . . . . 223\nC2 Register Definition 20.2. DEVICE ID: C2 Device ID . . . . . . . . . . . . . . . . . . . . . . . . 223\nC2 Register Definition 20.3. REVID:  C2 Revision ID  . . . . . . . . . . . . . . . . . . . . . . . . . 224\nC2 Register Definition 20.4. FP CTL: C2 Flash Programming Cont rol  . . . . . . . . . . . . 224\nC2 Register Definition 20.5. FP DAT: C2 Flash Programming Data  . . . . . . . . . . . . . . 224\nC8051F310/1/2/3/4/5/6/7\n16 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 171. System Overview\nC8051F31x devices are fully integr ated mixed-signal System-on-a-Ch ip MCUs. Highlighted features are \nlisted below. Refer to Table  1.1 for specific product feature selection.\n• High-speed pipelined 8051-compatible microcontroller core (up to 25  MIPS)\n• In-system, full-speed, non-intrusive debug interface (on-chip)\n• True 12-bit 200  ksps 25-channel single-ended/diffe rential ADC with analog multiplexer \n(C8051F310/1/2/3/6)\n• Precision programmable 25  MHz internal oscillator\n• 16k kB (C8051F310/1/6/7) or 8  kB (C8051F312/3/4/5) of on-chip Flash memory\n• 1280 bytes of on-chip RAM\n• SMBus/I2C, Enhanced UART, and Enhanced SPI serial interfaces implemented in hardware\n• Four general-purpose 16-bit timers\n• Programmable Counter/Timer Array (PCA) with five capture/compare modules and Watchdog Timer \nfunction\n• On-chip Power-On Reset, VDD Monitor, and Temperature Sensor\n• On-chip Voltage Comparators (2)\n• 29/25/21 Port I/O (5  V tolerant)\nWith on-chip Power-On Reset, VDD monitor, Watchdog Timer, and cloc k oscillator, the C8051F31x devices \nare truly stand-alone System-on-a-Chip solutions. The Flash memory can be reprogrammed even in-cir -\ncuit, providing non-volatile data storage, and also a llowing field upgrades of the 8051 firmware. User soft -\nware has complete control of all peripherals, and ma y individually shut down any or all peripherals for \npower savings.\nThe on-chip Silicon Labs 2- Wire (C2) Development Interface allo ws non-intrusive (uses no on-chip \nresources), full speed, in-circuit debugging using the production MCU installed in the final application. This \ndebug logic supports inspection and modification of  memory and registers, setting breakpoints, single \nstepping, run and halt commands. All analog and digita l peripherals are fully functional while debugging \nusing C2. The two C2 interface pins can be shared with user functions, allowing in-system programming \nand debugging without occupying package pins.\nEach device is specified for 2.7-to-3.6  V operation over the industrial temperature range (–45 to +85  °C). \nThe Port I/O and RST pins are tolerant of input signals up to 5  V. The C8051F31x are available in 32-pin \nLQFP, 28-pin QFN, and 24-pin QFN packages. See Table  1.1 for ordering part numbers. Note: QFN pack -\nages are also referred to as MLP or MLF packages.\nC8051F310/1/2/3/4/5/6/7\n18 Rev. 1.8Table  1.1. Product Selection Guide  Ordering Part Number\nMIPS (Peak)\nFlash Memory\nRAM\nCalibrated Internal 24.5  MHz Oscillator\nSMBus/I2C\nEnhanced SPI\nUART\nTimers (16-bit)\nProgrammable Counter Array\nDigital Port I/Os\n10-bit 200  ksps ADC\nTemperature Sensor\nAnalog Comparators\nLead-free (RoHS Compliant)\nPackage\nC8051F310 25 16 1280\uf050\uf050\uf050\uf050\uf050\uf050 29\uf050\uf050 2 -LQFP-32 \nC8051F310-GQ 25 16 1280\uf050\uf050\uf050\uf050\uf050\uf050 29\uf050\uf050 2\uf050LQFP-32\nC8051F311 25 16 1280\uf050\uf050\uf050\uf050\uf050\uf050 25\uf050\uf050 2 - QFN-28 \nC8051F311-GM 25 16 1280\uf050\uf050\uf050\uf050\uf050\uf050 25\uf050\uf050 2\uf050 QFN-28\nC8051F312 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 29\uf050\uf050 2 -LQFP-32 \nC8051F312-GQ 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 29\uf050\uf050 2\uf050LQFP-32\nC8051F313 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 25\uf050\uf050 2 - QFN-28 \nC8051F313-GM 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 25\uf050\uf050 2\uf050 QFN-28\nC8051F314 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 29 - - 2 -LQFP-32 \nC8051F314-GQ 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 29 - - 2\uf050LQFP-32\nC8051F315 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 25 - - 2 - QFN-28 \nC8051F315-GM 25 8 1280\uf050\uf050\uf050\uf050\uf050\uf050 25 - - 2\uf050 QFN-28 \nC8051F316-GM 25 16 1280\uf050\uf050\uf050\uf050\uf050\uf050 21\uf050\uf050 2\uf050 QFN-24 \nC8051F317-GM 25 16 1280\uf050\uf050\uf050\uf050\uf050\uf050 21 - - 2\uf050 QFN-24\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 19 \nFigure 1.1. C8051F310  Block DiagramUART\n16kbyte\nFLASH\n256 byte\nSRAM\nPOR\nSFR Bus8\n0\n5\n1\nC\no\nr\neReset\n/RST/C2CK\nExternal\nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital\nPowerP\n0\nD\nr\nv\n1K byte\nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1P0.2/XTAL1P0.3/XTAL2P0.4/TX\nP0.5/RX\nP0.6/CNVSTP0.7\nSPIVDD\nGND\nC\nRO\nSS\nB\nA\nRP\n1\nD\nr\nvP1.0\nP1.1P1.2P1.3P1.4P1.5P1.6P1.7Port 0\nLatch\nSMBusTimer\n0,1,2,3 /\nRTCPort 1\nLatch\n2%\nInternal\nOscillatorSystem ClockP\n2\nD\nr\nv\nP\n3\nD\nr\nvP2.0\nP2.1P2.2P2.3P2.4P2.5P2.6P2.7\nP3.0/C2D\nP3.1P3.2P3.3\nP3.4\n10-bit\n200kspsADCA\nM\nU\nXAIN0-AIN20VREF VDDCP1+\n-\nTemp\nVDDCP0+\n-C2D\nPort 2\nLatch\nPort 3\nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\n20 Rev. 1.8 \nFigure 1.2. C8051F311 Block DiagramUART\n16kbyte\nFLASH\n256 byte\nSRAM\nPOR\nSFR Bus8\n0\n5\n1\nC\no\nr\neReset\n/RST/C2CK\nExternal\nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital\nPowerP\n0\nD\nr\nv\n1K byte\nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1\nP0.2/XTAL1P0.3/XTAL2P0.4/TX\nP0.5/RX\nP0.6/CNVSTP0.7\nSPIVDD\nGND\nC\nRO\nS\nSBA\nRP\n1\nD\nr\nvP1.0\nP1.1\nP1.2\nP1.3P1.4P1.5P1.6\nP1.7Port 0\nLatch\nSMBusTimer\n0,1,2,3 /\nRTCPort 1\nLatch\n2%\nInternal\nOscillatorSystem ClockP\n2\nD\nr\nv\nP\n3\nD\nr\nvP2.0\nP2.1P2.2P2.3P2.4\nP2.5\nP2.6P2.7\nP3.0/C2D\n10-bit\n200kspsADCA\nM\nU\nXAIN0-AIN20VREF VDDCP1+\n-\nTemp\nVDDCP0+\n-C2D\nPort 2\nLatch\nPort 3\nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 21 \nFigure 1.3. C8051F312 Block DiagramUART\n8 kB \nFLASH\n256 byte \nSRAM\nPOR\nSFR Bus8\n0\n5\n1 \nC\no\nr\neReset\n/RST/C2CK\nExternal \nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital \nPowerP\n0\n \nD\nr\nv\n1K byte \nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1\nP0.2/XTAL1\nP0.3/XTAL2\nP0.4/TX\nP0.5/RX\nP0.6/CNVST\nP0.7\nSPIVDD\nGND\nC\nRO\nSSB\nA\nRP\n1\n \nD\nr\nvP1.0\nP1.1\nP1.2\nP1.3\nP1.4\nP1.5\nP1.6\nP1.7Port 0 \nLatch\nSMBusTimer \n0,1,2,3 / \nRTCPort 1 \nLatch\n2%\nInternal \nOscillatorSystem ClockP\n2\n \nD\nr\nv\nP\n3\n \nD\nr\nvP2.0\nP2.1\nP2.2\nP2.3\nP2.4\nP2.5\nP2.6\nP2.7\nP3.0/C2D\nP3.1\nP3.2\nP3.3\nP3.4\n10-bit \n200ksps \nADCA\nM\nU\nXAIN0-AIN20VREF VDDCP1+\n-\nTemp\nVDDCP0+\n-C2D\nPort 2 \nLatch\nPort 3 \nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\n22 Rev. 1.8 \nFigure 1.4. C8051F313 Block DiagramUART\n8 kB \nFLASH\n256 byte \nSRAM\nPOR\nSFR Bus8\n0\n51 \nC\no\nr\neReset\n/RST/C2CK\nExternal \nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital \nPowerP\n0\n \nD\nr\nv\n1K byte \nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1\nP0.2/XTAL1\nP0.3/XTAL2\nP0.4/TX\nP0.5/RX\nP0.6/CNVST\nP0.7\nSPIVDD\nGND\nC\nRO\nSSBA\nRP\n1\n \nD\nr\nvP1.0\nP1.1\nP1.2\nP1.3P1.4\nP1.5\nP1.6\nP1.7Port 0 \nLatch\nSMBusTimer \n0,1,2,3 / \nRTCPort 1 \nLatch\n2%\nInternal \nOscillatorSystem ClockP\n2\n \nD\nr\nv\nP\n3\n \nD\nr\nvP2.0\nP2.1\nP2.2\nP2.3\nP2.4\nP2.5\nP2.6\nP2.7\nP3.0/C2D\n10-bit \n200ksps ADCA\nM\nU\nXAIN0-AIN20VREF VDDCP1+\n-\nTemp\nVDDCP0+\n-C2D\nPort 2 \nLatch\nPort 3 \nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 23 \nFigure 1.5. C8051F314 Block DiagramUART\n8 kB \nFLASH\n256 byte \nSRAM\nPOR\nSFR Bus8\n051 \nC\no\nr\neReset\n/RST/C2CK\nExternal \nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital \nPowerP\n0\n \nD\nr\nv\n1K byte \nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1\nP0.2/XTAL1P0.3/XTAL2P0.4/TX\nP0.5/RX\nP0.6/CNVSTP0.7\nSPIVDD\nGND\nC\nRO\nS\nSB\nA\nRP\n1\n \nD\nr\nvP1.0\nP1.1P1.2P1.3\nP1.4\nP1.5P1.6P1.7Port 0 \nLatch\nSMBusTimer \n0,1,2,3 / \nRTCPort 1 \nLatch\n2%\nInternal \nOscillatorSystem ClockP\n2\n \nD\nr\nv\nP\n3\n \nD\nr\nvP2.0\nP2.1P2.2\nP2.3\nP2.4P2.5P2.6\nP2.7\nP3.0/C2D\nP3.1\nP3.2P3.3P3.4\nCP1+\n-CP0+\n-C2D\nPort 2 \nLatch\nPort 3 \nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\n24 Rev. 1.8 \nFigure 1.6. C8051F315 Block DiagramUART\n8 kB \nFLASH\n256 byte \nSRAM\nPOR\nSFR Bus8\n05\n1 \nC\no\nr\neReset\n/RST/C2CK\nExternal \nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital \nPowerP\n0\n \nD\nr\nv\n1K byte \nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1\nP0.2/XTAL1P0.3/XTAL2\nP0.4/TX\nP0.5/RXP0.6/CNVST\nP0.7\nSPIVDD\nGND\nC\nR\nO\nSSB\nA\nRP\n1\n \nD\nr\nvP1.0\nP1.1\nP1.2P1.3\nP1.4\nP1.5P1.6\nP1.7Port 0 \nLatch\nSMBusTimer \n0,1,2,3 / \nRTCPort 1 \nLatch\n2%\nInternal \nOscillatorSystem ClockP\n2\n \nD\nr\nv\nP\n3\n \nD\nr\nvP2.0\nP2.1\nP2.2\nP2.3P2.4\nP2.5\nP2.6P2.7\nP3.0/C2D\nCP1+\n-CP0+\n-C2D\nPort 2 \nLatch\nPort 3 \nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 25Figure 1.7. C8051F316 Block DiagramUART\n16 kB \nFLASH\n256 byte \nSRAM\nPOR\nSFR Bus8\n05\n1 \nC\no\nr\neReset\n/RST/C2CK\nExternal \nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital \nPowerP\n0\n \nD\nr\nv\n1 kB \nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1\nP0.2/XTAL1\nP0.3/XTAL2\nP0.4/TXP0.5/RX\nP0.6/CNVST\nP0.7\nSPIVDD\nGND\nC\nRO\nS\nS\nBA\nRP\n1\n \nD\nr\nvP1.0\nP1.1P1.2\nP1.3\nP1.4\nP1.5Port 0 \nLatch\nSMBusTimer \n0,1,2,3 / \nRTCPort 1 \nLatch\n2%\nInternal \nOscillatorSystem ClockP\n2\n \nD\nr\nv\nP\n3\n \nD\nr\nvP2.0\nP2.1\nP2.2P2.3\nP2.4\nP2.5\nP3.0/C2D\n10-bit \n200 ksps \nADCA\nM\nU\nXAIN0–AIN20VREF VDDCP1+\n-\nTemp\nVDDCP0+\n-C2D\nPort 2 \nLatch\nPort 3 \nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\n26 Rev. 1.8Figure 1.8. C8051F317 Block DiagramUART\n16 kB \nFLASH\n256 byte \nSRAM\nPOR\nSFR Bus8\n0\n5\n1 \nC\no\nr\neReset\n/RST/C2CK\nExternal \nOscillator\nCircuitDebug HW\nBrown-\nOutAnalog/Digital \nPowerP\n0\n \nD\nr\nv\n1 kB \nSRAM\nXTAL1\nXTAL2P0.0/VREF\nP0.1\nP0.2/XTAL1\nP0.3/XTAL2\nP0.4/TXP0.5/RX\nP0.6/CNVST\nP0.7\nSPIVDD\nGND\nC\nRO\nS\nSBA\nRP\n1\n \nD\nr\nvP1.0\nP1.1\nP1.2P1.3\nP1.4\nP1.5Port 0 \nLatch\nSMBusTimer \n0,1,2,3 / \nRTCPort 1 \nLatch\n2%\nInternal \nOscillatorSystem ClockP\n2\n \nD\nr\nv\nP\n3\n \nD\nr\nvP2.0\nP2.1\nP2.2P2.3\nP2.4\nP2.5\nP3.0/C2D\nCP1+\n-CP0+\n-C2D\nPort 2 \nLatch\nPort 3 \nLatchPCA/\nWDT\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 271.1. CIP-51™ Microcontroller Core\n1.1.1. Fully 8051 Compatible\nThe C8051F31x family utilizes Silicon Laboratories\' proprietary CIP-51 mi crocontroller core. The CIP-51 is \nfully compatible with the MCS-51™ instruction set; standard 803x/805x assemblers and compilers can be used to develop software. The CIP-51 core offers all the peripherals included with a standard 8052, includ\n-\ning four 16-bit counter/timers, a full-duplex UART wit h extended baud rate configuration, an enhanced SPI \nport, 1280  bytes of internal RAM, 128  byte Special Function Register (S FR) address space, and 29/25/21 \nI/O pins.\n1.1.2. Improved Throughput\nThe CIP-51 employs a pipelined architecture that grea tly increases its instruction throughput over the stan -\ndard 8051 architecture. In a standar d 8051, all instructions except for MUL and DIV take 12 or 24 system \nclock cycles to execute with a ma ximum system clock of 12-to-24  MHz. By contrast, the CIP-51 core exe -\ncutes 70% of its instructions in one or two system clock cycles, with only four inst ructions taking more than \nfour system clock cycles. \nThe CIP-51 has a total of 109 instructions. The table below shows the total number of instructions that \nrequire each execution time.\nWith the CIP-51\'s maximum system clock at 25  MHz, it has a peak throughput of 25  MIPS. Figure  1.9 \nshows a comparison of peak throughputs for variou s 8-bit microcontroller cores with their maximum sys -\ntem clocks.\nFigure 1.9. Comparison of Peak MCU Execution SpeedsClocks to Execute 1 2 2/3 3 3/4 4 4/5 5 8\nNumber of Instructions 26 50 5 14 7 3 1 2 1\n5101520\nADuC812 \n8051\n(16 MHz clk)Philips\n 80C51\n(33 MHz clk)Microchip\nPIC17C75x\n(33 MHz clk)Silicon Labs\nCIP-51\n(25 MHz clk)MIPS25\nC8051F310/1/2/3/4/5/6/7\n28 Rev. 1.81.1.3. Additional Features\nThe C8051F31x SoC family includes several key enhancements to the CIP-51 core and peripherals to \nimprove performance and ease of use in end applications.\nThe extended interrupt handler provides 14  interrupt sources into the CIP-51 (as opposed to 7 for the stan -\ndard 8051), allowing numerous analog and digital peripherals to interrupt the controller. An interrupt driven system requires less interv ention by the MCU, giving it more effe ctive throughput. The extra interrupt \nsources are very useful when build ing multi-tasking, real-time systems.\nEight reset sources are available: power-on reset circuitry (POR), an on-chip VDD monitor (forces reset \nwhen power supply voltage drops below VRST as given in Table  9.1 on page  110), a Watchdog Timer, a \nMissing Clock Detector, a voltage level detection from Comparator0, a forced software reset, an external \nreset pin, and an errant Flash read/write protection circuit. Each reset source except for the POR, Reset Input Pin, or Flash error may be disabled by the us er in software. The WDT may be permanently enabled \nin software after a power-on reset during MCU initialization.\nThe internal oscillator is factory calibrated to 24.5  MHz ±2%. An external oscillato r drive circuit is also \nincluded, allowing an external crystal, ceramic resonator, capacitor, RC, or CMOS clock source to generate the system clock. If desired, the system clock source  may be switched on-the-fly between the internal and \nexternal oscillator circuits. An external oscillator can be extremely useful in lo w power applications, allow\n-\ning the MCU to run from a slow (power saving) exter nal crystal source, while periodically switching to the \nfast internal oscillator as needed.\nFigure 1.10. On-Chip Clock and ResetPCA\nWDTMissing\nClock\nDetector\n(one-\nshot)\n(Software Reset)\nSystem ResetReset\nFunnelPx.x\nPx.x\nEN\nSWRSF\n Internal\nOscillator\nSystemClock\nCIP-51\nMicrocontroller\nCore\nExtended Interrupt\nHandlerClock SelectEN WDT\nEnableMCD\nEnable\nXTAL1\nXTAL2External\nOscillator\nDriveErrant\nFLASH\nOperation/RST\n(wired-OR)Power On\nReset\n\'0\'\n+-Comparator 0\nC0RSEFVDD\n+-Supply\nMonitor\nEnable\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 291.2. On-Chip Memory\nThe CIP-51 has a standard 8051 program and data addr ess configuration. It in cludes 256 bytes of data \nRAM, with the upper 128 bytes dual-mapped. Indirect addressing accesses the upper 128 bytes of general \npurpose RAM, and direct addressing  accesses the 128 byte SFR addre ss space. The lower 128 bytes of \nRAM are accessible via direct and indirect addressing. The first 32 bytes are addressable as four banks of \ngeneral purpose registers, and the next 16 byte s can be byte addressable or bit addressable.\nProgram memory consists of 8 or 16k  kB of Flash. This memory may be reprogrammed in-system in 512 \nbyte sectors, and requires no special off-chip programming voltage. See Figure  1.11 for the MCU system \nmemory map.\nFigure 1.11. On-Board Memory MapPROGRAM/DATA MEMORY \n(Flash)\n(Direct and Indirect \nAddressing)\n0x000x7FUpper 128 RAM \n(Indirect Addressing \nOnly)0x800xFFSpecial Function \nRegister\'s \n(Direct Addressing Only)DATA MEMORY (RAM)\nGeneral Purpose \nRegisters0x1F0x200x2FBit Addressable Lower 128 RAM \n(Direct and Indirect Addressing)0x30INTERNAL DATA  ADDRESS SPACE\nEXTERNAL DATA ADDRESS SPACE\nXRAM - 1024 Bytes\n(accessable using MOVX \ninstruction)0x00000x03FFSame 1024 bytes as from \n0x0000 to 0x03FF, wrapped \non 1 kB boundaries\n0x04000xFFFF16 kB Flash\n(In-System \nProgrammable in 512 \nByte Sectors)\n0x0000RESERVED0x3E00\n0x3DFF\n8 kB Flash\n(In-System \nProgrammable in 512 \nByte Sectors)\n0x0000RESERVED0x2000\n0x1FFFC8051F310/1/6/7\nC8051F312/3/4/5\nC8051F310/1/2/3/4/5/6/7\n30 Rev. 1.81.3. On-Chip Debug Circuitry\nThe C8051F31x devices inclu de on-chip Silicon Labs 2-Wire (C2) de bug circuitry that provides non-intru -\nsive, full speed, in-circuit debugging of the production part installed in the end application.\nSilicon Labs\' debugging syst em supports inspection and modificati on of memory and registers, break -\npoints, and single stepping. No additional target RAM, program memory, timers, or communications chan -\nnels are required. All the digital and analog periphera ls are functional and work correctly while debugging. \nAll the peripherals (except for the ADC and  SMBus) are stalled when the MCU is halted, during single \nstepping, or at a breakpoint in order to keep them synchronized.\nThe C8051F310DK development kit provides all the har dware and software necessary to develop applica -\ntion code and perform in-circuit debugging with the C8051F31x MCUs. The kit includes software with a \ndeveloper\'s studio and debugger, an integrated 8051 assembler, a debug adapter, a target application board with the associated MCU installed, and the required cables and wall-mount power supply.\nThe Silicon Labs IDE interface is a vastly superior developing and debu gging configuratio n, compared to \nstandard MCU emulators that use on-board "ICE Chips" and require the MCU in the application board to be socketed. Silicon Labs\' debug para digm increases ease of use and preserves the performance of the \nprecision analog peripherals.\nFigure 1.12. Development/ In-System Debug DiagramTARGET PCBDebug\nAdapter\nVDD GNDC2 (x2), VDD, GNDWindows 98SE or laterSilicon Laboratories Integrated \nDevelopment Environment\nC8051F31x\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 311.4. Programmable Digital I/O and Crossbar\nC8051F310/2/4 devices include 29 I/O pins (three byte-wide Ports and one 5-bit-wide Port); \nC8051F311/3/5 devices include 25 I/ O pins (three byte-wide Ports and one 1-bit-wide Port); C8051F316/7 \ndevices include 21 I/O pins (one byte-wide Port, two 6-bit-wide Ports and one 1-bit-wide Port). The C8051F31x Ports behave like typical 8051 Ports with  a few enhancements. Each Port pin may be config\n-\nured as an analog input or a digital I/O pin. Pins sele cted as digital I/Os may additionally be configured for \npush-pull or open-drain output. The “weak pullups” that  are fixed on typical 8051 devices may be globally \ndisabled, providing powe r savings capabilities. \nThe Digital Crossbar allows mapping of internal digital system resources to Port I/O pins (See Figure  1.13). \nOn-chip counter/timers, serial buses, HW interrupts, comparator output, and other digital signals in the \ncontroller can be configured to appear on the Port I/O pins specified in the Crossbar Control registers. This \nallows the user to select the exact mix of general purpose Port I/O and digital resources needed for the \nparticular application.\nFigure 1.13. Digital Crossbar DiagramXBR0, XBR1, \nPnSKIP Registers\nDigital \nCrossbarPriority \nDecoder\n2\nP0.0\nP0.7PnMDOUT, \nPnMDIN Registers\nUART(Internal Digital Signals)Highest \nPriority\nLowest \nPrioritySYSCLK2SMBus\nT0, T126PCACP1 \nOutputs24SPI\nCP0 \nOutputs2P1.0\nP1.7\nP2.0\nP2.7\nP3.0\nP3.4(Port Latches)P0 (P0.0-P0.7)\n(P1.0-P1.7)\n(P2.0-P2.3)\n(P2.4-P2.7)8\n8\n4\n4P1\nP2Notes:\n1.  P3.1–P3.4 only available on the \nC8051F310/2/4.\n2. P1.6, P1.7, P2.6, P2.7 only \navailable on the C8051F310/1/2/3/4/5\n(P3.0-P3.4)5\nP35P2 \nI/O \nCells\nP3 \nI/O \nCellsP1 \nI/O \nCellsP0 \nI/O \nCells\n88\n8 4\n4\nC8051F310/1/2/3/4/5/6/7\n32 Rev. 1.81.5. Serial Ports\nThe C8051F31x Family includes an SMBus/I2C interface, a full-duplex UART with enhanced baud rate \nconfiguration, and an Enhanced SPI interface. Each of the serial buses is fully implemented in hardware \nand makes extensive use of the CIP-51\'s interrup ts, thus requiring very little CPU intervention.\n1.6. Programmable Counter Array\nAn on-chip Programmable Counter/Timer Array (PCA) is included in addition to the four 16-bit general pur -\npose counter/timers. The PCA consists of a dedicated 16-bit counter/timer time base with five programma -\nble capture/compare modules. The PCA clock is derived from one of six sources: the system clock divided \nby 12, the system clock divided by 4, Timer 0 overflow s, an External Clock Input (E CI), the system clock, or \nthe external oscillator clock source di vided by 8. The ex ternal clock source selecti on is useful for real-time \nclock functionality, where the PCA is clocked by an ex ternal source while  the internal oscillator drives the \nsystem clock. \nEach capture/compare module can be configured to operate in one of six modes: Edge-Triggered Capture, Software Timer, High Speed Output, 8- or 16-bit Pulse Width Modulator, or Frequency Output. Additionally, Capture/Compare Mo dule 4 offers watchdog timer (WDT) capabilit ies. Following a system  reset, Module 4 \nis configured and enabled in WDT mode. The PCA Capture/Compare Module I/O and External Clock Input may be routed to Port I/O via the Digital Crossbar.\nFigure 1.14. PCA Block DiagramCapture/Compare\nModule 1Capture/Compare\nModule 0Capture/Compare\nModule 2Capture/Compare\nModule 3Capture/Compare\nModule 4 / WDT\nCEX1\nECI\nCrossbarCEX2CEX3CEX4\nCEX0\nPort I/O16-Bit Counter/TimerPCA\nCLOCK\nMUXSYSCLK/12\nSYSCLK/4\nTimer 0 Overflow\n   ECI\nSYSCLK\nExternal Clock/8\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 331.7. 12-Bit Analog to Digital Converter\nThe C8051F310/1/2/3/6 devices incl ude an on-chip 12-bit SAR ADC with a 25-channel differential input \nmultiplexer. With a maximum throughput of 200  ksps, the ADC offers true 12-bit accuracy with an INL of \n±1LSB. The ADC system includes a configurable anal og multiplexer that selects both positive and nega -\ntive ADC inputs. Ports1-3 are available as an ADC inputs; additionally, the on-chip Temperature Sensor \noutput and the power supply voltage (VDD) are available as ADC inputs. User firmware may shut down the \nADC to save power.\nConversions can be started in six ways: a software comma nd, an overflow of Timer 0, 1, 2, or 3, or an \nexternal convert start signal. This flexibility allows the start of conver sion to be triggered by software \nevents, a periodic signal (timer overflows), or extern al HW signals. Conversion completions are indicated \nby a status bit and an interrupt (if enabled). The resu lting 12-bit data word is  latched into the ADC data \nSFRs upon completion of a conversion.\nWindow compare registers for the ADC data can be conf igured to interrupt the co ntroller when ADC data is \neither within or outside of a specified range. The ADC can monitor a key voltage continuously in back -\nground mode, but not interrupt the controller unless the converted data is within/outside the specified \nrange.\nFigure 1.15. 12-Bit ADC Block Diagram10-Bit\nSAR\nADCTimer 1 Overflow\nCNVSTR Input\nTimer 3 Overflow\n(+)\n(-)Configuration, Control, and Data Registers\n23-to-1 \nAMUXTemp \nSensor23-to-1 \nAMUX\nVDDP1.0\nP1.7\nP2.0\nP2.7\nGNDP1.0\nP1.7\nP2.0\nP2.7\nP3.0\nP3.4P3.0P3.4 P3.1-3.4 \navailable on\nC8051F310/2 \nP3.1-3.4 \navailable on\nC8051F310/2 Analog Multiplexer\nTimer 0 Overflow\nTimer 2 OverflowStart \nConversion000 AD0BUSY (W)\n001010011\n100\n101\n16\nWindow Compare\nLogicWindow \nCompare\nInterruptADC Data \nRegisters\nEnd of Conversion InterruptP1.6, P1.7 available on \nC8051F310/1/2/3/4/5  \nP2.6, P2.7 available on \nC8051F310/1/2/3/4/5  \nP1.6, P1.7 available on \nC8051F310/1/2/3/4/5  \nP2.6, P2.7 available on \nC8051F310/1/2/3/4/5  \nVREF\nC8051F310/1/2/3/4/5/6/7\n34 Rev. 1.81.8. Comparators\nC8051F31x devices include two on-chip voltage comparat ors that are enabled/disabled and configured via \nuser software. Port I/O pins may be configured as comparator inputs via a selection mux. Two comparator outputs may be routed to a Port pin if desired: a la tched output and/or an unlatched (asynchronous) output. \nComparator response time is programmable, allowi ng the user to select between high-speed and low-\npower modes. Positive and negative hysteresis are also configurable.\nComparator interrupts may be  generated on rising, fallin g, or both edges. When in IDLE mode, these inter -\nrupts may be used as a “wake-up” source. Comparator0 may also be configured as a reset source. \nFigure  1.16 shows he Comparator0 block diagram.\nFigure 1.16. Comparator0 Block DiagramVDDCPT0CN\nReset\nDecision\nTree +\n -\nCrossbarInterrupt\nLogic\nQQSET\nCLRD\nQQSET\nCLRD\n(SYNCHRONIZER)\nGNDCP0 +P1.0\nP1.4P2.0P2.4\nCP0 -P1.1P1.5P2.1\nP2.5CP0EN\nCP0OUT\nCP0RIF\nCP0FIF\nCP0HYP1\nCP0HYP0\nCP0HYN1\nCP0HYN0CPT0MXCMX0N1\nCMX0N0\nCMX0P1\nCMX0P0\nCPT0MDCP0RIE\nCP0FIE\nCP0MD1\nCP0MD0CP0\nCP0ACP0\n Rising-edgeCP0\nFalling-edgeCP0\nInterrupt\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 352. Absolute Maximum Ratings\nTable  2.1. Absolute Maximum Ratings*\nParameter Conditions Min Typ Max Units\nAmbient temperature under bias –55 — 125 °CStorage Temperature –65 — 150 °C\nVoltage on any Port I/O Pin or RST\n with \nrespect to GND–0.3 — 5.8 V\nVoltage on VDD with respect to GND –0.3 — 4.2 V\nMaximum Total current through VDD and \nGND—— 5 0 0 m A\nMaximum output current sunk by RST  or any \nPort pin—— 1 0 0 m A\n*Note:  Stresses above those listed under “Absolute Maximum Ratings” may cause permanent damage to \nthe device. This is a stress rating only and functional operation of the devices at  those or any other condi-\ntions above those indicated in the operation listings of this specification is not implied. Exposure to maxi-\nmum rating conditio ns for extended pe riods may affect device reliability.\nC8051F310/1/2/3/4/5/6/7\n36 Rev. 1.83. Global DC Electrical Characteristics\nTable  3.1. Global DC Electrical Characteristics  \n–40°C to +85°C, 25 MHz System Clock unless otherwise specified.\nParameter Conditions Min Typ Max Units\nDigital Supply Voltage VRST13.0 3.6 V\nDigital Supply RAM Data Retention \nVoltage—1 . 5— V\nSpecified Operating Temperature \nRange–40 — +85 °C\nSYSCLK (system clock frequency) 02 —2 5 M H z\nTsysl (SYSCLK low time) 18 — — ns\nTsysh (SYSCLK high time) 18 — — ns\nDigital Supply Current—CPU Active (Normal Mode, fetching instructions from Flash)\nIDD (Note 3) VDD = 3.0 V, F = 25 MHz — 7.8 8.6 mA\nVDD = 3.0 V, F = 1 MHz — 0.38 — mA\nVDD = 3.0 V, F = 80 kHz — 31 — µA\nVDD = 3.6 V, F = 25 MHz — 10.7 12.1 mA\nIDD Supply Sensitivity (Note 3, \nNote 4)F = 25 MHz — 67 — %/V\nF = 1 MHz — 62 — %/V\nIDD Frequency Sensitivity (Note 3, \nNote 5)VDD = 3.0 V, F <  15 MHz, T = 25 ºC — 0.39 — mA/MHz\nVDD = 3.0 V, F > 15 MHz, T = 25 ºC — 0.21 — mA/MHz\nVDD = 3.6 V, F <  15 MHz, T = 25 ºC — 0.55 — mA/MHz\nVDD = 3.6 V, F > 15 MHz, T = 25 ºC — 0.27 — mA/MHz\nNotes:\n1. Given in Table 9.1 on page 110.\n2. SYSCLK must be at least 32  kHz to enable debugging.\n3. Based on device characterizati on data, not production tested.\n4. Active and Inactive IDD at voltages and frequencies other th an those specified can be calculated \nusing the IDD Supply Sensitivity.  For example, if the VDD is 3.3 V instead of 3.0 V at 25 MHz: IDD = \n7.8 mA typical at 3.0 V and f = 25 MHz.  From this, IDD = 7.8 mA + 0.67 x (3.3 V – 3.0 V) = 8 mA at \n3.3 V and f = 25 MHz.\n5. IDD can be estimated for frequencies <  15 MHz by multiplying the frequency of interest by the fre-\nquency sensitivity number for that range. When using these numbers to estimate IDD for > 15 MHz, \nthe estimate should be the current at 25 MHz minus  the difference in current indicated by the fre-\nquency sensitivity number. For example: \uf020\nVDD = 3.0 V; F = 20 MHz, IDD = 7.8 mA – (25 MHz – 20 MHz) x 0.21 mA/MHz = 6.75 mA.\n6. Idle IDD can be estimated for frequencies <  1 MHz by multiplying the frequency of interest by the \nfrequency sensitivity number for that range. When using these numbers to estimate Idle IDD for > 1 \nMHz, the estimate should be the current at 25 MHz minus the difference in current indicated by the \nfrequency sensitivity number.  For example: \uf020\nVDD = 3.0 V; F = 5 MHz, Idle IDD = 4.8 mA – (25 MHz – 5 MHz) x 0.15 mA/MHz = 1.8 mA.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 37Digital Supply Current—CPU In active (Idle Mode, not fetching instructions from Flash)\nIDD (Note 3) VDD = 3.0 V, F = 25 MHz —3 . 8 4 . 3m A\nVDD = 3.0 V, F = 1 MHz —0 . 2 0— m A\nVDD = 3.0 V, F = 80 kHz —1 6— µ A\nVDD = 3.6 V, F = 25 MHz —4 . 8 5 . 3m A\nIDD Supply Sensitivity (Note 3, \nNote 4)F = 25 MHz —4 4—% / V\nF = 1 MHz —5 6—% / V\nIDD Frequency Sensitivity (Note 3, \nNote 6)VDD = 3.0 V, F < 1 MHz, T = 25  °C — 0.21 — mA/MHz\nVDD = 3.0 V, F > 1 MHz, T = 25  °C — 0.15 — mA/MHz\nVDD = 3.6 V, F < 1 MHz, T = 25  °C — 0.28 — mA/MHz\nVDD = 3.6 V, F > 1 MHz, T = 25  °C —  0.19 — mA/MHz\nDigital Supply Current \uf020\n(Stop Mode, shutdown)Oscillator not running, \nVDD Monitor Disabled—<  0 . 1— µ ATable 3.1. Global DC Electrical Characteris tics  (Continued)\n–40°C to +85°C, 25 MHz System Clock unless otherwise specified.\nParameter Conditions Min Typ Max Units\nNotes:\n1. Given in Table 9.1 on page 110.\n2. SYSCLK must be at least 32  kHz to enable debugging.\n3. Based on device characterizati on data, not production tested.\n4. Active and Inactive IDD at voltages and frequencies other th an those specified can be calculated \nusing the IDD Supply Sensitivity.  For example, if the VDD is 3.3 V instead of 3.0 V at 25 MHz: IDD = \n7.8 mA typical at 3.0 V and f = 25 MHz.  From this, IDD = 7.8 mA + 0.67 x (3.3 V – 3.0 V) = 8 mA at \n3.3 V and f = 25 MHz.\n5. IDD can be estimated for frequencies <  15 MHz by multiplying the frequency of interest by the fre-\nquency sensitivity number for that range. When using these numbers to estimate IDD for > 15 MHz, \nthe estimate should be the current at 25 MHz minus  the difference in current indicated by the fre-\nquency sensitivity number. For example: \uf020\nVDD = 3.0 V; F = 20 MHz, IDD = 7.8 mA – (25 MHz – 20 MHz) x 0.21 mA/MHz = 6.75 mA.\n6. Idle IDD can be estimated for frequencies <  1 MHz by multiplying the frequency of interest by the \nfrequency sensitivity number for that range. When using these numbers to estimate Idle IDD for > 1 \nMHz, the estimate should be the current at 25 MHz minus the difference in current indicated by the \nfrequency sensitivity number.  For example: \uf020\nVDD = 3.0 V; F = 5 MHz, Idle IDD = 4.8 mA – (25 MHz – 5 MHz) x 0.15 mA/MHz = 1.8 mA.\nC8051F310/1/2/3/4/5/6/7\n38 Rev. 1.8Other electrical characteristics tables are found in the data sheet section corresponding to the associated \nperipherals. For more information on electrical characte ristics for a specific perip heral, refer to the page \nindicated in Table 3.2.\nTable  3.2. Electrical Characteristi cs Quick Reference\nPeripheral Electrical Characteristics Page No.\nADC0 Electrical Characteristics 65\nExternal Voltage Reference Circuit Electrical Characteristics 68\nComparator Electrical Characteristics 78\nReset Electrical Characteristics 110\nFlash Electrical Characteristics 112\nInternal Oscillator Electrical Characteristics 123\nPort I/O DC Electrical Characteristics 143\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 394. Pinout and Package Definitions\nTable  4.1. Pin Definitions for the C8051F31x  \nNamePin NumbersType Description‘F310/2/4 ‘F311/3/5 ‘F316/7\nVDD 4 4 4 Power Supply Voltage.\nGND 3 3 3 Ground.\nRST/\nC2CK5 5 5D I/O\nD I/ODevice Reset. Open-drain output of internal POR. An \nexternal source can initiate a system reset by driving this pin low for at least 10\n µs.\nClock signal for the C2 Debug Interface.\nP3.0/\nC2D6 6 6D I/O\nD I/OPort 3.0. See Section 13  for a complete  description.\nBi-directional data signal for the C2 Debug Interface.\nP0.0/\nVREF2 2 2D I/O\nA InPort 0.0. See Section 13  for a complete  description.\nExternal VREF input. (‘F310/1/2/3 only)\nP0.1 1 1 1 D I/O Port 0.1. See Section 13  for a complete  description.\nP0.2/\nXTAL132 28 24D I/O\nA InPort 0.2. See Section 13  for a complete  description.\nExternal Clock Input.  This pin is the external oscillator \nreturn for a cryst al or resonator.\nP0.3/\nXTAL231 27 23D I/O\nA Out or\nD InPort 0.3. See Section 13  for a complete  description.\nExternal Clock Output. For an external crystal or reso -\nnator, this pin is the excitation driver. This pin is the \nexternal clock input for CMOS , capacitor, or RC oscil -\nlator configurations.\nP0.4 30 26 22 D I/O Port 0.4. See Section 13  for a complete  description.\nP0.5 29 25 21 D I/O Port 0.5. See Section 13  for a complete  description.\nP0.6/\nCNVSTR28 24 20Port 0.6. See Section 13  for a complete  description.\nADC0 External Convert Start Input. (‘F310/1/2/3 only)\nP0.7 27 23 19 D I/O Port 0.7. See Section 13  for a complete  description.\nP1.0 26 22 18D I/O or\nA InPort 1.0. See Section 13  for a complete  description.\nP1.1 25 21 17D I/O or\nA InPort 1.1. See Section 13  for a complete  description.\nP1.2 24 20 16D I/O or\nA InPort 1.2. See Section 13  for a complete  description.\nP1.3 23 19 15D I/O or\nA InPort 1.3. See Section 13  for a complete  description.\nP1.4 22 18 14D I/O or\nA InPort 1.4. See Section 13  for a complete  description.\nC8051F310/1/2/3/4/5/6/7\n40 Rev. 1.8P1.5 21 17 13D I/O or\nA InPort 1.5. See Section 13  for a complete  description.\nP1.6 20 16D I/O or\nA InPort 1.6. See Section 13  for a complete  description.\nP1.7 19 15D I/O or\nA InPort 1.7. See Section 13  for a complete  description.\nP2.0 18 14 12D I/O or\nA InPort 2.0. See Section 13  for a complete  description.\nP2.1 17 13 11D I/O or\nA InPort 2.1. See Section 13  for a complete  description.\nP2.2 16 12 10D I/O or\nA InPort 2.2. See Section 13  for a complete  description.\nP2.3 15 11 9D I/O or\nA InPort 2.3. See Section 13  for a complete  description.\nP2.4 14 10 8D I/O or\nA InPort 2.4. See Section 13  for a complete  description.\nP2.5 13 9 7D I/O or\nA InPort 2.5. See Section 13  for a complete  description.\nP2.6 12 8D I/O or\nA InPort 2.6. See Section 13  for a complete  description.\nP2.7 11 7D I/O or\nA InPort 2.7. See Section 13  for a complete  description.\nP3.1 7D I/O or\nA InPort 3.1. See Section 13  for a complete  description.\nP3.2 8D I/O or\nA InPort 3.2. See Section 13  for a complete  description.\nP3.3 9D I/O or\nA InPort 3.3. See Section 13  for a complete  description.\nP3.4 10D I/O or\nA InPort 3.4. See Section 13  for a complete  description.Table 4.1. Pin Definitions for the C8051F31 x  (Continued)\nNamePin NumbersType Description‘F310/2/4 ‘F311/3/5 ‘F316/7\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 41Figure 4.1. LQFP-32 Pi nout Diagram (Top View)1\nP3.2P1.2\nP1.7P1.4P1.3\nP1.5 VDD\n/RST/C2CKGNDP0.1\nP0.0\nP2.0P2.12\n3\n4\n5\n6\n7\n824\n23\n22\n21\n20\n19\n18\n179\n10\n11\n12\n13\n14\n15\n1632\n31\n30\n29\n28\n27\n26\n25\nP1.6C8051F310/2/4\nTop View\nP3.0/C2D\nP3.1\nP3.3\nP3.4\nP2.7\nP2.6\nP2.5\nP2.4\nP2.3P2.2 P1.1P1.0P0.7P0.6P0.5P0.4P0.3P0.2\nC8051F310/1/2/3/4/5/6/7\n42 Rev. 1.8 \nFigure 4.2. LQFP-32 Package DiagramTable 4.2. LQFP-32 \nPackage Dimensions\nMM\nMIN TYP MAX\nA- - 1 . 6 0\nA1 0.05 - 0.15\nA2 1.35 1.40 1.45\nb 0.30 0.37 0.45\nD- 9 . 0 0 -\nD1 - 7.00 -\ne- 0 . 8 0 -\nE- 9 . 0 0 -\nE1 - 7.00 -\nL 0.45 0.60 0.75\nPIN 1 \nIDENTIFIER\nA1\ne b132E1D1D\nE\nA2\nA\nL\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 43Figure 4.3. Typical LQ FP-32 Landing Diagram\nTable  4.3. LQFP-32 Landing Pa ttern Dimensions\nDimension Min Max\nC1 8.40 8.50\nC2 8.40 8.50\nE 0.80 BSC.\nX1 0.40 0.50Y1 1.25 1.35\nNotes:\n1.All dimensions shown are in mil limeters (mm) unless otherwise noted.\n2. This Land Pattern Design is bas ed on the IPC-7351 guidelines.\n3. All metal pads are to be non-solder mask defined (NSMD). Clearance between the solder mask and the metal \npad is to be 60?m minimum, all the way around the pad.\n4. A stainless steel, laser-cut and electro-polished stencil wi th trapezoidal walls should be used to assure good \nsolder paste release.\n5. The stencil thickness should be 0.125mm (5 mils).\n6. The ratio of stencil aperture to land pad size should be 1:1 for all pads.\n7. A No-Clean, Type-3 solder paste is recommended.\n8. The recommended card reflow profile is per the JE DEC/IPC J-STD-020C specification for Small Body \nComponents.\nC8051F310/1/2/3/4/5/6/7\n44 Rev. 1.8 \nFigure 4.4. QFN-28 Pino ut Diagram (Top View)4\n5\n6\n721\n3\n11\n12\n13\n1498\n1018\n17\n16\n152021\n1925262728\n23\n2224\nC8051F311/3/5\nTop ViewP0.1\nP0.0\nGND\nVDD\n/RST/C2CK\nP3.0/C2D\nP2.7\nP2.6\nP2.5P2.4P2.3\nP2.2\nP2.1P2.0P1.7P1.6P1.5P1.4P1.3P1.2P1.1P1.0P0.7P0.6P0.5P0.4P0.3P0.2\nGNDGND\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 45Figure 4.5. QFN-28 Package Drawing\nTable  4.4. QFN-28 Package Dimensions\nMM MM\nDimension Min Nom Max Dimension Min Nom Max\nA 0.80 0.90 1.00 L 0.35 0.55 0.65\nA1 0.00 0.02 0.05 L1 0.00 — 0.15\nA3 0.25 REF aaa 0.15\nb 0.18 0.23 0.30 bbb 0.10\nD 5.00 BSC. ddd 0.05\nD2 2.90 3.15 3.35 eee 0.08\ne 0.50 BSC. Z 0.44\nE 5.00 BSC. Y 0.18\nE2 2.90 3.15 3.35\nNotes:\n1.All dimensions shown are in mil limeters (mm) unless otherwise noted.\n2. Dimensioning and Tolerancing per ANSI Y14.5M-1994.\n3. This drawing conforms to JEDEC outline MO-220, variation VHHD except for custom features D2, \nE2, L, Z, and Y which are toleranced per supplier designation.\n4. Recommended card reflow profile is per the JEDE C/IPC J-STD-020 specific ation for Small Body \nComponents.\nC8051F310/1/2/3/4/5/6/7\n46 Rev. 1.8Figure 4.6. Typical QF N-28 Landing Diagram\nTable  4.5. QFN-28 Landing Pattern Dimensions\nDimension Min Max\nC1 4.80\nC2 4.80\nE0 . 5 0\nX1 0.20 0.30X2 3.20 3.30\nY1 0.85 0.95\nY2 3.20 3.30\nNotes:\n1.All dimensions shown are in mil limeters (mm) unless otherwise noted.\n2. Dimensioning and Tolerancing is per the ANSI Y14.5M-1994 specification.\n3. This Land Pattern Design is bas ed on the IPC-7351 guidelines.\n4. All metal pads are to be non-solder mask defined (NSMD). Clearance between the solder mask and the metal \npad is to be 60?m minimum, all the way around the pad.\n5. A stainless steel, laser-cut and electro-polished stencil wi th trapezoidal walls should be used to assure good \nsolder paste release.\n6. The stencil thickness should be 0.125mm (5 mils).\n7. The ratio of stencil aperture to land pad size should be 1:1 for all perimeter pins.\n8. A 3x3 array of 0.90mm openings on a 1.1mm pitch should be used for the center pad to assure the proper \npaste volume. \n9. A No-Clean, Type-3 solder paste is recommended.\n10. The recommended card reflow profile is per the JEDEC/IPC J-STD-020 specification for Small Body \nComponents.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 47  \nFigure 4.7. QFN-24 Pino ut Diagram (Top View)GND\nP1.5P1.4P1.3P1.2P1.1P1.0\n15\n14\n131718\n16P2.5\nP2.4\nP2.3\nP2.2\nP2.1\nP2.010\n11\n1287\n9P0.1\nP0.0\nGND\nVDD\n/RST / C2CK\nP3.0 / C2D4\n5\n621\n3\nP0.7P0.6P0.5P0.4P0.3P0.2\n222324\n20\n1921\nC8051F316/7\nTop View\nC8051F310/1/2/3/4/5/6/7\n48 Rev. 1.8Figure 4.8. QFN-24 Package Drawing\nTable  4.6. QFN-24 Package Dimensions\nMM MM\nDimension Min Nom Max Dimension Min Nom Max\nA 0.70 0.75 0.80 L 0.30 0.40 0.50\nA1 0.00 0.02 0.05 L1 0.00 — 0.15\nb 0.18 0.25 0.30 aaa — — 0.15\nD 4.00 BSC. bbb — — 0.10\nD2 2.55 2.70 2.80 ddd — — 0.05\ne 0.50 BSC. eee — — 0.08\nE 4.00 BSC. Z 0.24\nE2 2.55 2.70 2.80 Y 0.18\nNotes:\n1.All dimensions shown are in mil limeters (mm) unless otherwise noted.\n2. Dimensioning and Tolerancing per ANSI Y14.5M-1994.\n3. This drawing conforms to the JEDEC Solid Stat e Outline MO-220, variation WGGD except for \ncustom features D2, E2, Z, Y, and L whic h are toleranced per supplier designation.\n4. Recommended card reflow profile is per the JEDE C/IPC J-STD-020 specific ation for Small Body \nComponents.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 49Figure 4.9. Typical QF N-24 Landing Diagram\nTable  4.7. QFN-24 Landing Pattern Dimensions\nDimension Min Max\nC1 3.90 4.00\nC2 3.90 4.00\nE 0.50 BSC.\nX1 0.20 0.30X2 2.70 2.80\nY1 0.65 0.75\nY2 2.70 2.80\nNotes:\n1.All dimensions shown are in mil limeters (mm) unless otherwise noted.\n2. This land pattern design is based on the IPC-7351 guidelines. \n3. All metal pads are to be non-solder mask defined (NSMD). Clearance between the solder mask and the metal \npad is to be 60?m minimum, all the way around the pad.\n4. A stainless steel, laser-cut and electro-polished stencil wi th trapezoidal walls should be used to assure good \nsolder paste release.\n5. The stencil thickness should be 0.125mm (5 mils).\n6. The ratio of stencil aperture to land pad size should be 1:1 for all perimeter pads. \n7. A 2x2 array of 1.10mm x 1.10mm openings on 1.30mm pi tch should be used for the center ground pad.  \n8. A No-Clean, Type-3 solder paste is recommended.\n9. The recommended card reflow profile is per the JEDEC/IPC J-STD-020 specification for Small Body \nComponents.\nC8051F310/1/2/3/4/5/6/7\n50 Rev. 1.8\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 515. 12-Bit ADC (ADC0, C8 051F310/1/2/3/6 only)\nThe ADC0 subsystem for the C8051F310/1/2/3/6 consists  of two analog multiplexers (referred to collec -\ntively as AMUX0) with 25 tota l input selections, and a 200  ksps, 12-bit successive-a pproximation-register \nADC with integrated track-and-hold and programmable window detector. The AMUX0,  data conversion \nmodes, and window detector are all configurable under software control via the Sp ecial Function Registers \nshown in Figure  5.1. ADC0 operates in both Single-ended and Differential modes, and may be configured \nto measure P1.0–P3.4, the Temperature Sensor output, or VDD with respect to P1.0 –P3.4, VREF, or GND. \nThe ADC0 subsystem is enabled only when the AD0EN bit in the ADC0 Control register (ADC0CN) is set \nto logic  1. The ADC0 subsystem is in low power shutdown when this bit is logic  0.\nFigure 5.1. ADC0 Functional Block Diagram\n5.1. Analog Multiplexer\nAMUX0 selects the positive and negative inputs to th e ADC. Any of the following may be selected as the \npositive input: P1.0-P3.4, the on-chip temperat ure sensor, or the positive power supply (VDD). Any of the \nfollowing may be selected as the negative input: P1.0-P3.4, VREF, or GND. When GND is selected as \nthe negative input, ADC0 operates in Single-ended Mode; all other times, ADC0 operates in Differ -\nential Mode.  The ADC0 input channels are selected in t he AMX0P and AMX0N registers as described in \nSFR Definition 5.1  and SFR Definition 5.2 . \nThe conversion code format differs between Single -ended and Differential modes. The registers ADC0H \nand ADC0L contain the high and low bytes of the output conversion code from the ADC at the completion \nof each conversion. Data can be right-justified or left -justified, depending on the setting of the AD0LJST bit \n(ADC0CN.0). When in Single-ended Mode, conversion codes are represented as 12-bit unsigned integers. ADC0CF\nAD0LJSTAD0SC0AD0SC1AD0SC2AD0SC3AD0SC410-Bit\nSAR\nADC\nREFSYSCLK\nADC0H\n32ADC0CN\nAD0CM0AD0CM1AD0CM2AD0WINTAD0BUSYAD0INTAD0TMAD0EN\nTimer 0 Overflow\nTimer 2 Overflow\nTimer 1 OverflowStart \nConversion000 AD0BUSY (W) VDD\nADC0LTH23-to-1 \nAMUXAD0WINTTemp \nSensor23-to-1 \nAMUX\nVDDP1.0\nP1.7\n001\n010\n011\n100 CNVSTR Input\nWindow \nCompare \nLogicP2.0\nP2.7\nGNDP1.0\nP1.7\nP2.0P2.7\nP3.0\nP3.4101 Timer 3 Overflow\nADC0LTL\nADC0GTH ADC0GTL\nADC0LAMX0P\nAMX0P4\nAMX0P3\nAMX0P2\nAMX0P1\nAMX0P0\nAMX0N\nAMX0N4\nAMX0N3\nAMX0N2\nAMX0N1\nAMX0N0P3.0P3.4 P3.1-3.4 \navailable on\nC8051F310/2 \nP3.1-3.4 \navailable on\nC8051F310/2 (+)\n(-)\nVREFP2.6-2.7 available on\nC8051F310/1/2/3/4/5 P1.6-1.7 available on\nC8051F310/1/2/3/4/5 \nP2.6-2.7 available onC8051F310/1/2/3/4/5 P1.6-1.7 available on\nC8051F310/1/2/3/4/5 \nC8051F310/1/2/3/4/5/6/7\n52 Rev. 1.8Inputs are measured from ‘0’ to VREF * 1023/1024. Ex ample codes are shown below for both right-justified \nand left-justified data. Unused bits in the ADC0H and ADC0L registers are set to ‘0’.\nWhen in Differential Mode, conversion codes are represented as 12-bit signed 2’s complement numbers. Inputs are measured from -VREF to VREF * 511/512.  Example codes are shown below for both right-justi\n-\nfied and left-justified data. For ri ght-justified data, the unused MSBs of  ADC0H are a sign-extension of the \ndata word. For left-justified data, the unused LSBs in the ADC0L register are set to ‘0’.\nImportant Note About ADC0 Input Configuration:  Port pins selected as ADC0 inputs should be config -\nured as analog inputs, and should be skipped by the Digital Crossbar. To configure a Port pin for analog \ninput, set to ‘0’ the corresponding bit in register PnMD IN (for n = 0,1,2,3). To fo rce the Crossbar to skip a \nPort pin, set to ‘1’ the corresponding bit in register PnSKIP (for n = 0,1,2). See Section “13.  Port Input/\nOutput” on page  129 for more Port I/O configuration details.\n5.2. Temperature Sensor\nThe typical temperature sensor transfer function is shown in Figure  5.2. The output voltage (VTEMP ) is the \npositive ADC input when the temperature sensor is selected by bits AMX0P4-0 in register AMX0P.\nFigure 5.2. Typical Temperatur e Sensor Transfer FunctionInput Voltage Right-J ustified ADC0H:ADC0L \n(AD0LJST = 0)Left-Justified ADC0H:ADC0L \n(AD0LJST = 1)\nVREF x 1023/1024 0x03FF 0xFFC0\nVREF x 512/1024 0x0200 0x8000\nVREF x 256/1024 0x0100 0x4000\n0 0x0000 0x0000\nInput Voltage Right-Justified ADC0H:ADC0L \n(AD0LJST = 0)Left-Justified ADC0H:ADC0L \n(AD0LJST = 1)\nVREF x 511/512 0x01FF 0x7FC0\nVREF x 256/512 0x0100 0x4000\n0 0x0000 0x0000\n–VREF x 256/512 0xFF00 0xC000\n–VREF 0xFE00 0x8000\n0 -50 50 100 (Celsius)VTEMP = 3.35*(TEMPC) + 897 mV\n70080090010001100(mV)\n1200\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 53The uncalibrated temperature sensor output is extrem ely linear and suitable for relative temperature mea -\nsurements (see Table  5.1 for linearity specificatio ns). For absolute temperature measurements, gain and/\nor offset calibration is recomme nded. Typically a 1-point calibration includes the following steps:\nStep 1.  Control/measure the ambient temper ature (this temperature must be known).\nStep 2.  Power the device, and delay for a few seconds to allow for self-heating.Step 3.  Perform an ADC conversion with the te mperature sensor selected as the positive input \nand GND selected as the negative input.\nStep 4.  Calculate the offset and/or gain characte ristics, and store these values in non-volatile \nmemory for use with subsequent te mperature sensor measurements.\nFigure  5.3 shows the typical temperature sensor erro r assuming a 1-point calibration at 25 °C. Note that \nparameters which affect ADC measurement, in particular the voltage reference value, will also \naffect temperature measurement.\nFigure 5.3. Temperature Sensor Error with 1-Point Calibration-40.00 -20.00 0.00\n20.0040.00 60.00 80.00\nTemperature (degrees C)Error (degrees C)\n-5.00-4.00-3.00-2.00-1.000.001.002.003.004.005.00\n-5.00-4.00-3.00-2.00-1.000.001.002.003.004.005.00\nC8051F310/1/2/3/4/5/6/7\n54 Rev. 1.85.3. Modes of Operation\nADC0 has a maximum conversion speed of 200  ksps. The ADC0 conversion clock is a divided version of \nthe system clock, determined by the AD0SC bits in  the ADC0CF register (system clock divided by \n(AD0SC  + 1) for 0  \uf0a3 AD0SC  \uf0a3\uf02031).\n5.3.1. Starting a Conversion\nA conversion can be initiated in one of five ways, dep ending on the programmed states of the ADC0 Start \nof Conversion Mode bits (AD0CM2-0) in register A DC0CN. Conversions may be initiated by one of the fol -\nlowing: \n1. Writing a ‘1’ to the AD0BUSY bit of register ADC0CN \n2. A Timer  0 overflow (i.e., timed continuous conversions)\n3. A Timer  2 overflow\n4. A Timer  1 overflow\n5. A rising edge on the CNVSTR input signal (pin P0.6)\n6. A Timer  3 overflow\nWriting a ‘1’ to AD0BUSY provides software contro l of ADC0 whereby conversions are performed "on-\ndemand". During conversion, the AD0BUSY bit is set to lo gic 1 and reset to logic 0 when the conversion is \ncomplete. The falling edge of AD0BU SY triggers an interrupt (when enabl ed) and sets the ADC0 interrupt \nflag (AD0INT). Note: When polling for ADC conversion completions, the ADC0 in terrupt flag (AD0INT) \nshould be used. Converted data is available in th e ADC0 data registers, ADC0H:ADC0L, when bit AD0INT \nis logic 1. Note that when Timer 2 or Timer 3 overfl ows are used as the conversion source, Low Byte over -\nflows are used if Timer 2/3 is in 8-bit mode; High byte overflows are used if Timer 2/3 is in 16-bit mode. See \nSection “17.  Timers” on page  187 for timer configuration.\nImportant Note About Using CNVSTR:  The CNVSTR input pin also functions as  Port pin P0.6. When the \nCNVSTR input is used as the ADC0 conversion source,  Port pin P0.6 should be skipped by the Digital \nCrossbar. To configure the Crossbar to skip P0 .6, set to ‘1’ Bit6 in register P0SKIP. See Section “13.  Port \nInput/Output” on page  129 for details on Port I/O configuration.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 555.3.2. Tracking Modes\nAccording to Table  5.1, each ADC0 conversion must be preced ed by a minimum tracking time for the con -\nverted result to be accurate. The AD0TM bit in regist er ADC0CN controls the ADC0 track-and-hold mode. \nIn its default state, the ADC0 input is continuously tr acked, except when a conversion is in progress. When \nthe AD0TM bit is logic 1, ADC0 operates in low-powe r track-and-hold mode. In this mode, each conversion \nis preceded by a tracking period of 3 SAR clocks (a fter the start-of-conversion signal). When the CNVSTR \nsignal is used to initiate conversions in low-power tr acking mode, ADC0 tracks only when CNVSTR is low; \nconversion begins on the rising edge of CNVSTR (see Figure  5.4). Tracking can also be disabled (shut -\ndown) when the device is in low power standby or sleep modes. Low-power track-and-hold mode is also useful when AMUX settings are frequently changed, due to the settling time requirements described in \nSection “5.3.3.  Settling Time Requirements” on page  56.\n \nFigure 5.4. 12-Bit  ADC Track and Conver sion Example TimingWrite \'1\' to AD0BUSY,\nTimer 0, Timer 2,\nTimer 1, Timer 3  Overflow\n(AD0CM[2:0]=000, 001,010\n011, 101)\nAD0TM=1 Track Convert Low Power Mode\nAD0TM=0Track or\nConvertConvert TrackLow Power\nor ConvertSAR Clocks123456789 1 0 1 1 1 2\n123456789\nSAR ClocksB. ADC0 Timing for Internal Trigger Source123456789CNVSTR\n(AD0CM[2:0]=100)\nAD0TM=1A. ADC0 Timing for External Trigger Source\nSAR Clocks\nTrack or Convert Convert Track AD0TM=0Track ConvertLow Power\nModeLow Power\nor Convert10 11\n13 14\n1011\nC8051F310/1/2/3/4/5/6/7\n56 Rev. 1.85.3.3. Settling Time Requirements\nWhen the ADC0 input configuration is changed (i.e., a different AMUX0 selection is made), a minimum \ntracking time is required before an accurate conversion can be performed. This tracking time is determined by the AMUX0 resistance, the ADC0 sampling capacita nce, any external source resistance, and the accu\n-\nracy required for the conversion. In low-power tracking mode, three SAR clocks are used for tracking at the \nstart of every conversion. For most  applications, these three SAR clo cks will meet the minimum tracking \ntime requirements. \nFigure  5.5 shows the equivalent ADC0 input circuits for both Differential and Single-ended modes. Notice \nthat the equivalent time constant for both input circ uits is the same. The required ADC0 settling time for a \ngiven settling accuracy (SA) may be approximated by Equation  5.1. When measuring the Temperature \nSensor output or VDD with respect to GND, RTOTAL  reduces to RMUX. See Table  5.1 for ADC0 minimum \nsettling time requirements.\nWhere:\nSA is the settling accuracy, given as a fraction of an  LSB (for example, 0.25 to settle within 1/4 LSB)\nt is the required settling time in seconds\nRTOTAL  is the sum of the AMUX0 resistance and any external source resistance.\nn is the ADC resolution in bits (12).\nFigure 5.5. ADC0 Eq uivalent Input CircuitsEquation 5.1. ADC0 Settling Time Requirements\nt2n\nSA-------\uf0e8\uf0f8\uf0e6\uf0f6RTOTALCSAMPLE\uf0b4 ln=\nRMUX = 5k\nRCInput= RMUX * CSAMPLE\nRMUX = 5kCSAMPLE = 5pF\nCSAMPLE = 5pFMUX Select\nMUX SelectDifferential Mode\nPx.x\nPx.xRMUX = 5k\nCSAMPLE = 5pF\nRCInput= RMUX * CSAMPLEMUX SelectSingle-Ended Mode\nPx.x\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 57SFR Definition  5.1. AMX0P: AMUX0 Positive Channel Select\nBits7–5: UNUSED. Read = 000b; Write = don’t care.\nBits4–0: AMX0P4–0: AMUX0 Po sitive Input SelectionR R R R/W R/W R/W R/W R/W Reset Value\n- - - AMX0P4 AMX0P3 AMX0P2 AMX0P1 AMX0P0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xBB\nAMX0P4–0 ADC0 Positive Input\n00000 P1.000001 P1.1\n00010 P1.2\n00011 P1.3\n00100 P1.4\n00101 P1.5\n00110 P1.6\n(1)\n00111 P1.7(1)\n01000 P2.0\n01001 P2.101010 P2.2\n01011 P2.3\n01100 P2.401101 P2.5\n01110 P2.6\n(1)\n01111 P2.7(1)\n10000 P3.0\n10001(2)P3.1(2)\n10010(2)P3.2(2)\n10011(2)P3.3(2)\n10100(2)P3.4(2)\n10101–11101 RESERVED\n11110 Temp Sensor\n11111 VDD\nNotes:\n1.Only applies to C8051F310/1/2/3/4/5; selection \nRESERVED on C8051F316/7 devices.\n2. Only applies to C8051F310/2; se lection RESERVED on \nC8051F311/3/6/7 devices.\nC8051F310/1/2/3/4/5/6/7\n58 Rev. 1.8SFR Definition  5.2. AMX0N: AMUX0 Negative Channel Select  \nBits7–5: UNUSED. Read = 000b; Write = don’t care.\nBits4–0: AMX0N4–0: AMUX0 Negative Input Selection.\nNote that when GND is selected as the Nega tive Input, ADC0 operates in Single-ended \nmode. For all other Negative Input select ions, ADC0 operates in Differential mode.R R R R/W R/W R/W R/W R/W Reset Value\n- - - AMX0N4 AMX0N3 AMX0N2 AMX0N1 AMX0N0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xBA\nAMX0N4–0 ADC0 Negative Input\n00000 P1.0\n00001 P1.100010 P1.2\n00011 P1.3\n00100 P1.400101 P1.5\n00110 P1.6\n(1)\n00111 P1.7(1)\n01000 P2.0\n01001 P2.1\n01010 P2.2\n01011 P2.3\n01100 P2.4\n01101 P2.5\n01110 P2.6(1)\n01111 P2.7(1)\n10000 P3.0\n10001(2)P3.1(2)\n10010(2)P3.2(2)\n10011(2)P3.3(2)\n10100(2)P3.4(2)\n10101–11101 RESERVED\n11110 VREF\n11111 GND (ADC in Single-Ended Mode)\nNotes:\n1.Only applies to C8051F310/1/2/3/4/5; selection \nRESERVED on C8051F316/7 devices.\n2. Only applies to C8051F310/2; se lection RESERVED on \nC8051F311/3/6/7 devices.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 59SFR Definition  5.3. ADC0CF: ADC0 Configuration  \nSFR Definition  5.4. ADC0H: ADC0 Data Word MSB  \nSFR Definition  5.5. ADC0L: ADC0 Data Word LSBBits7–3: AD0SC4–0: ADC0 SAR C onversion Clock Period Bits.\nSAR Conversion clock is derived from sys tem clock by the following equation, where \nAD0SC  refers to the 5-bit value held in bits AD0SC4–0. SAR Conversion clock require-\nments are given in Table 5.1.\nBit2: AD0LJST: ADC0 Left Justify Select.\n0: Data in ADC0H:ADC0L r egisters are right-justified.\n1: Data in ADC0H:ADC0L r egisters are left-justified.\nBits1–0: UNUSED. Read = 00b; Write = don’t care.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nAD0SC4 AD0SC3 AD0SC2 AD0SC1 AD0SC0 AD0LJST - - 11111000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xBC\nAD0SCSYSCLK\nCLKSAR--------------------- -1– =\nBits7–0: ADC0 Data Word High-Order Bits.\nFor AD0LJST = 0: Bits 7–2 are the sign extension of Bit1. Bits 1–0 are the upper 2 bits of the \n12-bit ADC0 Data Word.For AD0LJST = 1: Bits 7–0 are the most-significant bits of the 12-bit ADC0 Data Word.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xBE\nBits7–0: ADC0 Data Word Low-Order Bits.\nFor AD0LJST = 0: Bits 7–0 are the lower 8 bits of the 12-bit Data Word.For AD0LJST = 1: Bits 7–6 are the lower 2 bits of the 12-bit Data Wo rd. Bits 5–0 will always \nread ‘0’.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xBD\nC8051F310/1/2/3/4/5/6/7\n60 Rev. 1.8SFR Definition  5.6. ADC0CN: ADC0 Control  \nBit7: AD0EN: ADC0 Enable Bit.\n0: ADC0 Disabled. ADC0 is in low-power shutdown.\n1: ADC0 Enabled. ADC0 is active and ready for data conversions.\nBit6: AD0TM: ADC0 Track Mode Bit.\n0: Normal Track Mode: When ADC0 is enabled, tr acking is continuous unless a conversion is \nin progress.1: Low-power Track Mode: Tracking De fined by AD0CM2-0 bits (see below).\nBit5: AD0INT: ADC0 Conversion Complete Interrupt Flag.\n0: ADC0 has not completed a data conversi on since the last time AD0INT was cleared.\n1: ADC0 has completed a data conversion.\nBit4: AD0BUSY: ADC0 Busy Bit.\nRead:0: ADC0 conversion is complete or a conversion is not currently in progress. AD0INT is set to \nlogic 1 on the falling edge of AD0BUSY.\n1: ADC0 conversion is in progress.Write:\n0: No Effect.\n1: Initiates ADC0 Conversion if AD0CM2-0 = 000b\nBit3: AD0WINT: ADC0 Window Compare Interrupt Flag.\n0: ADC0 Window Comparison Data match has not occurred since this flag was last cleared.\n1: ADC0 Window Comparison Data match has occurred.\nBits2\n–0: AD0CM2 –0: ADC0 Start of Conversion Mode Select.\nWhen AD0TM = 0:\n000: ADC0 conversion initiated on every write of ‘1’ to AD0BUSY.\n001: ADC0 conversion initiated on overflow of Timer 0.010: ADC0 conversion initiated on overflow of Timer 2. \n011: ADC0 conversion initiated on overflow of Timer 1.\n100: ADC0 conversion initiated on rising edge of external CNVSTR.101: ADC0 conversion initiated on overflow of Timer 3.\n11x: Reserved.\nWhen AD0TM = 1:000: Tracking initiated on write of ‘1’ to AD0BUSY and lasts 3 SAR clocks, followed by con-\nversion.\n001: Tracking initiated on overflow of Timer 0 and lasts 3 SAR clocks, followed by conversion.010: Tracking initiated on overflow of Timer 2 and lasts 3 SAR clocks, followed by conversion.011: Tracking initiated on overflow of Timer 1 and lasts 3 SAR clocks, followed by conversion.\n100: ADC0 tracks only when CNVSTR input is logic low; conversion starts on rising CNVSTR \nedge.101: Tracking initiated on overflow of Timer 3 and lasts 3 SAR clocks, followed by conversion.\n11x: Reserved\n.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nAD0EN AD0TM AD0INT AD0BUSY AD0WI NT AD0CM2 AD0CM1 AD0CM0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xE8\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 615.4. Programmable Window Detector\nThe ADC Programmable Window Detector continuously compares the ADC0 output registers to user-pro -\ngrammed limits, and notifies the system when a desired co ndition is detected. This is  especially effective in \nan interrupt-driven  system, saving code space and CPU ba ndwidth while delivering faster system \nresponse times. The window detector interrupt flag (AD0WINT in register ADC0CN) can also be used in polled mode. The ADC0 Greater-Than (ADC0GTH, ADC0GTL) and Less-Than (ADC0LTH, ADC0LTL) registers hold the comparison valu es. The window detector flag can be programmed to indicate when mea\n-\nsured data is inside or outside of the user-progr ammed limits, depending on the contents of the ADC0 \nLess-Than and ADC0 Greater-Than registers.\nSFR Definition  5.7. ADC0GTH: ADC0 Greater-Than Data High Byte\nSFR Definition  5.8.  ADC0GTL: ADC0 Greater -Than Data Low Byte  Bits7–0: High byte of ADC0 Greater-Than Data Word.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xC4\nBits7–0: Low byte of ADC0 Greater-Than Data Word.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xC3\nC8051F310/1/2/3/4/5/6/7\n62 Rev. 1.8SFR Definition  5.9. ADC0LTH: ADC0 Less-Than Data High Byte\nSFR Definition  5.10.  ADC0LTL: ADC0 Less-Than Data Low ByteBits7–0: High byte of ADC0 Less-Than Data Word.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xC6\nBits7–0: Low byte of ADC0 Less-Than Data Word.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xC5\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 635.4.1. Window Detector In Single-Ended Mode\nFigure  5.6 shows two example window comparisons fo r right-justified, single-ended data, with \nADC0LTH:ADC0LTL  = 0x0080 (128d) and ADC0GTH:ADC0GTL  = 0x0040 (64d). In single-ended mode, \nthe input voltage can range from ‘0’ to VREF x (1023/ 1024) with respect to GND, and is represented by a \n10-bit unsigned intege r value. In the left example, an AD0WIN T interrupt will be generated if the ADC0 \nconversion word (ADC0H:ADC0L) is within the range defined by ADC0GTH:ADC0GTL and \nADC0LTH:ADC0LTL (if  0x0040  < ADC0H:ADC0L  < 0x0080). In the right example, and AD0WINT interrupt \nwill be generated if the ADC0 conversion word is outside of the range defi ned by the ADC0GT and \nADC0LT registers (if  ADC0H:ADC0L  < 0x0040 or ADC0H:ADC0L  > 0x0080). Figure  5.7 shows an exam -\nple using left-justified data with the same comparison values.\nFigure 5.6. ADC Window Co mpare Example: Right-Justified Single-Ended Data\nFigure 5.7. ADC Window Co mpare Example: Left-Justified Single-Ended Data0x03FF\n0x0081\n0x0080\n0x007F\n0x0041\n0x0040\n0x003F\n0x0000 0Input Voltage\n(Px.x - GND)\nVREF x (1023/1024)\nVREF x (128/1024)\nVREF x (64/1024)AD0WINT=1AD0WINT\nnot affected\nAD0WINT\nnot affectedADC0LTH:ADC0LTL\nADC0GTH:ADC0GTL0x03FF\n0x0081\n0x0080\n0x007F\n0x0041\n0x0040\n0x003F\n0x0000 0Input Voltage\n(Px.x - GND)\nVREF x (1023/1024)\nVREF x (128/1024)\nVREF x (64/1024)AD0WINT\nnot affectedAD0WINT=1\nAD0WINT=1ADC0H:ADC0L ADC0H:ADC0L\nADC0GTH:ADC0GTL\nADC0LTH:ADC0LTL\n0xFFC0\n0x2040\n0x2000\n0x1FC0\n0x1040\n0x1000\n0x0FC0\n0x0000 0Input Voltage\n(Px.x - GND)\nVREF x (1023/1024)\nVREF x (128/1024)\nVREF x (64/1024)AD0WINT=1AD0WINT\nnot affected\nAD0WINT\nnot affectedADC0LTH:ADC0LTL\nADC0GTH:ADC0GTL0xFFC0\n0x2040\n0x2000\n0x1FC0\n0x1040\n0x1000\n0x0FC0\n0x0000 0Input Voltage\n(Px.x - GND)\nVREF x (1023/1024)\nVREF x (128/1024)\nVREF x (64/1024)AD0WINT\nnot affectedAD0WINT=1\nAD0WINT=1ADC0H:ADC0L ADC0H:ADC0L\nADC0LTH:ADC0LTLADC0GTH:ADC0GTL\nC8051F310/1/2/3/4/5/6/7\n64 Rev. 1.85.4.2. Window Detector In Differential Mode\nFigure  5.8 shows two example window comparisons for right-justified, differential data, with \nADC0LTH:ADC0LTL  = 0x0040 (+64d) and ADC0GTH:ADC0GTH  = 0xFFFF (-1d). In differential mode, the \nmeasurable voltage between the input pins is between -VREF and VREF*(511/512). Output codes are rep -\nresented as 12-bit 2’s complement signed integers. In  the left example, an AD 0WINT interrupt will be gen -\nerated if the ADC0 conversion wo rd (ADC0H:ADC0L) is within the range defined by ADC0GTH:ADC0GTL \nand ADC0LTH:ADC0LTL (if  0xFFFF  (-1d)  < ADC0H:ADC0L  < 0x0040  (64d)). In the ri ght example, an \nAD0WINT interrupt will be generated if  the ADC0 conversion word is ou tside of the range defined by the \nADC0GT and ADC0LT registers (if  ADC0H:ADC0L  < 0xFFFF  (-1d)  or ADC0H:ADC0L  > 0x0040  (+64d)). \nFigure  5.9 shows an example using left-justified data with the same comparison values. \n \nFigure 5.8. AD C Window Compare Example: Righ t-Justified Differential Data\nFigure 5.9. ADC Window Compare Exampl e: Left-Justified Differential Data0x01FF\n0x0041\n0x0040\n0x003F\n0x0000\n0xFFFF\n0xFFFE\n0x0200 -VREFInput Voltage\n(Px.x - Px.x)\nVREF x (511/512)\nVREF x (64/512)\nVREF x (-1/512)0x01FF\n0x0041\n0x0040\n0x003F\n0x0000\n0xFFFF\n0xFFFE\n0x0200 -VREFInput Voltage\n(Px.x - Px.x)\nVREF x (511/512)\nVREF x (64/512)\nVREF x (-1/512)AD0WINT=1AD0WINT\nnot affected\nAD0WINT\nnot affectedADC0LTH:ADC0LTL\nADC0GTH:ADC0GTLAD0WINT\nnot affectedAD0WINT=1\nAD0WINT=1ADC0H:ADC0L ADC0H:ADC0L\nADC0GTH:ADC0GTL\nADC0LTH:ADC0LTL\n0x7FC0\n0x1040\n0x1000\n0x0FC0\n0x0000\n0xFFC0\n0xFF80\n0x8000 -VREFInput Voltage\n(Px.x - Px.y)\nVREF x (511/512)\nVREF x (64/512)\nVREF x (-1/512)0x7FC0\n0x1040\n0x1000\n0x0FC0\n0x0000\n0xFFC0\n0xFF80\n0x8000 -VREFInput Voltage\n(Px.x - Px.x)\nVREF x (511/512)\nVREF x (64/512)\nVREF x (-1/512)AD0WINT=1AD0WINT\nnot affected\nAD0WINT\nnot affectedADC0LTH:ADC0LTL\nADC0GTH:ADC0GTLAD0WINT\nnot affectedADC0GTH:ADC0GTLAD0WINT=1\nAD0WINT=1ADC0H:ADC0L ADC0H:ADC0L\nADC0LTH:ADC0LTL\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 65Table  5.1. ADC0 Electrical Characteristics\nVDD = 3.0  V, VREF = 2.40  V (REFSL=0), –40 to +85  °C unless otherwise specified\nParameter Conditions Min Typ Max Units\nDC Accuracy\nResolution 12 bits\nIntegral Nonlinearity —± 0 . 5± 1 L S B\nDifferential Nonlinearity Guaranteed Monotonic — ±0.5 ±1 LSB\nOffset Error –12 1 +12 LSB\nFull Scale Error Differential mode –15 –5 +5 LSB\nOffset Temperature Coefficient — 3.6 — ppm/°C\nDynamic Performance (10  kHz sine-wave Single-ended input, 0 to 1  dB below Full Scale, 200  ksps)\nSignal-to-Noise Plus Distortion 53 55.5 — dB\nTotal Harmonic Distortion Up to the 5th harmonic —– 6 7— d B\nSpurious-Free Dynamic Range —7 8— d B\nConversion Rate\nSAR Conversion Clock —— 3 M H z\nConversion Time in SAR Clocks 10 — — clocks\nTrack/Hold Acquisition Time 300 — — ns\nThroughput Rate — — 200 ksps\nAnalog Inputs\nInput Voltage Range 0— V R E F V\nInput Capacitance —5— p F\nTemperature Sensor ———\nLinearity* —± 0 . 5—° C\nGain* — 3350 ± 10 — µV / °C\nOffset* (Temp = 0 °C) — 897 ± 31 — mV\nPower Specifications\nPower Supply Current \uf020\n(VDD supplied to ADC0)Operating Mode, 200 ksps — 400 900 µA\nPower Supply Rejection —± 0 . 3— m V / V\n*Note:  Represents one standard deviation from the mean. Incl udes ADC offset, gain, and linearity variations.\nC8051F310/1/2/3/4/5/6/7\n66 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 676. Voltage Reference (C8051F310/1/2/3/6 only)\nThe voltage reference MUX on C8051F 310/1/2/3/6 devices is configurable to use an externally connected \nvoltage reference, or the power supply voltage (see Figure  6.1). The REFSL bit in the Reference Control \nregister (REF0CN) selects the reference source. For an external source, REFSL should be set to ‘0’; For V\nDD as the reference source, REFSL should be set to ‘1’. \nThe BIASE bit enables th e internal voltage bi as generator, which is used by  the ADC, Temperature Sensor, \nand Internal Oscilla tor. This bit is forced to logic 1 when an y of the aforementioned peripherals is enabled. \nThe bias generator  may be enabled manually by writing a ‘1’ to the BIASE bi t in register REF0CN; see \nSFR Definition 6.1  for REF0CN register details. The electrical specifications for the voltage reference cir -\ncuit are given in Table  6.1.\nImportant Note About the VREF Input: Port pin P0.0 is used as the external VREF input. When using an \nexternal voltage reference, P0.0 should be configured as analog input and skipped by the Digital Crossbar. To configure P0.0 as analog input, se t to ‘0’ Bit0 in register P0MDIN. To configure the Crossbar to skip \nP0.0, set to ‘1’ Bit0 in register P0SKIP. Refer to \nSection “13.  Port Input/Output” on page  129 for com -\nplete Port I/O configuration details.\nThe temperature sensor connects to the highest order input of the ADC0 positive input multiplexer (see \nSection “5.1.  Analog Multiplexer” on page  51 for details). The TEMPE bit in register REF0CN \nenables/disables the temperature sensor. While disabl ed, the temperature sensor defaults to a high imped -\nance state and any ADC0 measurements performed on the sensor result in meaningless data.\nFigure 6.1. Voltage Refere nce Functional Block DiagramInternal\nVREF\n(to ADC)To Analog Mux\nVDDVREFR1VDD External\nVoltage\nReference\nCircuit\nGNDREF0CN\nREFSL\nTEMPE\nBIASE\nTemp SensorENBias GeneratorTo ADC, Internal\nOscillatorEN\nIOSCEN\n0\n1\nC8051F310/1/2/3/4/5/6/7\n68 Rev. 1.8SFR Definition  6.1. REF0CN: Reference Control\nTable  6.1. External Voltage Reference Ci rcuit Electrical Characteristics\nVDD = 3.0  V; –40 to +85  °C unless otherwise specified\nParameter Conditions Min Typ Max Units\nInput Voltage Range 0VDD V\nInput CurrentSample Rate = 200 ksps; \nVREF = 3.0 V12 µABits7–4: UNUSED. Read = 0000b; Write = don’t care. \nBit3: REFSL: Voltage Reference Select.\nThis bit selects the source for the internal voltage reference.0: VREF input pin used as voltage reference.1: V\nDD used as voltage reference.\nBit2: TEMPE: Temperature Sensor Enable Bit.\n0: Internal Temperature Sensor off.1: Internal Temperature Sensor on.\nBit1: BIASE: Internal Analog Bias Generator Enable Bit. (Must be ‘1’ if using ADC).\n0: Internal Bias Generator off.1: Internal Bias Generator on.\nBit0: UNUSED. Read = 0b . Write = don’t care.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nREFSL TEMPE BIASE 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xD1\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 697. Comparators\nC8051F31x devices include two on-chip programmable voltage comparators: Comparator0 is shown in \nFigure  7.1; Comparator1 is shown in Figure  7.2. The two comparators operate identically with the following \nexceptions: (1) Their input selections differ as shown in Figure  7.1 and Figure  7.2; (2) Comparator0 can be \nused as a reset source.\nThe Comparator offers programmable response time a nd hysteresis, an analog in put multiplexer, and two \noutputs that are optionally available at the Port pins : a synchronous “latched” output (CP0, CP1), or an \nasynchronous “raw” output (CP0A, CP1A). The asyn chronous CP0A signal is available even when the \nsystem clock is not active. This allo ws the Comparator to operate and generate an output with the device \nin STOP mode. When assigned to a Port pin, the Comparator output may be configured as open drain or push-pull (see \nSection “13.2.  Port I/O Initialization” on page  133). Comparator0 may also be used as a \nreset source (see Section “9.5.  Comparator0 Reset” on page  108).\nThe Comparator0 inputs are selected in the CPT0MX register ( SFR Definition 7.2 ). The CMX0P1-CMX0P0 \nbits select the Comparator0 positive input; the CMX0N1-CMX0N0 bits select the Comparator0 negative \ninput. The Comparator1 inputs are selected in the CPT1MX register ( SFR Definition 7.5 ). The CMX1P1-\nCMX1P0 bits select the Comparator1 positive inpu t; the CMX1N1-CMX1N0 bits select the Comparator1 \nnegative input. \nImportant Note About Comparator Inputs: The Port pins selected as comparator inputs should be con -\nfigured as analog inputs in their associated Port co nfiguration register, and configured to be skipped by the \nCrossbar (for details on Port configuration, see Section “13.3.  General Purpose Port I/O” on page  135).\nFigure 7.1. Comparator0 Functional Block DiagramVDDCPT0CN\nReset\nDecision\nTree +\n -\nCrossbarInterrupt\nLogic\nQQSET\nCLRD\nQQSET\nCLRD\n(SYNCHRONIZER)\nGNDCP0 +P1.0\nP1.4P2.0P2.4\nCP0 -P1.1P1.5P2.1P2.5CP0EN\nCP0OUT\nCP0RIF\nCP0FIF\nCP0HYP1\nCP0HYP0\nCP0HYN1\nCP0HYN0CPT0MXCMX0N1\nCMX0N0\nCMX0P1\nCMX0P0\nCPT0MDCP0RIE\nCP0FIE\nCP0MD1\nCP0MD0CP0\nCP0ACP0\n Rising-edgeCP0\nFalling-edgeCP0\nInterrupt\nC8051F310/1/2/3/4/5/6/7\n70 Rev. 1.8The Comparator output can be polled in software, used as an interrupt source, and/or routed to a Port pin. \nWhen routed to a Port pin, the Comp arator output is available asynch ronous or synchronous to the system \nclock; the asynchronous output is available even in STOP mode (with no system clock active). When dis -\nabled, the Comparator output (if assigned to a Port I/O pin via the Crossbar) defaults  to the logic low state, \nand its supply current falls to less than 100  nA. See Section “13.1.  Priority Crossbar  Decoder” on \npage  131 for details on configuring Comparator outputs vi a the digital Crossbar. Comparator inputs can be \nexternally driven from –0.25  V to (VDD) + 0.25 V without damage or upset. The complete Comparator elec -\ntrical specifications are given in Table  7.1.\nThe Comparator response time may be configured in software via the CPTnMD registers (see SFR Defini -\ntion 7.3  and SFR Definition 7.6 ). Selecting a longer response time re duces the Comparator supply current. \nSee Table  7.1 for complete timing and curr ent consumption specifications.\n \nFigure 7.2. Comparator1 Functional Block DiagramVDDCPT1CN\nReset\nDecision\nTree +\n -\nCrossbarInterrupt\nLogic\nQQSET\nCLRD\nQQSET\nCLRD\n(SYNCHRONIZER)\nGNDCP1 +P1.2\nP1.6P2.2\nP2.6\nCP1 -P1.3P1.7\nP2.3P2.7CP1EN\nCP1OUT\nCP1RIF\nCP1FIF\nCP1HYP1\nCP1HYP0\nCP1HYN1\nCP1HYN0CPT1MXCMX1N1\nCMX1N0\nCMX1P1\nCMX1P0\nCPT1MDCP1RIE\nCP1FIE\nCP1MD1\nCP1MD0CP1\nCP1ACP1\n Rising-edgeCP1\nFalling-edgeCP1\nInterrupt\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 71Figure 7.3. Compar ator Hysteresis Plot\nThe Comparator hysteresis is software-programmabl e via its Comparator Control register CPTnCN (for \nn = 0 or 1). The user can program both the amount of hyster esis voltage (referred to the input voltage) and \nthe positive and negative-going symmetry of th is hysteresis around the threshold voltage.\nThe Comparator hysteresis is programmed using Bi ts3-0 in the Comparator Control Register CPTnCN \n(shown in SFR Definition 7.1  and SFR Definition 7.4 ). The amount of negative hysteresis voltage is \ndetermined by the settings of the CPnHYN bits. As shown in Table  7.1, settings of 20, 10 or 5  mV of \nnegative hysteresis can be programmed, or negative hysteresis can be disabled. In a similar way, the \namount of positive hysteresis is determined by the setting the CPnHYP bits.\nComparator interrupts can be genera ted on both rising-e dge and falling-edge output transitions. (For Inter -\nrupt enable and priority control, see Section “8.3.  Interrupt Handler” on page  93). The CPnFIF flag is set \nto logic 1 upon a Comparator falling-e dge interrupt, and the CPnRIF flag is set to logic 1 upon the Compar -\nator rising-edge interrupt. Once set, these bits remain  set until cleared by software. The output state of the \nComparator can be obtained at any time by reading the CPnOUT bit. The Comparator is enabled by set -\nting the CPnEN bit to logic 1, and is disabled by clearing this bit to logic 0.\nThe output state of the Comparator can be obtained at any time by reading the CPnOUT bit. The Compar -\nator is enabled by setting the CPnEN bit to logic  1, and is disabled by clearing this bit to logic  0.\nNote that false rising edges and fa lling edges can be detected when the comparator is first powered-on or \nif changes are made to the hy steresis or response time control bits. Therefore, it is recommended that the \nrising-edge and falling-edge flags be explicitly cleared to logic  0 a short time after the comparator is \nenabled or its mode bits have been changed. This Power Up Time is specified in Table  7.1 on page  78.Positive Hysteresis Voltage\n(Programmed with CP0HYP Bits)\nNegative Hysteresis Voltage\n(Programmed by CP0HYN Bits)VIN-\nVIN+INPUTSCIRCUIT CONFIGURATION+\n_CP0+\nCP0-CP0VIN+\nVIN-OUT\nVOH\nPositive Hysteresis\nDisabledMaximum\nPositive HysteresisNegative Hysteresis\nDisabledMaximum\nNegative HysteresisOUTPUT\nVOL\nC8051F310/1/2/3/4/5/6/7\n72 Rev. 1.8SFR Definition  7.1. CPT0CN: Comparator0 Control\nBit7: CP0EN: Compar ator0 Enable Bit.\n0: Comparator0 Disabled.1: Comparator0 Enabled.\nBit6: CP0OUT: Comparator0 Output State Flag.\n0: Voltage on CP0+ < CP0–.\n1: Voltage on CP0+ > CP0–.\nBit5: CP0RIF: Comparator0 Rising-Edge Interrupt Flag.\n0: No Comparator0 Rising Edge Interrupt has occurred since this flag was last cleared.1: Comparator0 Rising Edge Interrupt has occurred.\nBit4: CP0FIF: Comparator0 Fa lling-Edge Inte rrupt Flag.\n0: No Comparator0 Falling-Edge  Interrupt has occurred sinc e this flag was last cleared.\n1: Comparator0 Falling-Edge Interrupt has occurred.\nBits3–2: CP0HYP1-0: Comparator0 Posi tive Hysteresis Control Bits.\n00: Positive Hysteresis Disabled.01: Positive Hysteresis = 5 mV.10: Positive Hysteresis = 10 mV.11: Positive Hysteresis = 20 mV.\nBits1–0: CP0HYN1-0: Comparator0 Negative Hysteresis Control Bits.\n00: Negative Hysteresis Disabled.01: Negative Hysteresis = 5 mV.10: Negative Hysteresis = 10 mV.11: Negative Hysteresis = 20 mV.R/W R R/W R/W R/W R/W R/W R/W Reset Value\nCP0EN CP0OUT CP0RIF CP0FIF CP0HYP1 CP0HYP0 CP0HYN1 CP0HYN0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x9B\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 73SFR Definition  7.2. CPT0MX: Comparator0 MUX Selection  \nBits7–6: UNUSED. Read = 00b, Write = don’t care.\nBits5–4: CMX0N1–CMX0N0: Comparat or0 Negative Input MUX Select.\nThese bits select which Port pin is us ed as the Comparator0 negative input. \nBits3–2: UNUSED. Read = 00b, Write = don’t care.\nBits1–0: CMX0P1–CMX0P0: Comparator0 Positive Input MUX Select.\nThese bits select which Port pin is us ed as the Comparator0 positive input.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - CMX0N1 CMX0N0 - - CM X0P1 CMX0P0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x9F\nCMX0N1 CMX0N0 Negative Input\n00 P 1 . 1\n01 P 1 . 5\n10 P 2 . 111 P 2 . 5\nCMX0P1 CMX0P0 Positive Input\n00 P 1 . 001 P 1 . 4\n10 P 2 . 0\n11 P 2 . 4\nC8051F310/1/2/3/4/5/6/7\n74 Rev. 1.8SFR Definition  7.3. CPT0MD: Comparator 0 Mode Selection\nBits7–6: UNUSED. Read = 00b. Write = don’t care.\nBit5: CP0RIE: Comparator Rising-Edge Interrupt Enable.\n0: Comparator rising-edge interrupt disabled.1: Comparator rising-edge interrupt enabled.\nBit4: CP0FIE: Comparator Fa lling-Edge Interrupt Enable.\n0: Comparator falling-edge interrupt disabled.1: Comparator falling-edge interrupt enabled.\nBits1–0: CP0MD1–CP0MD0: Comparator0 Mode Select\nThese bits select the response time for Comparator0. R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - CP0RIE CP0FIE - - CP0MD1 CP0MD0 00000010\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x9D\nMode CP0MD1 CP0MD0 CP0 Response Time (TYP)\n0 0 0 Fastest Response Time\n101 —210 —\n3 1 1 Lowest Power Consumption\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 75SFR Definition  7.4. CPT1CN: Comparator1 Control\nBit7: CP1EN: Compar ator1 Enable Bit.\n0: Comparator1 Disabled.1: Comparator1 Enabled.\nBit6: CP1OUT: Comparator1 Output State Flag.\n0: Voltage on CP1+ < CP1–.1: Voltage on CP1+ > CP1–.\nBit5: CP1RIF: Comparator1 Rising-Edge Interrupt Flag.\n0: No Comparator1 Rising Edge Interrupt has occurred since this flag was last cleared.1: Comparator1 Rising Edge Interrupt has occurred.\nBit4: CP1FIF: Comparator1 Fa lling-Edge Inte rrupt Flag.\n0: No Comparator1 Falling-Edge  Interrupt has occurred sinc e this flag was last cleared.\n1: Comparator1 Falling-Edge Interrupt has occurred.\nBits3–2: CP1HYP1–0: Comparator1 Positive Hysteresis Control Bits.\n00: Positive Hysteresis Disabled.01: Positive Hysteresis = 5 mV.\n10: Positive Hysteresis = 10 mV.\n11: Positive Hysteresis = 20 mV.\nBits1–0: CP1HYN1–0: Comparator1 Nega tive Hysteresis Control Bits.\n00: Negative Hysteresis Disabled.01: Negative Hysteresis = 5 mV.10: Negative Hysteresis = 10 mV.11: Negative Hysteresis = 20 mV.R/W R R/W R/W R/W R/W R/W R/W Reset Value\nCP1EN CP1OUT CP1RIF CP1FIF CP1HYP1 CP1HYP0 CP1HYN1 CP1HYN0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x9A\nC8051F310/1/2/3/4/5/6/7\n76 Rev. 1.8SFR Definition  7.5. CPT1MX: Comparator1 MUX Selection\nBits7–6: UNUSED. Read = 00b, Write = don’t care.\nBits5–4: CMX1N1–CMX1N0: Comparat or1 Negative Input MUX Select.\nThese bits select which Port pin is us ed as the Comparator1 negative input. \nBits3–2: UNUSED. Read = 00b, Write = don’t care.\nBits1–0: CMX1P1–CMX1P0: Comparator1 Positive Input MUX Select.\nThese bits select which Port pin is us ed as the Comparator1 positive input.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - CMX1N1 CMX1N0 - - CMX1P1 CMX1P0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x9E\nCMX1N1 CMX1N0 Negative Input\n00 P 1 . 3\n01 P 1 . 710 P 2 . 311 P 2 . 7\nCMX1P1 CMX1P0 Positive Input\n00 P 1 . 201 P 1 . 6\n10 P 2 . 2\n11 P 2 . 6\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 77SFR Definition  7.6. CPT1MD: Comparator 1 Mode Selection\nBits7–6: UNUSED. Read = 00b, Write = don’t care.\nBit5: CP1RIE: Comparator Rising-Edge Interrupt Enable.\n0: Comparator rising-edge interrupt disabled1: Comparator rising-edge interrupt enabled.\nBit4: CP1FIE: Comparator Fa lling-Edge Interrupt Enable.\n0: Comparator falling-edge interrupt disabled.1: Comparator falling-edge interrupt enabled.\nBits1–0: CP1MD1–CP1MD0: Comparator1 Mode Select.\nThese bits select the response time for Comparator1. R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - CP1RIE CP1FIE - - CP1MD1 CP1MD0 00000010\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x9C\nMode CP1MD1 CP1MD0 CP1 Response Time (TYP)\n0 0 0 Fastest Response Time\n101 —210 —\n3 1 1 Lowest Power Consumption\nC8051F310/1/2/3/4/5/6/7\n78 Rev. 1.8 \nTable  7.1. Comparator Electrical Characteristics\nVDD = 3.0  V, –40 to +85  °C unless otherwise noted. \nAll specifications apply to both Comparat or0 and Comparator1 unless otherwise noted.\nParameter Conditions Min Typ Max Units\nResponse Time:\nMode 0, Vcm1 = 1.5  VCP0+ – CP0– = 100 mV — 100 — ns\nCP0+ – CP0– = –100 mV — 250 — ns\nResponse Time:\nMode 1, Vcm1 = 1.5  VCP0+ – CP0– = 100 mV — 175 — ns\nCP0+ – CP0– = –100 mV — 500 — ns\nResponse Time:\nMode 2, Vcm1 = 1.5  VCP0+ – CP0– = 100 mV — 320 — ns\nCP0+ – CP0– = –100 mV — 1100 — ns\nResponse Time:\nMode 3, Vcm1 = 1.5  VCP0+ – CP0– = 100 mV — 1050 — ns\nCP0+ – CP0– = –100 mV — 5200 — ns\nCommon-Mode Rejection Ratio —1 . 5 4 m V / V\nPositive Hysteresis 1 CP0HYP1-0 = 00 — 0 1 mV\nPositive Hysteresis 2 CP0HYP1-0 = 01 2 5 7 mV\nPositive Hysteresis 3 CP0HYP1-0 = 10 5 10 13 mV\nPositive Hysteresis 4 CP0HYP1-0 = 11 12 20 25 mV\nNegative Hysteresis 1 CP0HYN1-0 = 00 0 1 mV\nNegative Hysteresis 2 CP0HYN1-0 = 01 2 5 7 mV\nNegative Hysteresis 3 CP0HYN1-0 = 10 5 10 13 mV\nNegative Hysteresis 4 CP0HYN1-0 = 11 12 20 25 mV\nInverting or Non- Inverting Input \nVoltage Range–0.25 — VDD + \n0.25V\nInput Capacitance —7— p F\nInput Bias Current —1— n A\nInput Offset Voltage –5 — +5 mV\nPower Supply\nPower Supply Rejection2 —0 . 1 1 m V / V\nPower-up Time —1 0— µ s\nSupply Current at DCMode 0 — 7.6 20 µA\nMode 1 — 3.2 10 µA\nMode 2 — 1.3 5 µAMode 3 — 0.4 2.5 µA\nNotes:\n1.Vcm is the common-mode voltage on CP0+ and CP0–.\n2. Guaranteed by design and/or characterization.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 798. CIP-51 Microcontroller  \nThe MCU system controller core is the CIP-51 microcon troller. The CIP-51 is fully compatible with the \nMCS-51™ instruction set; standard 803x/805x assemble rs and compilers can be used to develop soft -\nware. The MCU family has a superset of all the peripherals included with a standard 8051. Included are \nfour 16-bit counter/timers (see description in Section 17 ), an enhanced full-duplex UART (see description \nin Section 15 ), an Enhanced SPI (see description in Section 16 ), 256 bytes  of internal RAM, 128  byte \nSpecial Function Register (SFR) address space ( Section 8.2.6 ), and 29 Port I/O (see description in Sec-\ntion 13 ). The CIP-51 also includes on-chip debug hardware (see description in Section 20 ), and interfaces \ndirectly with the analog and digi tal subsystems providing a complete data acquisition or control-system \nsolution in a single integrated circuit.\nThe CIP-51 Microcontroller core implements the standard 8051 organization and peripherals as well as additional custom peripherals and func tions to extend its capability (see \nFigure  8.1 for a block diagram). \nThe CIP-51 includes the following features:\nFigure 8.1. CIP-51 Block Diagram- Fully Compatible wit h MCS-51 Instruction \nSet\n- 25 MIPS Peak Throughput with 25 MHz \nClock\n- 0 to 25 MHz Clock Frequency- 256 Bytes of Internal RAM -2 9  P o r t  I / O\n- Extended Interrupt Handler - Reset Input- Power Management Modes- On-chip Debug Logic- Program and Data Memory Security\nDATA  BUSTMP1 TMP2\nPRGM. ADDRESS REG.PC INCREMENTERALUPSWDATA  BUSDATA  BUS\nMEMORY\nINTERFACEMEM_ADDRESS D8\nPIPELINEBUFFER\nDATA POINTER\nINTERRUPT\nINTERFACESYSTEM_IRQs\nEMULATION_IRQMEM_CONTROL\nCONTROL\nLOGICA16PROGRAM  COUNTER (PC)\nSTOPCLOCKRESET\nIDLEPOWER  CONTROL\nREGISTER\nDATA  BUSSFR\nBUS\nINTERFACESFR_ADDRESS\nSFR_CONTROL\nSFR_WRITE_DATA\nSFR_READ_DATA\nD8D8B  REGISTER\nD8D8ACCUMULATOR\nD8\nD8D8\nD8\nD8D8\nD8\nD8MEM_WRITE_DATA\nMEM_READ_DATA\nD8SRAM\nADDRESS\nREGISTERSRAM\n(256 X 8)D8STACK POINTER\nD8\nC8051F310/1/2/3/4/5/6/7\n80 Rev. 1.8Performance\nThe CIP-51 employs a pipelined architecture that grea tly increases its instruction throughput over the stan -\ndard 8051 architecture. In a standar d 8051, all instructions except for MUL and DIV take 12 or 24 system \nclock cycles to execute, and usually have a maximum system clock of 12  MHz. By contrast, the CIP-51 \ncore executes 70% of its instructions in one or tw o system clock cycles, with no instructions taking more \nthan eight system clock cycles.\nWith the CIP-51\'s maximum system clock at 25  MHz, it has a peak throughput of 25  MIPS. The CIP-51 has \na total of 109 instructions. The table below shows the to tal number of instructions that require each execu -\ntion time.\nProgramming and Debugging Support\nIn-system programming of the Flash program memory and communication with on-chip debug support \nlogic is accomplished via the Silicon  Labs 2-Wire Developm ent Interface (C2). The re-programma ble Flash \ncan also be read and changed a single byte at a time  by the application software using the MOVC and \nMOVX instructions. This feature allo ws program memory to be used for non-volatile data storage as well \nas updating program code under software control.\nThe on-chip debug support logic facilitates full speed in-circuit debugging, a llowing the setting of hardware \nbreakpoints, starting, stopping and single stepping th rough program execution (including interrupt service \nroutines), examination of the program\'s call stack, a nd reading/writing the conten ts of registers and mem -\nory. This method of on-chip debugging is completely non-intrusive, requiring no RAM, Stack, timers, or \nother on-chip resources. C2 details can be found in Section “20.  C2 Interface” on page  223.\nThe CIP-51 is support ed by development tools from Silicon Labs and third party vendors. Silicon Labs pro -\nvides an integrated development environment (IDE) including an editor, evaluation compiler, assembler, \ndebugger and programmer. The IDE\'s debugger and programmer interface to the CIP-51 via the C2 inter -\nface to provide fast and efficien t in-system device programming and debugging. Third party macro assem -\nblers and C compilers are also available.\n8.1. Instruction Set\nThe instruction set of the CIP-51 System Controller is  fully compatible with the standard MCS-51™ instruc -\ntion set. Standard 8051 development tools can be used to develop software for the CIP-51. All CIP-51 \ninstructions are the binary and fu nctional equivalent of their MCS-51™  counterparts, including opcodes, \naddressing modes and effect on PSW flags. However, in struction timing is different than that of the stan -\ndard 8051. \n8.1.1. Instruction and CPU Timing\nIn many 8051 implementations, a distinction is ma de between machine cycles and clock cycles, with \nmachine cycles varying from 2 to 12 clock cycles in length. However, the CIP-51 implementation is based \nsolely on clock cycle timing.   All instructio n timings are specified in terms of clock cycles.\nDue to the pipelined architecture of the CIP-51, most instructions execute in the same number of clock \ncycles as there are program bytes in the instruction. Conditional branch instruct ions take one less clock \ncycle to complete when the branch is not taken as opposed to when the branch is taken. Table  8.1 is the Clocks to Execute 1 2 2/3 3 3/4 4 4/5 5 8\nNumber of Instructions 26 50 5 14 7 3 1 2 1\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 81CIP-51 Instruction Set Summary, which includes the mnemonic, number of bytes, and number of clock \ncycles for each instruction.\n8.1.2. MOVX Instruction and Program Memory \nThe MOVX instruction is typically used to access exte rnal data memory (Note: the C8051F31x does not \nsupport external data or program memory). In the CIP-51, the MOVX write instruction is used to accesses external RAM and the on-chip program memory space implemented as re-programmable Flash memory. The Flash access feature provides a mechanism for the CIP-51 to update program code and use the pro\n-\ngram memory space for non-volatile data storage. Refer to Section “10.  Flash Memory” on page  111 for \nfurther details.\nTable  8.1. CIP-51 Instruction Set Summary  \nMnemonic Description BytesClock \nCycles\nArithmetic Operations\nADD A, Rn Add register to A 1 1\nADD A, direct Add direct byte to A 2 2\nADD A, @Ri Add indirect RAM to A 1 2\nADD A, #data Add immediate to A 2 2\nADDC A, Rn Add register to A with carry 1 1\nADDC A, direct Add direct byte to A with carry 2 2\nADDC A, @Ri Add indirect RAM to A with carry 1 2\nADDC A, #data Add immediate to A with carry 2 2\nSUBB A, Rn Subtract register from A with borrow 1 1\nSUBB A, direct Subtract direct byte from A with borrow 2 2\nSUBB A, @Ri Subtract indirect RAM from A with borrow 1 2\nSUBB A, #data Subtract immediate from A with borrow 2 2\nINC A Increment A 1 1\nINC Rn Increment register 1 1\nINC direct Increment direct byte 2 2\nINC @Ri Increment indirect RAM 1 2\nDEC A Decrement A 1 1\nDEC Rn Decrement register 1 1\nDEC direct Decrement direct byte 2 2\nDEC @Ri Decrement indirect RAM 1 2\nINC DPTR Increment Data Pointer 1 1\nMUL AB Multiply A and B 1 4\nDIV AB Divide A by B 1 8\nDA A Decimal adjust A 1 1\nLogical Operations\nANL A, Rn AND Register to A 1 1\nANL A, direct AND direct byte to A 2 2\nANL A, @Ri AND indirect RAM to A 1 2\nANL A, #data AND immediate to A 2 2\nANL direct, A AND A to direct byte 2 2\nANL direct, #data AND immediate to direct byte 3 3\nORL A, Rn OR Register to A 1 1\nC8051F310/1/2/3/4/5/6/7\n82 Rev. 1.8ORL A, direct OR direct byte to A 2 2\nORL A, @Ri OR indirect RAM to A 1 2\nORL A, #data OR immediate to A 2 2\nORL direct, A OR A to direct byte 2 2\nORL direct, #data OR immediate to direct byte 3 3\nXRL A, Rn Exclusive-OR Register to A 1 1\nXRL A, direct Exclusive-OR direct byte to A 2 2\nXRL A, @Ri Exclusive-OR indirect RAM to A 1 2\nXRL A, #data Exclusive-OR immediate to A 2 2\nXRL direct, A Exclusive-OR A to direct byte 2 2\nXRL direct, #data Exclusive-OR immediate to direct byte 3 3\nCLR A Clear A 1 1\nCPL A Complement A 1 1\nRL A Rotate A left 1 1\nRLC A Rotate A left through Carry 1 1\nRR A Rotate A right 1 1\nRRC A Rotate A right through Carry 1 1\nSWAP A Swap nibbles of A 1 1\nData Transfer\nMOV A, Rn Move Register to A 1 1\nMOV A, direct Move direct byte to A 2 2\nMOV A, @Ri Move indirect RAM to A 1 2\nMOV A, #data Move immediate to A 2 2\nMOV Rn, A Move A to Register 1 1\nMOV Rn, direct Move direct byte to Register 2 2\nMOV Rn, #data Move immediate to Register 2 2\nMOV direct, A Move A to direct byte 2 2\nMOV direct, Rn Move Register to direct byte 2 2\nMOV direct, direct Move direct byte to direct byte 3 3\nMOV direct, @Ri Move indirect RAM to direct byte 2 2\nMOV direct, #data Move immediate to direct byte 3 3\nMOV @Ri, A Move A to indirect RAM 1 2\nMOV @Ri, direct Move direct byte to indirect RAM 2 2\nMOV @Ri, #data Move immediate to indirect RAM 2 2\nMOV DPTR, #data16 Load DPTR with 16-bit constant 3 3\nMOVC A, @A+DPTR Move code byte relative DPTR to A 1 3\nMOVC A, @A+PC Move code byte relative PC to A 1 3\nMOVX A, @Ri Move external data (8-bit address) to A 1 3\nMOVX @Ri, A Move A to external data (8-bit address) 1 3\nMOVX A, @DPTR Move external data (16-bit address) to A 1 3\nMOVX @DPTR, A Move A to external data (16-bit address) 1 3\nPUSH direct Push direct byte onto stack 2 2\nPOP direct Pop direct byte from stack 2 2\nXCH A, Rn Exchange Register with A 1 1\nXCH A, direct Exchange direct byte with A 2 2Table 8.1. CIP-51 Instructi on Set Summary  (Continued)\nMnemonic Description BytesClock \nCycles\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 83XCH A, @Ri Exchange indirect RAM with A 1 2\nXCHD A, @Ri Exchange low nibble of indirect RAM with A 1 2\nBoolean Manipulation\nCLR C Clear Carry 1 1\nCLR bit Clear direct bit 2 2\nSETB C Set Carry 1 1\nSETB bit Set direct bit 2 2\nCPL C Complement Carry 1 1\nCPL bit Complement direct bit 2 2\nANL C, bit AND direct bit to Carry 2 2\nANL C, /bit AND complement of direct bit to Carry 2 2\nORL C, bit OR direct bit to carry 2 2\nORL C, /bit OR complement of direct bit to Carry 2 2\nMOV C, bit Move direct bit to Carry 2 2\nMOV bit, C Move Carry to direct bit 2 2\nJC rel Jump if Carry is set 2 2/3\nJNC rel Jump if Carry is not set 2 2/3\nJB bit, rel Jump if direct bit is set 3 3/4\nJNB bit, rel Jump if direct bit is not set 3 3/4\nJBC bit, rel Jump if direct bit is set and clear bit 3 3/4\nProgram Branching\nACALL addr11 Absolute subroutine call 2 3\nLCALL addr16 Long subroutine call 3 4\nRET Return from subroutine 1 5\nRETI Return from interrupt 1 5\nAJMP addr11 Absolute jump 2 3\nLJMP addr16 Long jump 3 4\nSJMP rel Short jump (relative address) 2 3\nJMP @A+DPTR Jump indirect relative to DPTR 1 3\nJZ rel Jump if A equals zero 2 2/3\nJNZ rel Jump if A does not equal zero 2 2/3\nCJNE A, direct, rel Compare direct byte to A and jump if not equal 3 3/4\nCJNE A, #data, rel Compare immediate to A and jump if not equal 3 3/4\nCJNE Rn, #data, relCompare immediate to Register and jump if not \nequal3 3/4\nCJNE @Ri, #data, relCompare immediate to indirect and jump if not equal3 4/5\nDJNZ Rn, rel Decrement Register and jump if not zero 2 2/3\nDJNZ direct, rel Decrement direct byte and jump if not zero 3 3/4\nNOP No operation 1 1Table 8.1. CIP-51 Instructi on Set Summary  (Continued)\nMnemonic Description BytesClock \nCycles\nC8051F310/1/2/3/4/5/6/7\n84 Rev. 1.8Notes on Registers, Operands and Addressing Modes:\nRn - Register R0–R7 of the curr ently selected register bank.\n@Ri - Data RAM location address ed indirectly through R0 or R1.\nrel - 8-bit, signed (two’s complement) offset relative to the first byte of the following instruction. Used by \nSJMP and all conditional jumps.\ndirect  - 8-bit internal data location’s address. This could be a direct-access Data RAM location (0x00–\n0x7F) or an SFR (0x80–0xFF).\n#data  - 8-bit constant\n#data16  - 16-bit constant\nbit - Direct-accessed bit in Data RAM or SFR\naddr11  - 11-bit destination address used by ACALL and  AJMP. The destination mu st be within the same \n2 kB page of program memory as the first byte of the following instruction.\naddr16  - 16-bit destination address used by LCALL a nd LJMP. The destination may be anywhere within \nthe 8 kB program memory space.\nThere is one unused opcode (0xA5) that performs the same function as NOP.\nAll mnemonics copyrighted © Intel Corporation 1980.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 858.2. Memory Organization\nThe memory organization of the CIP-51 System Controller is similar to that of a standard 8051. There are \ntwo separate memory spaces: program memory and data memory. Program and data memory share the same address space but are accessed via different in struction types. The CIP-51  memory organization is \nshown in \nFigure  8.2.\nFigure 8.2. Memory Map\n8.2.1. Program Memory\nThe CIP-51 core has a 64k-byte program memory space. The C8051F310/1 and C8051F312/3/4/5 imple -\nment 16k and 8  kB, respectively, of this program memory space as in-system, re-programmable Flash \nmemory, organized in a contiguous block from addresses 0x0000 to 0x3FFF or 0x0000 to 0x1FFF. Addresses above 0x3E00 are reserved on the 16\n kB devices.\nProgram memory is normally assumed to be read-only . However, the CIP-51 can write to program memory \nby setting the Program Store Write Enable bit (PSCTL.0 ) and using the MOVX instru ction. This feature pro -\nvides a mechanism for the CIP-51 to update program  code and use the program memory space for non-\nvolatile data storage. Refer to Section “10.  Flash Memory” on page  111 for further details.PROGRAM/DATA MEMORY \n(Flash)\n(Direct and Indirect \nAddressing)\n0x000x7FUpper 128 RAM \n(Indirect Addressing \nOnly)0x800xFFSpecial Function \nRegister\'s \n(Direct Addressing Only)DATA MEMORY (RAM)\nGeneral Purpose \nRegisters0x1F0x200x2FBit Addressable Lower 128 RAM \n(Direct and Indirect Addressing)0x30INTERNAL DATA  ADDRESS SPACE\nEXTERNAL DATA ADDRESS SPACE\nXRAM - 1024 Bytes\n(accessable using MOVX \ninstruction)0x00000x03FFSame 1024 bytes as from \n0x0000 to 0x03FF, wrapped \non 1 kB boundaries\n0x04000xFFFF16 kB Flash\n(In-System \nProgrammable in 512 \nByte Sectors)\n0x0000RESERVED0x3E00\n0x3DFF\n8 kB Flash\n(In-System \nProgrammable in 512 \nByte Sectors)\n0x0000RESERVED0x2000\n0x1FFFC8051F310/1\nC8051F312/3/4/5\nC8051F310/1/2/3/4/5/6/7\n86 Rev. 1.88.2.2. Data Memory\nThe CIP-51 includes 256 bytes of internal RAM mapped into the data memory space from 0x00 through \n0xFF. The lower 128  bytes of data memory are used for gener al purpose registers and scratch pad mem -\nory. Either direct or indirect addressing may be used to access the lower 128  bytes of data memory. Loca -\ntions 0x00 through 0x1F are addressable as four banks of general purpose register s, each bank consisting \nof eight byte-wide registers. The next 16  bytes, locations 0x20 through 0x2F, may either be addressed as \nbytes or as 128  bit locations accessible with the direct addressing mode.\nThe upper 128  bytes of data memory are accessible only by i ndirect addressing. This region occupies the \nsame address space as the Special Function Regist ers (SFR) but is physically separate from the SFR \nspace. The addressing mode used by an instructio n when accessing locations above 0x7F determines \nwhether the CPU accesses the upper 128  bytes of data memory space or th e SFRs. Instructions that use \ndirect addressing will access the SFR space. Instructions using indirect  addressing above 0x7F access the \nupper 128  bytes of data memory. Figure  8.2 illustrates the data memory organization of the CIP-51.\n8.2.3. General Purpose Registers\nThe lower 32 bytes of data memory, locations 0x00 through 0x1F, may be addressed as four banks of gen -\neral-purpose registers. Each bank consists of eigh t byte-wide registers designated R0 through R7. Only \none of these banks may be enabled at a time. Two bi ts in the program status word, RS0 (PSW.3) and RS1 \n(PSW.4), select the active register bank (see description of the PSW in SFR Definition 8.4 ). This allows \nfast context switching when entering subroutines and in terrupt service routines. Indirect addressing modes \nuse registers R0 and R1 as index registers.\n8.2.4. Bit Addressable Locations\nIn addition to direct access to data memory organized as bytes, the sixteen data memory locations at 0x20 \nthrough 0x2F are also accessible as 128  individually addressable bits. Each bit has a bit address from \n0x00 to 0x7F. Bit  0 of the byte at 0x20 has bit address 0x00 while bit7 of the byte at 0x20 has bit address \n0x07. Bit 7 of the byte at 0x2F has bit address 0x7F. A bit access is distinguished from a full byte access by \nthe type of instruction used (bit source or destinat ion operands as opposed to a byte source or destina -\ntion). \nThe MCS-51™ assembly language allows an alternate notation for bit addressing of the form XX.B where \nXX is the byte address and B is the bit position  within the byte. For example, the instruction:\nMOV C, 22.3h \nmoves the Boolean value at 0x13 (bit 3 of the byte at location 0x22) into the Carry flag.\n8.2.5. Stack\nA programmer\'s stack can be located anywhere in the 256-byte data memory. The stack area is desig -\nnated using the Stack Pointer (SP, 0x81) SFR. The SP will poin t to the last location  used. The next value \npushed on the stack is placed at SP +1 and then SP is incremented. A re set initializes the stack pointer to \nlocation 0x07. Therefore, the first value pushed on the st ack is placed at location 0x08, which is also the \nfirst register (R0) of register bank 1. Thus, if more than one register bank is to be used, the SP should be \ninitialized to a location in the data  memory not being used for data storage. The stack depth can extend up \nto 256  bytes.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 878.2.6. Special Function Registers\nThe direct-access data memory locations from 0x80 to 0xFF constitute the sp ecial function registers \n(SFRs). The SFRs provide control and data exchang e with the CIP-51\'s resources and peripherals. The \nCIP-51 duplicates the SFRs found in a typical 805 1 implementation as well as implementing additional \nSFRs used to configure and access the sub-systems uni que to the MCU. This allows the addition of new \nfunctionality while retain ing compatibility with the MC S-51™ instruction set. Table  8.2 lists the SFRs imple -\nmented in the CIP-51 System Controller.\nThe SFR registers are accessed anytime the direct ad dressing mode is used to access memory locations \nfrom 0x80 to 0xFF. SFRs with addresses ending in 0x 0 or 0x8 (e.g. P0, TCON, SCON0, IE, etc.) are bit-\naddressable as well as byte-addressable. All othe r SFRs are byte-addressable only. Unoccupied \naddresses in the SFR space are rese rved for future use. Accessing t hese areas will have an indeterminate \neffect and should be avoided. Refer to the corres ponding pages of the datasheet, as indicated in Table  8.3, \nfor a detailed description of each register.\nTable  8.2. Special Function Regist er (SFR) Memory Map\nF8 SPI0CN PCA0L PCA0H PCA0CPL0 PCA0CPH0 PCA0CPL4 PCA0CPH4 VDM0CN\nF0 B P0MDIN P1MDIN P2MDIN P3MDIN EIP1\nE8 ADC0CN PCA0CPL1 PCA0CPH1 PCA0CPL2 PCA0CPH2 PCA0CPL3 PCA0CPH3 RSTSRC\nE0 ACC XBR0 XBR1 IT01CF EIE1\nD8 PCA0CN PCA0MD PCA0CPM0 PCA0CPM1 PCA0CPM2 PCA0CPM3 PCA0CPM4\nD0 PSW REF0CN P0SKIP P1SKIP P2SKIP\nC8 TMR2CN TMR2RLL TMR2RLH TMR2L TMR2H\nC0 SMB0CN SMB0CF SMB0DAT ADC0GTL ADC0GTH ADC0LTL ADC0LTH\nB8 IP AMX0N AMX0P ADC0CF ADC0L ADC0H\nB0 P3 OSCXCN OSCICN OSCICL FLSCL FLKEY\nA8 IE CLKSEL EMI0CN\nA0 P2 SPI0CFG SPI0CKR SPI0DAT P0MDOUT P1MDOUT P2MDOUT P3MDOUT\n98 SCON0 SBUF0 CPT1CN CPT0CN CPT1MD CPT0MD CPT1MX CPT0MX\n90 P1 TMR3CN TMR3RLL TMR3RLH TMR3L TMR3H\n88 TCON TMOD TL0 TL1 TH0 TH1 CKCON PSCTL\n80 P0 SP DPL DPH PCON\n0(8) 1(9) 2(A) 3(B) 4(C) 5(D) 6(E) 7(F)\n(bit addressable)\nC8051F310/1/2/3/4/5/6/7\n88 Rev. 1.8 \nTable  8.3. Special Function Registers  \nRegister Address Description Page\nSFRs are listed in alphabetical order. All undefined SFR locations are reserved\nACC 0xE0 Accumulator 92\nADC0CF 0xBC ADC0 Configuration 59\nADC0CN 0xE8 ADC0 Control 60\nADC0GTH 0xC4 ADC0 Greater-Than Compare High 61\nADC0GTL 0xC3 ADC0 Greater-Than Compare Low 61\nADC0H 0xBE ADC0 High 59\nADC0L 0xBD ADC0 Low 59\nADC0LTH 0xC6 ADC0 Less-Than Compare Word High 62\nADC0LTL 0xC5 ADC0 Less-Than Compare Word Low 62\nAMX0N 0xBA AMUX0 Negative Channel Select 58\nAMX0P 0xBB AMUX0 Positive Channel Select 57\nB 0xF0 B Register 93\nCKCON 0x8E Clock Control 193\nCLKSEL 0xA9 Clock Select 123\nCPT0CN 0x9B Comparator0 Control 72\nCPT0MD 0x9D Comparator0 Mode Selection 74\nCPT0MX 0x9F Comparator0 MUX Selection 73\nCPT1CN 0x9A Comparator1 Control 75\nCPT1MD 0x9C Comparator1 Mode Selection 77\nCPT1MX 0x9E Comparator1 MUX Selection 76\nDPH 0x83 Data Pointer High 91\nDPL 0x82 Data Pointer Low 90\nEIE1 0xE6 Extended Interrupt Enable 1 99\nEIP1 0xF6 Extended Interrupt Priority 1 100\nEMI0CN 0xAA External Memory Interface Control 119\nFLKEY 0xB7 Flash Lock and Key 117\nFLSCL 0xB6 Flash Scale 117\nIE 0xA8 Interrupt Enable 97\nIP 0xB8 Interrupt Priority 98\nIT01CF 0xE4 INT0/INT1 Configuration 101\nOSCICL 0xB3 Internal Oscillator Calibration 122\nOSCICN 0xB2 Internal Oscillator Control 122\nOSCXCN 0xB1 External Oscillator Control 125\nP0 0x80 Port 0 Latch 136\nP0MDIN 0xF1 Port 0 Input Mode Configuration 136\nP0MDOUT 0xA4 Port 0 Output Mode Configuration 137\nP0SKIP 0xD4 Port 0 Skip 137\nP1 0x90 Port 1 Latch 138\nP1MDIN 0xF2 Port 1 Input Mode Configuration 138\nP1MDOUT 0xA5 Port 1 Output Mode Configuration 139\nP1SKIP 0xD5 Port 1 Skip 139\nP2 0xA0 Port 2 Latch 140\nP2MDIN 0xF3 Port 2 Input Mode Configuration 140\nP2MDOUT 0xA6 Port 2 Output Mode Configuration 141\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 89P2SKIP 0xD6 Port 2 Skip 141\nP3 0xB0 Port 3 Latch 142\nP3MDIN 0xF4 Port 3 Input Mode Configuration 142\nP3MDOUT 0xA7 Port 3 Output Mode Configuration 143\nPCA0CN 0xD8 PCA Control 215\nPCA0CPH0 0xFC PCA Capture 0 High 219\nPCA0CPH1 0xEA PCA Capture 1 High 219\nPCA0CPH2 0xEC PCA Capture 2 High 219\nPCA0CPH3 0xEE PCA Capture 3High 219\nPCA0CPH4 0xFE PCA Capture 4 High 219\nPCA0CPL0 0xFB PCA Capture 0 Low 218\nPCA0CPL1 0xE9 PCA Capture 1 Low 218\nPCA0CPL2 0xEB PCA Capture 2 Low 218\nPCA0CPL3 0xED PCA Capture 3Low 218\nPCA0CPL4 0xFD PCA Capture 4 Low 218\nPCA0CPM0 0xDA PCA Module 0 Mode 217\nPCA0CPM1 0xDB PCA Module 1 Mode 217\nPCA0CPM2 0xDC PCA Module 2 Mode 217\nPCA0CPM3 0xDD PCA Module 3 Mode 217\nPCA0CPM4 0xDE PCA Module 4 Mode 217\nPCA0H 0xFA PCA Counter High 218\nPCA0L 0xF9 PCA Counter Low 218\nPCA0MD 0xD9 PCA Mode 216\nPCON 0x87 Power Control 103\nPSCTL 0x8F Program Store R/W Control 116\nPSW 0xD0 Program Status Word 92\nREF0CN 0xD1 Voltage Reference Control 68\nRSTSRC 0xEF Reset Source Configuration/Status 109\nSBUF0 0x99 UART0 Data Buffer 169\nSCON0 0x98 UART0 Control 168\nSMB0CF 0xC1 SMBus Configuration 152\nSMB0CN 0xC0 SMBus Control 154\nSMB0DAT 0xC2 SMBus Data 156\nSP 0x81 Stack Pointer 91\nSPI0CFG 0xA1 SPI Configuration 180\nSPI0CKR 0xA2 SPI Clock Rate Control 182\nSPI0CN 0xF8 SPI Control 181\nSPI0DAT 0xA3 SPI Data 182\nTCON 0x88 Timer/Counter Control 191\nTH0 0x8C Timer/Counter 0 High 194\nTH1 0x8D Timer/Counter 1 High 194\nTL0 0x8A Timer/Counter 0 Low 194\nTL1 0x8B Timer/Counter 1 Low 194\nTMOD 0x89 Timer/Counter Mode 192\nTMR2CN 0xC8 Timer/Counter 2 Control 197\nTMR2H 0xCD Timer/Counter 2 High 198Table 8.3. Special Functi on Registers  (Continued)\nRegister Address Description Page\nC8051F310/1/2/3/4/5/6/7\n90 Rev. 1.88.2.7. Register Descriptions\nFollowing are descriptions of SFRs related to the operati on of the CIP-51 System Controller. Reserved bits \nshould not be set to logic  1. Future product versions may use these bits to implement new features in \nwhich case the reset valu e of the bit will be logic  0, selecting the feature\'s default state. Detailed descrip -\ntions of the remaining SFRs are included in the se ctions of the data sheet associated with their corre -\nsponding system function.\nSFR Definition  8.1. DPL: Data Pointer Low Byte  TMR2L 0xCC Timer/Counter 2 Low 198\nTMR2RLH 0xCB Timer/Counter 2 Reload High 198\nTMR2RLL 0xCA Timer/Counter 2 Reload Low 198\nTMR3CN 0x91 Timer/Counter 3Control 201\nTMR3H 0x95 Timer/Counter 3 High 202\nTMR3L 0x94 Timer/Counter 3Low 202\nTMR3RLH 0x93 Timer/Counter 3 Reload High 202\nTMR3RLL 0x92 Timer/Counter 3 Reload Low 202\nVDM0CN 0xFF VDD Monitor Control 107\nXBR1 0xE2 Port I/O Crossbar Control 1 135\nXBR0 0xE1 Port I/O Crossbar Control 0 134\n0x84-0x86, 0x96-0x97, \n0xAB-0xAF, 0xB4, 0xB9, 0xBF, 0xC7, 0xC9, 0xCE, 0xCF, 0xD2, 0xD3, 0xD7, 0xDF, 0xE3, 0xE5, 0xF5\nReservedTable 8.3. Special Functi on Registers  (Continued)\nRegister Address Description Page\nBits7–0: DPL: Data Pointer Low.\nThe DPL register is the low byte of the 16-b it DPTR. DPTR is used to access indirectly \naddressed Flash memory.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x82\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 91SFR Definition  8.2. DPH: Data Pointer High Byte\nSFR Definition  8.3. SP: Stack Pointer  Bits7–0: DPH: Data Pointer High.\nThe DPH register is the high byte of the 16-b it DPTR. DPTR is used to access indirectly \naddressed Flash memory.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x83\nBits7–0: SP: Stack Pointer.\nThe Stack Pointer holds the location of the top of the stack. The stack pointer is incremented before every PUSH operation. The SP r egister defaults to 0x07 after reset.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x81\nC8051F310/1/2/3/4/5/6/7\n92 Rev. 1.8SFR Definition  8.4. PSW: Program Status Word\nSFR Definition  8.5. ACC: Accumulator  Bit7: CY: Carry Flag.\nThis bit is set when the last arithmetic operat ion resulted in a carry (addition) or a borrow \n(subtraction). It is cleared to logi c 0 by all other arithmetic operations.\nBit6: AC: Auxiliary Carry Flag\nThis bit is set when the last arithmetic operati on resulted in a carry into (addition) or a borrow \nfrom (subtraction) the high order nibble. It is cleared to logic 0 by all other arithmetic opera-\ntions.\nBit5: F0: User Flag 0.\nThis is a bit-addressable, general purpose flag for use under software control.\nBits4–3: RS1–RS0: Register Bank Select.\nThese bits select which register ban k is used during register accesses. \uf020\nBit2: OV: Overflow Flag.\nThis bit is set to 1 under the following circumstances: an AD D, ADDC, or SU BB instruction \ncauses a sign-change overflow, a MUL instructio n results in an overflow (result is greater \nthan 255), or a DIV instruction causes a divide-b y-zero condition. The OV bit is cleared to 0 \nby the ADD, ADDC, SUBB, MUL, and DIV instructio ns in all other cases.\nBit1: F1: User Flag 1.\nThis is a bit-addressable, general purpose flag for use under software control.\nBit0: PARITY: Parity Flag.\nThis bit is set to logic 1 if the sum of the eight bits in the accumulator is odd and cleared if the \nsum is even.R / WR / WR / WR / WR / WR / WR / W R R e s e t  V a l u e\nCY AC F0 RS1 RS0 OV F1 PARITY 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xD0\nRS1 RS0 Register Bank Address\n0 0 0 0x00–0x070 1 1 0x08–0x0F\n1 0 2 0x10–0x17\n1 1 3 0x18–0x1F\nBits7–0: ACC: Accumulator.\nThis register is the accumulator for arithmetic operations.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nACC.7 ACC.6 ACC.5 ACC.4 ACC.3 ACC.2 ACC.1 ACC.0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xE0\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 93SFR Definition  8.6. B: B Register\n8.3. Interrupt Handler\nThe CIP-51 includes an extended interrupt system supporting a total of 14  interrupt sources with two prior -\nity levels. The allocation of  interrupt sources between on-chip periph erals and external inputs pins varies \naccording to the specific version of the device. Each interrupt source has one or more associated interrupt-\npending flag(s) located in an SFR. When a peripheral or external source meets a valid interrupt condition, \nthe associated interrupt-pend ing flag is set to logic  1.\nIf interrupts are enabled for the source, an interrupt req uest is generated when the interrupt-pending flag is \nset. As soon as execution of the current instructio n is complete, the CPU generates an LCALL to a prede -\ntermined address to begin execution of an interrupt se rvice routine (ISR). Each ISR must end with an RETI \ninstruction, which returns program execution to the next instruction that would have been executed if the \ninterrupt request had not occurred. If interrupts are not enabled, the interrupt-pending flag is ignored by the \nhardware and program execution continues as normal . (The interrupt-pending flag is set to logic  1 regard -\nless of the interrupt\'s enable/disable state.)\nEach interrupt source can be individually enabled or disabled through the use of an associated interrupt \nenable bit in an SFR (IE-EIE1). Ho wever, interrupts must first be globally enabled by setting the EA bit \n(IE.7) to logic  1 before the individual interrupt enables are re cognized. Setting the EA bit to logic 0 disables \nall interrupt sources regardless of the individual interrupt-enable settings.\nNote: Any instruction that clears the EA bit should be immediately followed by an instruction that \nhas two or more opcode bytes.  For example:\n// in \'C\': \uf020\nEA = 0;    // clear EA bit \uf020\nEA = 0;    // ... followed by another 2-byte opcode\n; in assembly: \uf020\nCLR  EA    ; clear EA bit \uf020\nCLR  EA    ; ... followed by another 2-byte opcode\nIf an interrupt is posted during the execution phase of  a "CLR EA" opcode (or an y instruction which clears \nthe EA bit), and the instruction is followed by a single-cycle instruction,  the interrupt may be taken. How -\never, a read of the EA bit will return a \'0\' inside the inte rrupt service routin e. When the "CLR EA" opcode is \nfollowed by a multi-cycle instruct ion, the interrupt will not be taken.\nSome interrupt-pending flags are automatically cleare d by the hardware when the CPU vectors to the ISR. \nHowever, most are not cleared by the hardware and must be cleared by software before returning from the ISR. If an interrupt-pending flag remains set after the CPU completes the return-from-interrupt (RETI) Bits7–0: B: B Register.\nThis register serves as a second accumu lator for certain arithmetic operations.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nB.7 B.6 B.5 B.4 B.3 B.2 B.1 B.0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xF0\nC8051F310/1/2/3/4/5/6/7\n94 Rev. 1.8instruction, a new interr upt request will be gen erated immediately and the CPU will re-enter the ISR after \nthe completion of th e next instruction. \n8.3.1. MCU Interrupt Sources and Vectors\nThe MCUs support 14 interrupt sources. Software can simulate an interrupt by setting any interrupt-pend -\ning flag to logic  1. If interrupts are enab led for the flag, an in terrupt reque st will be generat ed and the CPU \nwill vector to the ISR address associ ated with the interrup t-pending flag. MCU inte rrupt sources, associ -\nated vector addresses, priority order and control bits are summarized in Table  8.4 on page  96. Refer to the \ndatasheet section associated with a particular on-chip peripheral for information regarding valid interrupt \nconditions for the peripheral and the behavior of its interrupt-pending flag(s).\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 958.3.2. External Interrupts\nThe /INT0 and /INT1 external interrupt sources are confi gurable as active high or low, edge or level sensi -\ntive. The IN0PL (/INT0 Polarity) and IN1PL (/INT1 Polarity ) bits in the IT01CF register select active high or \nactive low; the IT0 and IT1 bits in TCON ( Section “17.1.  Timer 0 and Timer 1” on page  187) select level \nor edge sensitive. The table below lists the possible configurations.  \n/INT0 and /INT1 are assigned to Port pins  as defined in the IT01CF register (see SFR Definition 8.11 ). \nNote that /INT0 and /INT0 Port pin assignments are independent of any Crossbar assignments. /INT0 and \n/INT1 will monitor their assigned Port pins without disturbing th e peripheral that was assigned the Port pin \nvia the Crossbar. To assign a Port pin only to /INT 0 and/or /INT1, configure the Crossbar to skip the \nselected pin(s). This is accomplished by setti ng the associated bit in register XBR0 (see Section \n“13.1.  Priority Crossbar Decoder” on page  131 for complete details on configuring the Crossbar).\nIE0 (TCON.1) and IE1 (TCON.3) serve as the interr upt-pending flags for the /INT0 and /INT1 external \ninterrupts, respectively. If an /INT0 or /INT1 external  interrupt is configured as edge-sensitive, the corre -\nsponding interrupt-pending flag is automatically clear ed by the hardware when the CPU vectors to the ISR. \nWhen configured as level sensitive, the interrupt-pendi ng flag remains logic 1 while the input is active as \ndefined by the corresponding polarity bit (IN0PL or IN 1PL); the flag remains logi c 0 while the input is inac -\ntive. The external interrupt source must hold the input active until the interrupt request is recognized. It \nmust then deactivate the interrup t request before execution of the ISR completes or another interrupt \nrequest will be  generated.\n8.3.3. Interrupt Priorities\nEach interrupt source can be individually programmed to one of two priority levels: low or high. A low prior -\nity interrupt service routine can be pree mpted by a high priority interrupt. A high priority interrupt cannot be \npreempted. Each interrupt has an associated interrupt priority bit in an SFR (IP or EIP1) used to configure its priority level. Low priority is th e default. If two interrupts are recognized simultaneously, the interrupt with \nthe higher priority is serviced first.  If both interrupts have the same priority level, a fixed priority order is \nused to arbitrate, given in \nTable  8.4.\n8.3.4. Interrupt Latency\nInterrupt response time depends on the state of the CPU when the interrupt occurs. Pending interrupts are sampled and priority decoded each sys tem clock cycle. Therefore, the fa stest possible response time is 5 \nsystem clock cycles: 1\n clock cycle to detect the interrupt and 4  clock cycles to complete the LCALL to the \nISR. If an interrupt is pending when a RETI is execut ed, a single instruction is executed before an LCALL \nis made to service the pending interrupt. Therefore, the maximum response time for an interrupt (when no other interrupt is currently being serviced or the new in terrupt is of greater priority) occurs when the CPU is \nperforming an RETI instruct ion followed by a DIV as the next instructio n. In this case, th e response time is \n18\n system clock cycles: 1  clock cycle to detect the interrupt, 5  clock cycles to execute the RETI, 8  clock \ncycles to complete the DIV instruction and 4  clock cycles to execute the LCALL to the ISR. If the CPU is \nexecuting an ISR for an interr upt with equal or higher pr iority, the new interrupt will not be serviced until the \ncurrent ISR completes, including the RETI and following instruction.IT0 IN0PL /INT0 Interrupt IT1 IN1PL /INT1 Interrupt\n10 Active low, edge sensitive 10 Active low, edge sensitive\n11 Active high, edge sensitive 11 Active high, edge sensitive\n00 Active low, level sensitive 00 Active low, level sensitive\n01 Active high, level sensitive 01 Active high, level sensitive\nC8051F310/1/2/3/4/5/6/7\n96 Rev. 1.8Table  8.4. Interrupt Summary  \nInterrupt SourceInterrupt \nVectorPriority \nOrderPending Flag\nBit addressable?\nCleared by HW?Enable Flag Priority Control\nReset 0x0000 Top None N/A N/AAlways Enabled Always Highest\nExternal Interrupt 0 (/INT0) 0x0003 0 IE0 (TCON.1) Y YEX0 (IE.0) PX0 (IP.0)\nTimer 0 Overflow 0x000B 1 TF0 (TCON.5) Y YET0 (IE.1) PT0 (IP.1)\nExternal Interrupt 1 (/INT1) 0x0013 2 IE1 (TCON.3) Y YEX1 (IE.2) PX1 (IP.2)\nTimer 1 Overflow 0x001B 3 TF1 (TCON.7) Y YET1 (IE.3) PT1 (IP.3)\nUART0 0x0023 4RI0 (SCON0.0)\nTI0 (SCON0.1)Y NES0 (IE.4) PS0 (IP.4)\nTimer 2 Overflow 0x002B 5TF2H (TMR2CN.7)\nTF2L (TMR2CN.6)Y NET2 (IE.5) PT2 (IP.5)\nSPI0 0x0033 6SPIF (SPI0CN.7) \uf020\nWCOL  (SPI0CN.6)\nMODF (SPI0CN.5)\nRXOVRN \n(SPI0CN.4)Y NESPI0 (IE.6) PSPI0 (IP.6)\nSMB0 0x003B 7 SI (SMB0CN.0) Y NESMB0 (EIE1.0) PSMB0 (EIP1.0)\nRESERVED 0x0043 8 N/A N/A N/A N/A N/A\nADC0 Window Compare 0x004B 9AD0WINT (ADC0CN.3)Y NEWADC0 (EIE1.2) PWADC0 (EIP1.2)\nADC0 Conversion Complete0x0053 10AD0INT (ADC0CN.5)Y NEADC0 (EIE1.3) PADC0 (EIP1.3)\nProgrammable Counter Array0x005B 11CF (PCA0CN.7)\nCCFn (PCA0CN.n)Y NEPCA0 (EIE1.4) PPCA0 (EIP1.4)\nComparator0 0x0063 12CP0FIF (CPT0CN.4) CP0RIF (CPT0CN.5)\nN NECP0 (EIE1.5) PCP0 (EIP1.5)\nComparator1 0x006B 13CP1FIF (CPT1CN.4) CP1RIF (CPT1CN.5)\nN NECP1 (EIE1.6) PCP1 (EIP1.6)\nTimer 3 Overflow 0x0073 14TF3H (TMR3CN.7)\nTF3L (TMR3CN.6)N NET3 (EIE1.7) PT3 (EIP1.7)\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 978.3.5. Interrupt Register Descriptions\nThe SFRs used to enable the interrupt sources and set t heir priority level are described below. Refer to the \ndata sheet section associated with a particular on-chi p peripheral for information regarding valid interrupt \nconditions for the peripheral and the behavior of its interrupt-pending flag(s).\nSFR Definition  8.7. IE: Interrupt Enable\nBit7: EA: Enable All Interrupts.\nThis bit globally enables/disabl es all interrupts. It overrides the individual interrupt mask set-\ntings.0: Disable all interrupt sources.1: Enable each interrupt accord ing to its individual mask setting.\nBit6: ESPI0: Enable Seri al Peripheral Interf ace (SPI0) Interrupt.\nThis bit sets the masking of the SPI0 interrupts.0: Disable all SPI0 interrupts.1: Enable interrupt requests generated by SPI0.\nBit5: ET2: Enable Timer 2 Interrupt.\nThis bit sets the masking of the Timer 2 interrupt.0: Disable Timer 2 interrupt.1: Enable interrupt requests generated by the TF2L or TF2H flags.\nBit4: ES0: Enable UART0 Interrupt.\nThis bit sets the masking of the UART0 interrupt.0: Disable UART0 interrupt.1: Enable UA RT0 interrupt.\nBit3: ET1: Enable Timer 1 Interrupt. \nThis bit sets the masking of the Timer 1 interrupt.    0: Disable all Ti mer 1 interrupt.\n1: Enable interrupt requests generated by the TF1 flag.\nBit2: EX1: Enable Exte rnal Interrupt 1. \nThis bit sets the masking of External Interrupt 1.    0: Disable external interrupt 1.1: Enable interrupt requests generated by the /INT1 input.\nBit1: ET0: Enable Timer 0 Interrupt. \nThis bit sets the masking of the Timer 0 interrupt.    0: Disable all Ti mer 0 interrupt.\n1: Enable interrupt requests generated by the TF0 flag.\nBit0: EX0: Enable Exte rnal Interrupt 0. \nThis bit sets the masking of External Interrupt 0.    0: Disable external interrupt 0.1: Enable interrupt requests generated by the /INT0 input.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nEA ESPI0 ET2 ES0 ET1 EX1 ET0 EX0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xA8\nC8051F310/1/2/3/4/5/6/7\n98 Rev. 1.8SFR Definition  8.8. IP: Interrupt Priority\nBit7: UNUSED. Read = 1, Write = don\'t care.\nBit6: PSPI0: Serial Periph eral Interface (SPI0) In terrupt Priority Control.\nThis bit sets the priority  of the SPI0 interrupt.\n0: SPI0 interrupt set to  low priority level.\n1: SPI0 interrupt set to high priority level.\nBit5: PT2: Timer 2 Interr upt Priority Control. \nThis bit sets the priority of the Timer 2 interrupt.0: Timer 2 interrupts se t to low priority level.\n1: Timer 2 interrupts set to high priority level. \nBit4: PS0: UART0 Interrupt Priority Control. \nThis bit sets the priority of the UART0 interrupt.    0: UART0 interrupts set to low priority level.\n1: UART0 interrupts set to high priority level.\nBit3: PT1: Timer 1 Interr upt Priority Control. \nThis bit sets the priority of  the Timer 1 interrupt.    \n0: Timer 1 interrupts se t to low priority level.\n1: Timer 1 interrupts set to high priority level.\nBit2: PX1: External Interr upt 1 Priority Control. \nThis bit sets the priority of the Ex ternal Interrupt 1 interrupt.    \n0: External Interrupt 1 set to low priority level.1: External Interrupt 1 set to high priority level.\nBit1: PT0: Timer 0 Interr upt Priority Control. \nThis bit sets the priority of the Timer 0 interrupt.0: Timer 0 interrupt set to low priority level.\n1: Timer 0 interrupt set to high priority level.\nBit0: PX0: External Interr upt 0 Priority Control. \nThis bit sets the priority of the Ex ternal Interrupt 0 interrupt.    \n0: External Interrupt 0 set to low priority level.1: External Interrupt 0 set to high priority level.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- PSPI0 PT2 PS0 PT1 PX1 PT0 PX0 10000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xB8\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 99SFR Definition  8.9. EIE1: Extended Interrupt Enable 1\nBit7: ET3: Enable Timer 3 Interrupt.\nThis bit sets the masking of the Timer 3 interrupt.0: Disable Timer 3 interrupts.1: Enable interrupt requests generated by the TF3L or TF3H flags.\nBit6: ECP1: Enable Comparator1 (CP1) Interrupt.\nThis bit sets the masking of the CP1 interrupt.0: Disable CP1 interrupts.1: Enable interrupt requests generated by the CP1RIF or CP1FIF flags.\nBit5: ECP0: Enable Comparator0 (CP0) Interrupt.\nThis bit sets the masking of the CP0 interrupt.0: Disable CP0 interrupts.1: Enable interrupt requests generated by the CP0RIF or CP0FIF flags.\nBit4: EPCA0: Enable Programmable Counter Array (PCA0) Interrupt.\nThis bit sets the masking of the PCA0 interrupts.0: Disable all PC A0 interrupts.\n1: Enable interrupt requests generated by PCA0.\nBit3: EADC0: Enable ADC0 Co nversion Complete Interrupt.\nThis bit sets the masking of the ADC0 Conversion Complete interrupt.0: Disable ADC0 Conver sion Complete interrupt.\n1: Enable interrupt requests generated by the AD0INT flag.\nBit2: EWADC0: Enable Window Comparison ADC0 Interrupt. \nThis bit sets the masking of ADC0 Window Comparison interrupt.0: Disable ADC0 Window Comparison interrupt.1: Enable interrupt requests generated by ADC0 Window Compare flag (AD0WINT).\nBit1: RESERVED. Read = 0. Must Write 0.Bit0: ESMB0: Enable SMBu s (SMB0) Interrupt. \nThis bit sets the masking of the SMB0 interrupt.    0: Disable all SMB0 interrupts.1: Enable interrupt requests generated by SMB0.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nET3 ECP1 ECP0 EPCA0 EADC0 EWADC0 Reserved ESMB0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xE6\nC8051F310/1/2/3/4/5/6/7\n100 Rev. 1.8SFR Definition  8.10.  EIP1: Extended Interrupt Priority 1\nBit7: PT3: Timer 3 Interr upt Priority Control. \nThis bit sets the priority of the Timer 3 interrupt.0: Timer 3 interrupts se t to low priority level.\n1: Timer 3 interrupts set to high priority level. \nBit6: PCP1: Comparator1 (CP1) Interrupt Prio rity Control.\nThis bit sets the priority of the CP1 interrupt.0: CP1 interrupt set to  low priority level.\n1: CP1 interrupt set to  high priority level.\nBit5: PCP0: Comparator0 (CP0) Interrupt Prio rity Control.\nThis bit sets the priority of the CP0 interrupt.0: CP0 interrupt set to  low priority level.\n1: CP0 interrupt set to  high priority level.\nBit4: PPCA0: Programmable Counter Arra y (PCA0) Interrupt Priority Control.\nThis bit sets the priority of the PCA0 interrupt.0: PCA0 interrupt set to low priority level.\n1: PCA0 interrupt set to high priority level.\nBit3: PADC0 ADC0 Conversion Comp lete Interrupt Pr iority Control.\nThis bit sets the priority of the ADC0 Conversion Complete interrupt.\n0: ADC0 Conversion Complete inte rrupt set to low priority level.\n1: ADC0 Conversion Complete inte rrupt set to high priority level.\nBit2: PWADC0: ADC0 Window Comparator Interrupt Priority Control.\nThis bit sets the priority of the ADC0 Window interrupt.0: ADC0 Window interrupt set to low priority level.\n1: ADC0 Window interrupt se t to high priority level.\nBit1: RESERVED. Read = 0. Must Write 0.Bit0: PSMB0: SMBus (SMB0) In terrupt Priority Control.\nThis bit sets the priority  of the SMB0 interrupt.\n0: SMB0 interrupt set to low priority level.\n1: SMB0 interrupt set to  high priority level.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nPT3 PCP1 PCP0 PCP0 PADC0 PWADC0 Reserved PSMB0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xF6\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 101SFR Definition  8.11.  IT01CF: INT0/INT1 Configuration\nBit7: IN1PL: /INT1 Polarity\n0: /INT1 input is active low.1: /INT1 input is active high.\nBits6–4: IN1SL2–0: /INT1 Port Pin Selection Bits\nThese bits select which Port pin is assigned to /INT1. Note that this pin assignment is inde-\npendent of the Crossbar; /INT 1 will monitor the assigned Port  pin without disturbing the \nperipheral that has been assi gned the Port pin via the Cr ossbar. The Crossbar will not \nassign the Port pin to a peripheral if it is c onfigured to skip the selected pin (accomplished by \nsetting to ‘1’ the corresponding bit in register P0SKIP). \nBit3: IN0PL: /INT0 Polarity\n0: /INT0 interrupt is active low.1: /INT0 interrupt is active high.\nBits2–0: INT0SL2–0: /INT0 Port Pin Selection Bits\nThese bits select which Port pin is assigned to /INT0. Note that this pin assignment is inde-\npendent of the Crossbar. /INT 0 will monitor the assigned Port pin without disturbing the \nperipheral that has been assi gned the Port pin via the Cr ossbar. The Crossbar will not \nassign the Port pin to a peripheral if it is c onfigured to skip the selected pin (accomplished by \nsetting to ‘1’ the corresponding bit in register P0SKIP).R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nIN1PL IN1SL2 IN1SL1 IN1SL0 IN0PL IN0SL2 IN0SL1 IN0SL0 00000001\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xE4\nNote: Refer to SFR Definition 17.1  for INT0/1 edge- or level-sensitive interrupt selection.\nIN1SL2–0 /INT1 Port Pin\n000 P0.0\n001 P0.1\n010 P0.2\n011 P0.3\n100 P0.4\n101 P0.5\n110 P0.6\n111 P0.7\nIN0SL2–0 /INT0 Port Pin\n000 P0.0\n001 P0.1\n010 P0.2\n011 P0.3\n100 P0.4\n101 P0.5\n110 P0.6\n111 P0.7\nC8051F310/1/2/3/4/5/6/7\n102 Rev. 1.88.4. Power Management Modes\nThe CIP-51 core has two software programmable power management modes: Idle and Stop. Idle mode \nhalts the CPU while leaving the peripherals and clocks active. In Stop mode, the CPU is halted, all inter -\nrupts and timers (except the Missing Clock Detector) ar e inactive, and the internal  oscillator is stopped \n(analog peripherals remain in  their selected states; the external osc illator is not effected ). Since clocks are \nrunning in Idle mode, power consumption is dependent upon the system clock frequency and the number of peripherals left in active mode before entering Idle. Stop mode consumes the least power. \nSFR Defini -\ntion 8.12  describes the Power Control Register (PCON) used to control the CIP-51\'s power management \nmodes.\nAlthough the CIP-51 has Idle and Stop modes built in (as with any standard 8051 architecture), power \nmanagement of the entire MCU is better accomplished  by enabling/disabling individual peripherals as \nneeded. Each analog peripheral can be disabled when not in use and placed in low power mode. Digital peripherals, such as timers or serial buses, draw littl e power when they are not in use. Turning off the oscil\n-\nlators lowers power consumption considerably; however, a reset is required to restart the MCU.\n8.4.1. Idle Mode\nSetting the Idle Mode Select bit (PCON.0) causes the CIP-51 to halt the CPU and enter Idle mode as soon \nas the instruction that sets the bit completes executio n. All internal registers and memory maintain their \noriginal data. All analog and digital peripherals can remain active during Idle mode.\nIdle mode is terminated when an enabled interrupt is asserted or a reset occurs. The assertion of an enabled interrupt will cause the Idle Mode Selection bit (PCON.0) to be  cleared and the CPU to resume \noperation. The pen ding interrupt will be serviced and the next in struction to be executed after the return \nfrom interrupt (RETI) will be the instruction immedi ately following the one that se t the Idle Mode Select bit. \nIf Idle mode is terminated by an internal or external reset, the CIP-51 performs a normal reset sequence and begins program execution at address 0x0000.\nIf enabled, the Watchdog Timer (WDT) will eventually cause an internal watchdog reset and thereby termi -\nnate the Idle mode. This feature protects the system from an unintended permanent shutdown in the event \nof an inadvertent write to the PCON register. If this  behavior is not desired, th e WDT may be disabled by \nsoftware prior to entering the Idle mo de if the WDT was initially configured  to allow this operation. This pro -\nvides the opportunity for additional power savings, allo wing the system to remain in the Idle mode indefi -\nnitely, waiting for an exte rnal stimulus to wake up the system. Refer to Section “9.6.  PCA Watchdog \nTimer Reset” on page  108 for more information on the use and configuration of the WDT.\nNote: Any instruction that sets the IDLE bit should be immediately followed by an instruction that \nhas 2 or more opcode bytes.  For example:\n// in \'C\': \uf020\nPCON |= 0x01; // set IDLE bit \uf020\nPCON  = PCON; // ... followed by a 3-cycle dummy instruction\n; in assembly: \uf020\nORL PCON, #01h ; set IDLE bit \uf020\nMOV PCON, PCON; ... followed by a 3-cycle dummy instruction\nIf the instruction following the write of the IDLE bit is a single-byte instruct ion and an interrupt occurs during \nthe execution phase of the instructio n that sets the IDLE bit, the CPU may not wake from IDLE mode when \na future interrupt occurs.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 1038.4.2. Stop Mode\nSetting the Stop Mode Select bit (PCON.1) causes the CI P-51 to enter Stop mode as soon as the instruc -\ntion that sets the bit comp letes execution. In Stop mo de the internal oscillator, CPU, and all digital peripher -\nals are stopped; the st ate of the external oscillator circuit is not affected. Each analog peripheral (including \nthe external oscillator circuit) may be shut down individually prior to entering Stop Mo de. Stop mode can \nonly be terminated by an internal or external reset. On reset, the CIP-51 performs the normal reset \nsequence and begins program execution at address 0x0000. \nIf enabled, the Missing Clock Detect or will cause an internal  reset and ther eby terminate th e Stop mode. \nThe Missing Clock Detector should be disabled if the CPU is to be put to in STOP mode for longer than the MCD timeout of 100\n µsec.\nSFR Definition  8.12.  PCON: Power Control\nBits7–2: GF5–GF0: General Purpose Flags 5–0. \nThese are general purpose flags for use under software control.\nBit1: STOP: Stop Mode Select.\nSetting this bit will place the CIP-51 in Stop mode. This bit will always be read as 0.\n1: CPU goes into Stop mode  (internal oscillator stopped).\nBit0: IDLE: Idle Mode Select.\nSetting this bit will place the CIP-51 in Idle  mode. This bit will always be read as 0.\n1: CPU goes into Idle mode. (Shuts off clock to  CPU, but clock to Time rs, Interrupts, Serial \nPorts, and Analog Peripherals are still active.)R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nGF5 GF4 GF3 GF2 GF1 GF0 STOP IDLE 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x87\nC8051F310/1/2/3/4/5/6/7\n104 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 1059. Reset Sources\nReset circuitry allows the controller to be easily placed in a predefined default condition. On entry to this \nreset state, th e following occur:\n• CIP-51 halts program execution\n• Special Function Registers (SFRs) are initialized to their defined reset values\n• External Port pins are forced to a known state\n• Interrupts and timers are disabled. \nAll SFRs are reset to the predefined values noted in the SFR detailed descriptions. The contents of internal \ndata memory are unaffected during a reset; any prev iously stored data is preserved. However, since the \nstack pointer SFR is reset, the stack is effectively lo st, even though the data on the stack is not altered. \nThe Port I/O latches are reset to 0xFF (all logic ones) in open-drain mode. Weak pullups are enabled \nduring and after the reset. For VDD Monitor and power-on resets, the RST pin is driven low until the device \nexits the reset state.\nOn exit from the reset state, the program counter (PC) is reset, and the system clock defaults to the inter -\nnal oscillator. Refer to Section “12.  Oscillators” on page  121 for information on selecting and configuring \nthe system clock source. The Watchdog Timer is enabled with the system clock divided by 12 as its clock \nsource ( Section “18.3.  Watchdog Timer Mode” on page  212 details the use of the Watchdog Timer). \nProgram execution begins at location 0x0000.\nFigure 9.1. Reset SourcesPCA\nWDTMissing\nClock\nDetector\n(one-\nshot)\n(Software Reset)\nSystem ResetReset\nFunnelPx.x\nPx.x\nEN\nSWRSF\nSystem\nClockCIP-51\nMicrocontroller\nCore\nExtended Interrupt\nHandlerEN WDT\nEnableMCD\nEnableErrant\nFLASH\nOperation/RST\n(wired-OR)Power On\nReset\n\'0\'\n+-Comparator 0\nC0RSEFVDD\n+-Supply\nMonitor\nEnable\nC8051F310/1/2/3/4/5/6/7\n106 Rev. 1.89.1. Power-On Reset\nDuring power-up, the device is held in a reset state and the RST pin is driven low until VDD settles above \nVRST. An additional delay occurs before the device is released from reset; the delay decreases as the VDD\nramp time increases (VDD ramp time is defined as how fast VDD ramps from 0  V to VRST). Figure  9.2. plots \nthe power-on and VDD monitor reset timing. For valid ramp times (less than 1  ms), the power-on reset \ndelay (TPORDelay ) is typically less than 0.3  ms.\nNote: The maximum VDD ramp time is 1  ms; slower ramp times may cause the device to be released from \nreset before VDD reaches the VRST level.\nOn exit from a power-on reset, the PORSF fl ag (RSTSRC.1) is set by hardware to logic  1. When PORSF is \nset, all of the other reset flags in the RSTSRC Regist er are indeterminate (PORSF is cleared by all other \nresets). Since all resets cause program execution to begin at the same location (0x0000) software can read the PORSF flag to determine if a power-up was t he cause of reset. The content of internal data mem\n-\nory should be assumed to be undefined after a power-on reset. The VDD monitor is disabled following a \npower-on reset.\nFigure 9.2. Power-On and VDD Monitor Reset Timing\n9.2. Power-Fail Reset / VDD Monitor\nWhen a power-down transition or power irregularity causes VDD to drop below VRST, the power supply \nmonitor will drive the RST pin low and hold the CIP-51 in a reset state (see Figure  9.2). When VDD returns \nto a level above VRST, the CIP-51 will be released from the reset st ate. Note that even though internal data \nmemory contents are not altered by the power-fa il reset, it is impossib le to determine if VDD dropped below \nthe level required for data retention. If the PORSF flag reads ‘1’, the data may no longer be valid. The VDD\nmonitor is disabled after power-on resets; however it s defined state (enabled/disabled) is not altered by Power-On\nResetVDD\nMonitor\nReset/RSTtvolts\n1.02.0\nLogic HIGH\nLogic LOWTPORDelayVDD2.70\n2.55VRSTVDD\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 107any other reset source. For example, if the VDD monitor is enabled and a software reset is performed, the \nVDD monitor will still be enabled after the reset. \nImportant Note:  The VDD monitor must be enabled before it is selected as a reset source. Selecting the \nVDD monitor as a reset source before it is enab led and stabilized may cause a system reset.  The proce -\ndure for configuring the VDD monitor as a reset source is shown below:\nStep 1.  Enable the VDD monitor (VDMEN bit in VDM0CN = ‘1’).\nStep 2.  Wait for the VDD monitor to stabilize (see Table 9.1 for the VDD Monitor turn-on time). \uf020\nNote: This delay should be omitted if software contains routines that erase or write Flash \nmemory.\nStep 3.  Select the VDD monitor as a reset source (PORSF bit in RSTSRC = ‘1’).\nSee Figure  9.2 for VDD monitor timing; note that the reset delay is not incurred after a VDD monitor reset. \nSee Table  9.1 for complete electrical characteristics of the VDD monitor.\nSFR Definition  9.1. VDM0CN: VDD Monitor Control\n9.3. External Reset\nThe external RST pin provides a means for external circuitry to  force the device into a reset state. Assert -\ning an active-low signal on the RST pin generates a reset; an external pullup and/or decoupling of the RST\npin may be necessary to avoid erroneous noise-induced resets. See Table  9.1 for complete RST pin spec -\nifications. The PINRSF flag (RSTSRC.0) is set on exit from an external reset.Bit7: VDMEN: VDD Monitor Enable.\nThis bit is turns the VDD monitor circuit on/off. The VDD Monitor cannot generate system \nresets until it is also selected as a reset source in register RSTSRC (Figure 9.2). The VDD \nMonitor must be allowed to  stabilize before it is selected as a reset source. Selecting the \nVDD monitor as a reset source before it has stabilized may generate a system reset.  \nSee Table 9.1 for the minimum VDD Monitor turn-on time.\n0: VDD Monitor Disabled.\n1: VDD Monitor Enabled. \nBit6: VDD STAT: VDD Status.\nThis bit indicates the current power supply status (VDD Monitor output). \n0: VDD is at or below the VDD monitor threshold.\n1: VDD is above the VDD monitor threshold.\nBits5–0: Reserved. Read = Variable. Write = don’t care.R/W R R R R R R R Reset Value\nVDMEN VDDSTAT Reserved Reserved Reserve d Reserved Reserved Reserved Variable\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xFF\nC8051F310/1/2/3/4/5/6/7\n108 Rev. 1.89.4. Missing Clock Detector Reset\nThe Missing Clock Detector (MCD) is a one-shot circuit that  is triggered by the syst em clock. If the system \nclock remains high or low for more than 100  µs, the one-shot will time out an d generate a reset. After a \nMCD reset, the MCDRSF flag (RSTSRC.2) will read ‘1’,  signifying the MCD as the reset source; otherwise, \nthis bit reads ‘0’. Writing a ‘1’ to  the MCDRSF bit enables the Missing Clo ck Detector; writing a ‘0’ disables \nit. The state of the RST pin is unaffected by this reset. \n9.5. Comparator0 Reset\nComparator0 can be configured as a reset source by writing a ‘1’ to the C0R SEF flag (RSTSRC.5). Com -\nparator0 should be enabled and allowed to settle prio r to writing to C0RSEF to prevent any turn-on chatter \non the output from generating an unwanted reset. The Comparator0 reset is active-low: if the non-inverting \ninput voltage (on CP0+) is less than the inverting input voltage (on CP0-), the device is put into the reset \nstate. After a Comparator0 reset, the C0RSEF flag (RSTSRC.5) will read  ‘1’ signifying Co mparator0 as the \nreset source; otherwise, this bit reads ‘0’. The state of the RST pin is unaffected by this reset.\n9.6. PCA Watchdog Timer Reset\nThe programmable Watchdog Timer (WDT) function of  the Programmable Counter Array (PCA) can be \nused to prevent software from running out of cont rol during a system malfunction. The PCA WDT function \ncan be enabled or disabled by software as described in Section “18.3.  Watchdog Timer Mode” on \npage  212; the WDT is enabled and clocked by SYSCLK  / 12 following any reset. If a system malfunction \nprevents user software from updating the WDT, a re set is generated and the WDTRSF bit (RSTSRC.5) is \nset to ‘1’. The state of the RST pin is unaffected by this reset.\n9.7. Flash Error Reset\nIf a Flash read/write/era se or program read targets an illegal address, a system reset is generated. This \nmay occur due to any of the following:\n• A Flash write or erase is attempted above user code space. This occurs when PSWE is set to ‘1’ and a \nMOVX write operation targets an address above address 0x3DFF for C8051F310/1 or 0x1FFF for C8051F312/3/4/5. \n• A Flash read is attempted above user code space.  This occurs when a MOVC operation targets an \naddress above address 0x3DFF for C8051F310/1 or 0x1FFF for C8051F312/3/4/5.\n• A Program read is attempted above user code spac e. This occurs when user code attempts to branch \nto an address above 0x3DFF for C8051F310/1 or 0x1FFF for C8051F312/3/4/5.\n• A Flash read, write or erase attempt is re stricted due to a Flash security setting (see Section \n“10.3.  Security Options” on page  113).\nThe FERROR bit (RSTSRC.6) is  set following a Flash error reset. The state of the RST pin is unaffected by \nthis reset.\n9.8. Software Reset\nSoftware may force a reset by writ ing a ‘1’ to the SWRSF bit (RSTSRC.4). The SWRSF bit will read ‘1’ fol -\nlowing a software forced reset. The state of the RST pin is unaffected by this reset.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 109SFR Definition  9.2. RSTSRC: Reset Source\nBit7: UNUSED. Read = 0. Write = don’t care.\nBit6: FERROR: Flash Error Indicator.\n0: Source of last reset was not a Flash read/write/erase error.1: Source of last reset was a Flash read/write/erase error.\nBit5: C0RSEF: Comparator0 Reset Enable and Flag.\n0: Read:  Source of last reset was not Comparator0. Write:  Comparator0 is not a reset \nsource.1: Read: Source of last reset was Comparator0. Write: Comparator0 is a reset source \n(active-low).\nBit4: SWRSF: Software Reset Force and Flag.\n0: Read:  Source of last reset was no t a write to the SWRSF bit. Write:  No Effect.\n1: Read: Source of last was a write to the SWRSF bit. Write:  Forces a system reset.\nBit3: WDTRSF: Watchdog Timer Reset Flag.\n0: Source of last reset was not a WDT timeout.\n1: Source of last reset was a WDT timeout.\nBit2: MCDRSF: Missing Clock Detector Flag.\n0: Read:  Source of last reset was not a Missing Clock Detector timeout. Write:  Missing \nClock Detector disabled.1: Read: Source of last reset was a Mi ssing Clock Detector timeout. Write:  Missing Clock \nDetector enabled; triggers a reset if a missing clock condition is detected.\nBit1: PORSF: Power-On Reset Force and Flag.\nThis bit is set anytime a power-on reset occurs. Writing this bit enables/disables the V\nDD \nmonitor as a reset source. Note: writing ‘1’ to this bit before the VDD monitor is enabled \nand stabilized may cause a system reset.  See register VDM0CN (Figure 9.1)\n0: Read:  Last reset was not a power-on or VDD monitor reset. Write:  VDD monitor is not a \nreset source.\n1: Read: Last reset was a power-on or VDD monitor reset; all other reset flags indeterminate. \nWrite:  VDD monitor is a reset source.\nBit0: PINRSF: HW Pin Reset Flag.\n0: Source of last  reset was not RST  pin.\n1: Source of la st reset was RST  pin.\nNote: For bits that act as both reset source enables (on a write) and reset indicator flags (on a read), \nread-modify-write instructions read and modify the source enable only. This applies to bits: \nC0RSEF, SWRSF, MCDRSF, PORSF.R R R/W R/W R R/W R/W R Reset Value\n- FERROR C0RSEF SWRSF WDTRSF MCDRSF PORSF PINRSF Variable\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xEF\nC8051F310/1/2/3/4/5/6/7\n110 Rev. 1.8Table  9.1. Reset Electrical Characteristics\n–40 to +85  °C unless otherwise specified.\nParameter Conditions Min Typ Max Units\nRST Output Low Voltage IOL = 8.5 mA, VDD = 2.7 to 3.6 V —— 0 . 6 V\nRST Input High Voltage0.7 x \nVDD—— V\nRST Input Low Voltage — —0.3 x \nVDD\nRST Input Pullup Current RST = 0.0 V — 25 40 µA\nVDD Monitor Threshold (VRST) 2.40 2.55 2.70 V\nMissing Clock Detector TimeoutTime from last system clock rising \nedge to reset initiation100 220 600 µs\nReset Time DelayDelay between release of any \nreset source and code execution at location 0x00005.0 — — µs\nMinimum RST\n Low Time to \nGenerate a System Reset15 — — µs\nVDD Monitor Turn-on Time 100 — — µs\nVDD Monitor Supply Current —2 05 0 µ A\nVDD Ramp Time VDD = 0 V to VDD = 2.7 V —— 1 m s\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 11110. Flash Memory   \nOn-chip, re-programmable Flash memory is included fo r program code and non-volatile data storage. The \nFlash memory can be programmed in-system, a single by te at a time, through the C2 interface or by soft -\nware using the MOVX instruction. Once cleared to logic 0,  a Flash bit must be erased to set it back to logic \n1. Flash bytes would typically be erased (set to 0xFF) before being reprogrammed. The write and erase operations are automatically  timed by hardware for pr oper execution; data pollin g to determine the end of \nthe write/erase operation is not required. Code execut ion is stalled during a Flash write/erase operation. \nRefer to \nTable  10.1 for complete Flash memory electrical characteristics.\n10.1. Programming The Flash Memory\nThe simplest means of programming the Flash memory  is through the C2 interface using programming \ntools provided by Silicon Labs or a third party vendor. This is the only  means for programming a non-initial -\nized device. For details on the C2 commands to program Flash memory, see Section “20.  C2 Interface” \non page  223. \nTo ensure the integrity of Flash contents, it is strongly recommended that the on-chip VDD Monitor \nbe enabled in any system that includes code that writes and/or erases Flash memory from soft -\nware.\n10.1.1. Flash Lock and Key Functions\nFlash writes and erases by user so ftware are protected with a lock and  key function. Th e Flash Lock and \nKey Register (FLKEY) must be writ ten with the correct key codes, in sequence, be fore Flash operations \nmay be performed. The key codes are: 0xA5, 0xF1. The timing does not matter, but the codes must be \nwritten in order. If the key codes are written out of or der, or the wrong codes are written, Flash writes and \nerases will be disabled until the next  system reset. Flash writes and eras es will also be disabled if a Flash \nwrite or erase is attempted before the key codes have been written properly. The Flash lock resets after each write or erase; the key codes must be writte n again before a following Flash operation can be per\n-\nformed. The FLKEY regist er is detailed in SFR Definition 10.2 .\n10.1.2. Flash Erase Procedure\nThe Flash memory can be programmed from software using the MOVX write instruction with the address \nand data byte to be programmed provided as norma l operands. Before writing to Flash memory using \nMOVX, Flash write operations must be enabled by: (1) setting the PSWE Program Store Write Enable bit \n(PSCTL.0) to logic 1 (this directs the MOVX writes to target Flash memory); and (2) Writing the Flash key \ncodes in sequence to the Flash Lock register (FLKEY). The PSWE bit remains set until cleared by soft -\nware.\nA write to Flash memory can clear bits to logic 0 but cannot set them; only an erase operation can set bits \nto logic 1 in Flash. A byte location to be programmed should be erased before a new value is written.\nThe Flash memory is organized in 512-byte pages. The erase operation applies to an entire page (setting \nall bytes in the page to 0xFF). To erase an en tire 512-byte page, perform the following steps:\nStep 1.  Disable interrupts (recommended).\nStep 2.  Set the PSEE bit (register PSCTL).Step 3.  Set the PSWE bit (register PSCTL).Step 4.  Write the first key code to FLKEY: 0xA5.Step 5.  Write the second key code to FLKEY: 0xF1.Step 6.  Using the MOVX instruction,  write a data byte to any location within the 512-byte page to \nbe erased.\nC8051F310/1/2/3/4/5/6/7\n112 Rev. 1.810.1.3. Flash Write Procedure\nFlash bytes are programmed by software with the following sequence:\nStep 1.  Disable interrupts (recommended).\nStep 2.  Erase the 512-byte Flash page containing the target location, as described in Section \n10.1.2 .\nStep 3.  Set the PSWE bit (register PSCTL).Step 4.  Clear the PSEE bit (register PSCTL).Step 5.  Write the first key code to FLKEY: 0xA5.Step 6.  Write the second key code to FLKEY: 0xF1.Step 7.  Using the MOVX instruction, write a single  data byte to the desired location within the \n512 byte sector.\nSteps 5–7 must be repeated for each byte to be written. After Flash writes are complete, PSWE should be cleared so that MOVX instructions do not target program memory.\n10.2. Non-volatile Data Storage\nThe Flash memory can be used for non-volatile data storage as well as program code. This allows data such as calibration coefficients to  be calculated and stored at run time. Data is written using the MOVX \nwrite instruction and read using the MOVC instructi on. Note: MOVX read instructions always target XRAM.Table  10.1.  Flash Electrical Characteristics\nVDD = 2.7 to 3.6  V; –40 to +85  °C unless otherwise specified.\nParameter Conditions Min Typ Max Units\nFlash SizeC8051F310/1/6/7 16384* — —bytesC8051F312/3/4/5 8192 — —\nEndurance 20 k 100 k — Erase/Write\nErase Cycle Time 25 MHz System Clock 10 15 20 ms\nWrite Cycle Time 25 MHz System Clock 40 55 70 µs\n*Note:  512 bytes at locations 0x3E00 (C8051F310/1) are reserved.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 11310.3. Security Options\nThe CIP-51 provides security options to protect the Flash memory from inadvertent modification by soft -\nware as well as to prevent the viewing of proprietary program code and constants. The Program Store \nWrite Enable (bit PSWE in register PSCTL) and the Program Store Erase Enable (bit PSEE in register \nPSCTL) bits protect the Flash memory from accidental  modification by software. PSWE must be explicitly \nset to ‘1’ before software can modify the Flash me mory; both PSWE and PSEE must  be set to ‘1’ before \nsoftware can erase Flash memory. Additional security features prevent proprietary program code and data \nconstants from being read or altered across the C2 interface.\nA Security Lock Byte located at the last byte of Fl ash user space offers protection of the Flash program \nmemory from access (reads, writes, or erases) by unpr otected code or the C2 inte rface. The Flash security \nmechanism allows the user to lock n 512-byte Flash pages, starting at page 0 (addresses 0x0000 to \n0x01FF), where n is the 1’s complement number represented by the Security Lock Byte. Note that the \npage containing the Flash Security Lock Byte is unlocked when no other Flash pages are locked (all bits of the Lock Byte are ‘1’) and locked when any other Flash pages are locked (any bit of the Lock Byte is ‘0’).  See the example below.\nFigure 10.1. Flash Program Memory MapSecurity Lock Byte: 11111101b\n1’s Complement: 00000010b\nFlash pages locked: 3 (First two Flash pages + Lock Byte Page)\nAddresses locked: 0x0000 to 0x03FF (first two Flash pages)\nand 0x3C00 to 0x3DFF or 0x1E00 to 0x1FFF (Lock Byte Page)\nAccess limit set \naccording to the \nFLASH security lock \nbyteC8051F310/1/6/7\n0x00000x3DFF Lock Byte  Reserved \n0x3DFE0x3E00\nFLASH memory \norganized in 512-byte \npages0x3C00\nUnlocked FLASH PagesLocked when any \nother FLASH pages \nare lockedC8051F312/3/4/5\n0x00000x1FFF Lock Byte  Reserved \n0x1FFE0x2000\n0x1E00\nUnlocked FLASH Pages\nC8051F310/1/2/3/4/5/6/7\n114 Rev. 1.8The level of Flash security depends on the Flash ac cess method. The three Flash access methods that \ncan be restricted are reads, writes, an d erases from the C2 debug interface, user firmware executing on \nunlocked pages, and user firmware executing on locked pages. Table  10.2 summarizes the Flash security \nfeatures of the C8051F31x devices.\nTable  10.2.  Flash Security Summary\nAction C2 Debug \nInterfaceUser Firmware executing from: \nan unlocked page a locked page\nRead, Write or Erase unlocked pages                      (except page with Lock Byte) Permitted Permitted Permitted\nRead, Write or Erase locked pages                        (except page with Lock Byte) Not Permitted Flash Error Reset Permitted\nRead or Write page containing Lock Byte                      (if no pages are locked) Permitted Permitted Permitted\nRead or Write page containing Lock Byte                        (if any page is locked) Not Permitted Flash Error Reset Permitted\nRead contents of Lock Byte                                            (if no pages are locked) Permitted Permitted Permitted\nRead contents of Lock Byte                                          (if any page is locked) Not Permitted Flash Error Reset Permitted\nErase page containing Lock Byte                                      (if no pages are locked) Permitted Flash Error Reset Flash Error Reset\nErase page containing Lock Byte - Unlock all pages (if any page is locked) C2 Device \nErase OnlyFlash Error Reset Flash Error Reset\nLock additional pages                                               (change \'1\'s to \'0\'s in the Lock Byte) Not Permitted Flash Error Reset Flash Error Reset\nUnlock individual pages                                     (change \'0\'s to \'1\'s in the Lock Byte) Not Permitted Flash Error Reset Flash Error Reset\nRead, Write or Erase Reserved Area Not Permitted Flash Error Reset Flash Error Reset\n\uf020\nC2 Device Erase - Erases all Flash pages in cluding the page containing the Lock Byte.\nFlash Error Reset - Not permitted; Causes Flash Erro r Device Reset (FERROR bit in RSTSRC is \'1\' after \nreset).\uf020\n- All prohibited operations that are performed via the C2 interface are ignored (do not cause device reset).\n- Locking any Flash page also locks th e page containing the Lock Byte.\n- Once written to, the Lock Byte cannot be modifi ed except by performing a C2 Device Erase. \n- If user code writes to the Lock Byte, the Lock does not take effect until the next device reset.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 11510.4. Flash Write and Erase Guidelines\nAny system which contains routines which write or er ase Flash memory from software involves some risk \nthat the write or erase ro utines will execute unin tentionally if the CPU is op erating outside its specified \noperating range of VDD, system clock frequency, or temperature.  This accidental execution of Flash modi -\nfying code can result in alteration of Flash memory contents causing a system failure that is only recover -\nable by re-Flashing the code in the device.\nThe following guidelines are recomme nded for any system that contains routines which write or erase \nFlash from code.\n10.4.1. VDD Maintenance and the VDD Monitor \n1. If the system power supply is subject to volta ge or current "spikes," add sufficient transient \nprotection devices to the power supply to ensure that the supply voltages  listed in the Absolute \nMaximum Ratings table are not exceeded.\n2. Make certain that the minimum VDD rise time specification of 1 ms is met. If the system cannot \nmeet this rise time specification, then add an external VDD brownout circuit to the RST pin of \nthe device that holds the device in reset until VDD reaches 2.7 V and re-asserts RST if VDD\ndrops below 2.7 V.\n3. Enable the on-chip VDD monitor and enable the VDD monitor as a reset source as early in code \nas possible. This should be the first set of inst ructions executed after the Reset Vector. For \'C\'-\nbased systems, this will involve modifying the st artup code added by the \'C\' compiler. See your \ncompiler documentation for more details. Make certain that there are no delays in software between enabling the V\nDD monitor and enabling the VDD monitor as a reset source. Code \nexamples showing this can be found in "AN201:  Writing to Flash from Firmware", available \nfrom the Silicon Laboratories web site.\n4. As an added precaution, explicitly enable the VDD monitor and enable the VDD monitor as a \nreset source inside the functions that write and erase Flash memory. The VDD monitor enable \ninstructions should be placed just after the in struction to set PSWE to a \'1\', but before the \nFlash write or erase operation instruction.\n5. Make certain that all writes to the RSTSRC (R eset Sources) register use direct assignment \noperators and explicitly DO NOT use the bit- wise operators (such as AND or OR). For exam -\nple, "RSTSRC = 0x02" is correct.  "RSTSRC |= 0x02" is incorrect.\n6. Make certain that all writes to the RSTSRC regist er explicitly set the PORSF bit to a \'1\'. Areas \nto check are initialization code which enables ot her reset sources, such  as the Missing Clock \nDetector or Comparator, for example, and instru ctions which force a So ftware Reset. A global \nsearch on "RSTSRC" can quickly verify this. \n10.4.2. PSWE Maintenance \n7. Reduce the number of places in code where the PSWE bit (b0 in PSCTL) is set to a \'1\'. There \nshould be exactly one routine in code that sets  PSWE to a \'1\' to write Flash bytes and one rou -\ntine in code that sets PSWE and PSEE bo th to a \'1\' to erase Flash pages.\n8. Minimize the number of variable accesses while  PSWE is set to a \'1\'. Handle pointer address \nupdates and loop variable maintenance outside the "PSWE = 1; ... PSWE = 0;" area. Code examples showing this can be found in AN201,  "Writing to Flash from Firmware", available \nfrom the Silicon Laboratories web site.\n9. Disable interrupts prior to setti ng PSWE to a \'1\' and leave them disabled until after PSWE has \nbeen reset to \'0\'. Any interrup ts posted during the Flash writ e or erase operation will be ser -\nviced in priority order after the Flash operation has been completed and interrupts have been \nre-enabled by software.\nC8051F310/1/2/3/4/5/6/7\n116 Rev. 1.810. Make certain that the Flash write and erase pointer variables are not located in XRAM. See \nyour compiler documentation for instructions regard ing how to explicitly lo cate variables in dif -\nferent memory areas.\n11. Add address bounds checking to the routines th at write or erase Flash memory to ensure that \na routine called with an illegal address does not re sult in modification of the Flash.\n10.4.3. System Clock \n12. If operating from an external crystal, be advised that crystal performance is susceptible to \nelectrical interference and is sensitive to layout  and to changes in temperature. If the system is \noperating in an electrically noi sy environment, use the internal oscillator or use an external \nCMOS clock.\n13. If operating from the ex ternal oscillator, switch to the internal oscillator during Flash write or \nerase operations. The external oscillator can continue to run, and the CPU can switch back to \nthe external oscillator after th e Flash operation has completed. \uf020\nAdditional Flash recommendations and example code can be found in AN201, "Writing to Flash from Firm -\nware", available from the S ilicon Laboratories web site.\nSFR Definition  10.1.  PSCTL: Program Store R/W Control\nBits7–2: UNUSED: Read = 000000b, Write = don’t care.\nBit1: PSEE: Program Store Erase Enable\nSetting this bit (in combination with PSWE) a llows an entire page of Flash program memory \nto be erased. If this bit is logic 1 and Flash writes are enabled (PSWE is logic 1), a write to Flash memory using the MOVX in struction will erase the entire page that contains the loca-\ntion addressed by the MOVX instruction. The va lue of the data byte written does  not matter.\n0: Flash program memory erasure disabled.1: Flash program memory erasure enabled.\nBit0: PSWE: Program Store Write Enable\nSetting this bit allows writing a byte of data to the Flash program memory using the MOVX write instruction. The Flash location should be erased before writing data. \n0: Writes to Flash program memory disabled.1: Writes to Flash program memory enabled;  the MOVX write instruction targets Flash \nmemory.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - - - - - PSEE PSWE 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x8F\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 117SFR Definition  10.2.  FLKEY: Flash Lock and Key  \nSFR Definition  10.3.  FLSCL: Flash Scale  Bits7–0: FLKEY: Flash Lock and Key Register\nWrite:This register must be writte n to before Flash writes or erases can be performed. Flash \nremains locked until this regist er is written to with the following key codes: 0xA5, 0xF1. The \ntiming of the writes does not matter, as long as the codes are written in order. The key codes \nmust be written for each Flas h write or erase operation. Fl ash will be locked until the next \nsystem reset if the wrong codes are written or if a Flash operation is attempted before the \ncodes have been written correctly.Read:When read, bits 1-0 indicate the current Flash lock state.00: Flash is write/erase locked.01: The first key code has been written (0xA5).10: Flash is unlocked (w rites/erases allowed).\n11: Flash writes/erases disa bled until the next reset.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xB7\nBits7: FOSE: Flash One-shot Enable\nThis bit enables the Flash read one-shot. W hen the Flash one-shot  disabled, the Flash \nsense amps are enabled for a full clock cycle during Flash reads. At system clock frequen-\ncies below 10 MHz, disabling the Flash one-s hot will increase system power consumption.\n0: Flash one-shot disabled.1: Flash one-shot enabled.\nBits6–0: RESERVED. Read = 0. Must Write 0.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nFOSE Reserved Reserved Reserved Reserved Reserved Reserved Reserved 10000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xB6\nC8051F310/1/2/3/4/5/6/7\n118 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 11911. External RAM\nThe C8051F31x devices include 1024  bytes of RAM mapped into the external data memory space. All of \nthese address locations may be accessed using the external move instruction (MOVX) and the data pointer (DPTR), or using MOVX indirect addressing mode. If the MOVX instruct ion is used with an 8-bit \naddress operand (such as @R1), then the high byte of the 16-bit address is provided by the External Mem\n-\nory Interface Control Register (EMI0CN as shown in SFR Definition 11.1 ). Note: the MOVX instruction is \nalso used for writes to the Flash memory. See Section “10.  Flash Memory” on page  111 for details. The \nMOVX instruction accesses XRAM by default.\nFor a 16-bit MOVX operation (@DPTR), the upper 6-bits  of the 16-bit external data memory address word \nare "don\'t cares.” As a result, the 1024  byte RAM is mapped modulo style over the entire 64  k external \ndata memory address range. For example, the XRAM byte at address 0x0000 is shadowed at addresses 0x0400, 0x0800, 0x0C00, 0x1000, etc. This is a useful feature when performing a linear memory fill, as the \naddress pointer doesn\'t have to be reset when reaching the RAM block boundary.\nSFR Definition  11.1.  EMI0CN: External Memory Interface Control  \nBits 7–2: UNUSED. Read = 000000b. Write = don’t care.Bits 1–0: PGSEL: XR AM Page Select.\nThe EMI0CN register provides the high byte of the 16-bit external data memory address \nwhen using an 8-bit MOVX command, effectively selecting a 256-byte page of RAM. Since \nthe upper (unused) bits of the register are always zero, the PGSEL determines which page of XRAM is accessed.\nFor Example: If EMI0CN = 0x01, addresse s 0x0100 through 0x01FF will be accessed.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nPGSEL 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xAA\nC8051F310/1/2/3/4/5/6/7\n120 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 12112. Oscillators\nC8051F31x devices include a programmable internal osc illator and an external o scillator drive circuit. The \ninternal oscillator can be  enabled/disabled and calibrated using the OSCICN and OSCICL registers, as \nshown in Figure  12.1. The system clock can be sourced by the exte rnal oscillator circuit,  the internal oscil -\nlator, or a scaled version of the intern al oscillator. The internal  oscillator\'s electrical specifications are given \nin Table  12.1 on page  123.\nFigure 12.1. Oscillator Diagram\n12.1. Programmable Internal Oscillator\nAll C8051F31x devices include a programmable internal oscillator that defaults as the system clock after a system reset. The internal oscillator period can be programmed via the OSCICL register as defined by \nSFR Definition 12.1  OSCICL is factor calibrated to obtain a 24.5  MHz frequency. \nElectrical specifications for the prec ision internal osc illator are given in Table  12.1 on page  123. Note that \nthe system clock may be derived from the programmed internal oscillator divided by 1, 2, 4, or 8, as \ndefined by the IFCN bits in register OSCICN. The divide value defaults to 8 following a reset.OSCProgrammable\nInternal Clock\nGenerator\nInput\nCircuitEN\nSYSCLKnOSCICL OSCICNIOSCEN\nIFRDY\nIFCN1\nIFCN0\nXTAL1\nXTAL2Option 2\nVDD\nXTAL2Option 1\n10M\uf057Option 3\nXTAL2\nOption 4\nXTAL2\nOSCXCNXTLVLD\nXOSCMD2\nXOSCMD1\nXOSCMD0\nXFCN2\nXFCN1\nXFCN0CLKSEL\nCLKSL0\nC8051F310/1/2/3/4/5/6/7\n122 Rev. 1.8SFR Definition  12.1.  OSCICL: Internal Osci llator Calibration  \nSFR Definition  12.2.  OSCICN: Internal Os cillator Control  Bit7: UNUSED. Read = 0. Write = don’t care.\nBits 6–0: OSCICL: Internal Os cillator Calibration Register.\nThis register determines the internal oscillato r period. This reset value for OSCICL deter-\nmines the oscillator base freque ncy. The reset value is factor y calibrated to generate an \ninternal oscillator frequency of 24.5 MHz. R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nVariable\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xB3\nBit7: IOSCEN: Internal Oscillator Enable Bit.\n0: Internal Osc illator Disabled.\n1: Internal Oscillator Enabled.\nBit6: IFRDY: Internal Oscilla tor Frequency Ready Flag.\n0: Internal Oscillator is not running at prog rammed frequency.\n1: Internal Oscillator is r unning at progra mmed frequency.\nBits5–2: UNUSED. Read = 0000b, Write = don\'t care.Bits1–0: IFCN1-0: Internal Osc illator Frequency Control Bits.\n00: SYSCLK derived from Intern al Oscillator divided by 8.\n01: SYSCLK derived from Intern al Oscillator divided by 4.\n10: SYSCLK derived from Intern al Oscillator divided by 2.\n11: SYSCLK derived from Internal Oscillator divided by 1.R/W R R/W R/W R/W R/W R/W R/W Reset Value\nIOSCEN IFRDY IFCN1 IFCN0 11000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xB2\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 123SFR Definition  12.3.  CLKSEL: Clock Select\nTable  12.1.  Internal Oscillator El ectrical Characteristics\nVDD = 2.7 to 3.6  V; –40 to +85  °C unless otherwise specified.\nParameter Conditions Min Typ Max Units\nInternal Oscillator Frequency 24 24.5 25 MHz\nInternal Oscillator Supply \nCurrent (from VDD)OSCICN.7 = 1 — 450 1000 µABits7–1: Reserved. Read = 0000000b, Must Write = 0000000.\nBit0: CLKSL0: System Cl ock Source Select Bit.\n0: SYSCLK derived from the Inte rnal Oscillator, and scales pe r the IFCN bits in register \nOSCICN.1: SYSCLK derived from the External Oscillator circuit.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nReserved Reserved Reserved Reserved Reserved Reserved Reserved CLKSL0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xA9\nC8051F310/1/2/3/4/5/6/7\n124 Rev. 1.812.2. External Oscill ator Drive Circuit\nThe external oscillator circuit may drive an external cr ystal, ceramic resona tor, capacitor, or RC network. A \nCMOS clock may also provide a clock input. For a cr ystal or ceramic resonator configuration, the crys -\ntal/resonator must be wired across the XTAL 1 and XTAL2 pins as shown in Option 1 of Figure  12.1. A \n10 M\uf057\uf020resistor also must be wired across the XTAL2 an d XTAL1 pins for the crystal/resonator configura -\ntion. In RC, capacitor, or CMOS cl ock configuration, the clock source should be wired to the XTAL2 pin as \nshown in Option 2, 3, or 4 of Figure  12.1. The type of external oscillator must be selected in the OSCXCN \nregister, and the frequency control bits (XFCN) must be selected appropriately (see SFR Definition 12.4 ).\nImportant Note on External Oscillator Usage: Port pins must be configured when using the external \noscillator circuit. When the external oscillator drive ci rcuit is enabled in crystal/r esonator mode, Port pins \nP0.2 and P0.3 are used as XTAL1 and XTAL2 respectively. When the ex ternal oscillator drive circuit is \nenabled in capacitor, RC, or CMOS clock mode, Port pin P0.3 is used as XTAL2. The Port I/O Crossbar \nshould be configured to ski p the Port pins used by the oscillator circuit; see Section “13.1.  Priority Cross -\nbar Decoder” on page  131 for Crossbar configuratio n. Additionally, when using the external oscillator cir -\ncuit in crystal/resonator, capaci tor, or RC mode, the associated Port pins should be configured as analog \ninputs . In CMOS clock mode, the associated pin should be configured as a digital input . See Section \n“13.2.  Port I/O Initialization” on page  133 for details on Port input mode selection.\n12.3. System Clock Selection\nThe CLKSL0 bit in register CLKSEL selects which oscillat or is used as the system  clock. CLKSL0 must be \nset to ‘1’ for the system clock to run from the external oscillator; ho wever the external oscillator may still \nclock certain peripherals (timers, PC A) when the internal o scillator is selected as the system clock. The \nsystem clock may be switched on-the-fly between the in ternal and external osc illator, so long as the \nselected oscillator is enabled and has settled. The internal osci llator requires little start-up time and may be \nselected as the system clock immedi ately following the OSCICN write that  enables the internal oscillator. \nExternal crystals and ceramic resona tors typically require a start-up time before they are settled and ready \nfor use as the system clock. The Crystal Valid Flag (XTL VLD in register OSCXCN) is  set to ‘1’ by hardware \nwhen the external o scillator is settled. To avoid reading a false XTLVLD , in crystal mode software \nshould delay at least 1  ms between enabling the external oscillator and checking XTLVLD.  RC and \nC modes typically require no startup time.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 125SFR Definition  12.4.  OSCXCN: External Oscillator Control\nBit7: XTLVLD: Crystal Oscillator Valid Flag.\n(Read only when XOSCMD = 11x.)0: Crystal Oscillator is unused or not yet stable.1: Crystal Oscillator is  running and stable.\nBits6–4: XOSCMD2-0: Extern al Oscillator Mode Bits.\n00x: External Osc illator circuit off. \n010: External CMOS Clock Mode. 011: External CMOS Clock Mode with divide by 2 stage.100: RC Oscillator Mode.101: Capacitor Oscillator Mode.110: Crystal Oscillator Mode.111: Crystal Oscillator Mode  with divide by 2 stage.\nBit3: RESERVED. Read = 0,  Write = don\'t care.\nBits2–0: XFCN2-0: External Osc illator Frequency Control Bits.\n000-111: See table below:\nCRYSTAL MODE  (Circuit from Figure 12.1 , Option 1; XOSCMD = 11x)\nChoose XFCN value to match crystal frequency.\nRC MODE  (Circuit from Figure 12.1, Option 2; XOSCMD = 10x)\nChoose XFCN value to match frequency range: \nf = 1.23(10\n3) / (R x C) , where\nf = frequency of clock in MHzC = capacitor value in pFR = Pullup resistor value in k \uf057\nC MODE  (Circuit from Figure 12.1, Option 3; XOSCMD = 10x)\nChoose K Factor  (KF) for the oscillation frequency desired:\nf = KF / (C x V\nDD), where\nf = frequency of clock in MHz\nC = capacitor value the XTAL2 pin in pFV\nDD = Power Supply on MCU in voltsR R/W R/W R/W R R/W R/W R/W Reset Value\nXTLVLD XOSCMD2 XOSCMD1 XOSC MD0 XFCN2 XFCN1 XFCN0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xB1\nXFCN Crystal (XOSCMD = 11x) RC (XOSCMD = 10x) C (XOSCMD = 10x)\n000 f \uf0a3 32 kHz f \uf0a3\uf02025 kHz K Factor = 0.87\n001 32 kHz \uf03c\uf020f \uf0a3\uf02084 kHz 25 kHz \uf03c\uf020f \uf0a3\uf02050 kHz K Factor = 2.6\n010 84 kHz \uf03c f \uf0a3\uf020225 kHz 50 kHz \uf03c\uf020f \uf0a3\uf020100 kHz K Factor = 7.7\n011 225 kHz \uf03c f \uf0a3\uf020590 kHz 100 kHz \uf03c\uf020f \uf0a3\uf020200 kHz K Factor = 22\n100 590 kHz \uf03c f \uf0a3\uf0201.5 MHz 200 kHz \uf03c\uf020f \uf0a3\uf020400 kHz K Factor = 65\n101 1.5 MHz \uf03c f \uf0a3\uf0204 MHz 400 kHz \uf03c\uf020f \uf0a3\uf020800 kHz K Factor = 180\n110 4 MHz \uf03c f \uf0a3\uf02010 MHz 800 kHz \uf03c\uf020f \uf0a3\uf0201.6 MHz K Factor = 664\n111 10 MHz \uf03c f \uf0a3\uf02030 MHz 1.6 MHz \uf03c\uf020f \uf0a3\uf0203.2 MHz K Factor = 1590\nC8051F310/1/2/3/4/5/6/7\n126 Rev. 1.812.4. External Crystal Example\nIf a crystal or ceramic resonator is used as an external  oscillator source for the MCU, the circuit should be \nconfigured as shown in Figure  12.1, Option 1. The External Oscillato r Frequency Contro l value (XFCN) \nshould be chosen from the Crystal column of the table in SFR Definition 12.4 . For example, an \n11.0592  MHz crystal requires an XFCN setting of 111b.\nWhen the crystal oscillator is first e nabled, the oscillator amplitude detecti on circuit requires a settling time \nto achieve proper bias. Introducing a delay of 1  ms between enabling the o scillator and checking the \nXTLVLD bit will prevent a premature switch to the extern al oscillator as the system clock. Switching to the \nexternal oscillator before the crysta l oscillator has stabilized can result in unpredictable behavior. The rec -\nommended procedure is:\nStep 1.  Force the XTAL1 and XTAL2 pins low by writing 0s to the port latch.\nStep 2.  Configure XTAL1 and XTAL2 as analog inputs.Step 3.  Enable the external oscillator.Step 4.  Wait at least 1 ms.Step 5.  Poll for XTLVLD => \'1\'.Step 6.  Switch the system cl ock to the external oscillator.\nNote:  Tuning-fork crystals may requir e additional settling time before XTLVLD returns a valid result. \nThe capacitors shown in the external crystal configur ation provide the load capacitance required by the \ncrystal for correct oscillation. These capacitors are "in series" as seen by the crystal and "in parallel" with \nthe stray capacitance of the XTAL1 and XTAL2 pins.\nNote:  The load capacitance depends upon the crystal an d the manufacturer. Please refer to the crystal \ndata sheet when completing these calculations.\nFor example, a tuning-fork crystal of 32.768  kHz with a recommended load capacitance of 12.5  pF should \nuse the configuration shown in Figure  12.1, Option 1. The total value of th e capacitors and the stray capac -\nitance of the XTAL pins should equal 25  pF. With a stray capacitance of 3  pF per pin, the 22  pF capacitors \nyield an equivalent capacitance of 12.5  pF across the crystal, as shown in Figure  12.2.\nFigure 12.2. 32. 768 kHz External Crystal Example\nImportant Note on External Crystals:  Crystal oscillator circuits are qui te sensitive to PCB layout. The \ncrystal should be placed as close as possible to the XTAL pins on the device. The traces should be as \nshort as possible and shielded with ground plane fr om any other traces which could introduce noise or \ninterference.22 pF\n22 pF32.768 kHz 10 MXTAL1\nXTAL2\uf057\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 12712.5. External RC Example\nIf an RC network is used as an external oscillator so urce for the MCU, the circ uit should be configured as \nshown in Figure  12.1, Option 2. The capacitor should be no greater than 100  pF; however, for very small \ncapacitors, the total capacitance may be dominated by parasitic capacitance in the PCB layout. To deter -\nmine the required External Oscilla tor Frequency Control va lue (XFCN) in the OSCXCN Register, first \nselect the RC network value to prod uce the desired frequency of oscilla tion. If the frequency desired is \n100 kHz, let R = 246  k\uf057 and C = 50  pF:\nf = 1.23(  103 ) / RC = 1.23  ( 103 ) / [ 246 x 50 ] = 0.1  MHz = 100  kHz\nReferring to the table in SFR Definition 12.4 , the required XFCN setting is 010b.\n12.6. External Capacitor Example\nIf a capacitor is used as an external oscillator for t he MCU, the circuit should be configured as shown in \nFigure  12.1, Option 3. The capacitor should be no greater than 100  pF; however for very  small capacitors, \nthe total capacitance may be dominated by parasiti c capacitance in the PCB layout. To determine the \nrequired External Oscillato r Frequency Control value (XFCN) in th e OSCXCN Register, select the capaci -\ntor to be used and find the fr equency of oscillati on from the equations  below. Assume VDD = 3.0 V and \nC = 50 pF:\nf = KF  / ( C x VDD ) = KF / (  50 x 3  ) MHz\nf = KF  / 150 MHz\nIf a frequency of roughly 150  kHz is desired, select the K Factor from the table in SFR Definition 12.4  as \nKF = 22:\nf = 22  / 150 = 0.146  MHz, or 146  kHz\nTherefore, the XFCN value to use in this example is 011b.\nC8051F310/1/2/3/4/5/6/7\n128 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 12913. Port Input/Output   \nDigital and analog resources are available through 29 I/O pins (C8051F310/2/4), or 25 I/O pins \n(C8051F311/3/5), or 21 I/O pins (C8051F316/7). Port pins are organized as three byte-wide Ports and one \n5-bit-wide (C8051F310/2/4) or 1-bit-wide (C8051F311/3/ 5) Port. In the C8051F316/7, the port pins are \norganized as one byte-wide Port, two 6-bit-wide Ports and one 1-bit-wide Port. Each of the Port pins can be defined as general-purpose I/O (G PIO) or analog input; Port pins P0 .0-P2.3 can be assigned to one of \nthe internal digital resources as shown in \nFigure  13.3. The designer has complete control over which func -\ntions are assigned, limited on ly by the number of physical I/O pins. This resource assignment flexibility is \nachieved through the use of a Priority Crossbar Decode r. The state of a Port I/O pin can always be read in \nthe corresponding Port latch, regardless of the Crossbar settings. \nThe Crossbar assigns the selected internal digital reso urces to the I/O pins based on the Priority Decoder \n(Figure  13.3 and Figure  13.4). The registers XBR0 and XBR1, defined in SFR Definition 13.1  and SFR \nDefinition 13.2 , are used to select internal digital functions.\nAll Port I/Os are 5  V tolerant (refer to Figure  13.2 for the Port cell circuit). The Port I/O cells are configured \nas either push-pull or open-drain in the Port Outp ut Mode registers (PnMDOUT, where n = 0,1,2,3). Com -\nplete Electrical Spec ifications for Port I/O are given in Table  13.1 on page  143.\nFigure 13.1. Port I/O Fun ctional Block DiagramXBR0, XBR1, \nPnSKIP Registers\nDigital \nCrossbarPriority \nDecoder\n2\nP0.0\nP0.7PnMDOUT, \nPnMDIN Registers\nUART(Internal Digital Signals)Highest \nPriority\nLowest \nPrioritySYSCLK2SMBus\nT0, T126PCACP1 \nOutputs24SPI\nCP0 \nOutputs2P1.0\nP1.7\nP2.0\nP2.7\nP3.0\nP3.4(Port Latches)P0 (P0.0-P0.7)\n(P1.0-P1.7)\n(P2.0-P2.3)\n(P2.4-P2.7)8\n8\n4\n4P1\nP2Notes:\n1.  P3.1-P3.4 only available on the \nC8051F310/2/42. P1.6,P1.7,P2.6,P2.7 only available \non the C8051F310/1/2/3/4/5\n(P3.0-P3.4)5\nP35P2 \nI/O \nCells\nP3 \nI/O \nCellsP1 \nI/O \nCellsP0 \nI/O \nCells\n88\n8 4\n4\nC8051F310/1/2/3/4/5/6/7\n130 Rev. 1.8Figure 13.2. Port I/O Cell Block DiagramGND/PORT-OUTENABLE\nPORT-OUTPUTPUSH-PULL VDD VDD/WEAK-PULLUP\n(WEAK)\nPORT\nPAD\nANALOG INPUTAnalog Select\nPORT-INPUT\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 13113.1. Priority Crossbar Decoder\nThe Priority Cro ssbar Decoder ( Figure  13.3) assigns a priority to each I/O function, starting at the top with \nUART0. When a digital resource is selected, the leas t-significant unassigned Port  pin is assigned to that \nresource (excluding UART0, which is a lways at pins 4 and 5). If a Port pin is assigned, the Crossbar skips \nthat pin when assigning the next se lected resource. Additionally, the Crossbar will skip Port pins whose \nassociated bits in the PnSKIP registers are set. The Pn SKIP registers allow software to skip Port pins that \nare to be used for analog input,  dedicated functions, or GPIO. \nImportant Note on Crossbar Configuration: If a Port pin is claimed by a peripheral without use of the \nCrossbar, its corresponding PnSKIP bit should be set. This applies to P0.0 if VREF is used, P0.3 and/or P0.2 if the external oscillator circuit is enabled, P0.6 if the ADC is config ured to use the external conversion \nstart signal (CNVSTR), and any selected ADC or Comparator inputs. The Crossbar skips selected pins as if they were already assigned, and moves to the next unassigned pin. \nFigure  13.3 shows the Crossbar \nDecoder priority with no Port pins sk ipped (P0SKIP, P1SKIP, P2SKIP = 0x00); Figure  13.4 shows the \nCrossbar Decoder priority with the XTAL1 (P0. 2) and XTAL2 (P0.3) pins skipped (P0SKIP  = 0x0C to skip \nP0.2 and P0.3 for XTAL use).\nFigure 13.3. Crossbar Priority Decoder with No Pins SkippedVREF\nXTAL1\nXTAL2\nCNVSTR\n012345670123456701234567\nSCK\nMISOMOSINSS*\nCP0\nCP0ACP1\n00000000000000000000\nSpecial Function Signals are not assigned by the Crossbar. When these signals are enabled, the Crossbar must \nbe manually configured to skip their corresponding port pins.Port pin potentially available to peripheral\nSF Signals ECI\nT0T1\nP0SKIP[0:7] P2SKIP[0:3]\nSignals UnavailableSF Signals\nPIN I/O\nTX0\nRX0\nSDA\nSCLP0 P2\nCEX3\nCEX4\nP1SKIP[0:7]P1\nCP1A\nCEX2CEX0\nCEX1SYSCLK\n*Note:  NSS is only pinned out in 4-wire SPI mode.\nNote: P1.6,P1.7,P2.6,P2.7 only available on the C80 51F310/1/2/3/4/5; P1SKIP [7:6] should always be \nset to 11b for the C8051F316/7 devices.\nC8051F310/1/2/3/4/5/6/7\n132 Rev. 1.8Figure 13.4. Crossbar Priority D ecoder with Crystal Pins Skipped\nRegisters XBR0 and XBR1 are used to assign the digital I/O  resources to the physical I/O Port pins. Note \nthat when the SMBus is selected, the Crossbar assi gns both pins associated with the SMBus (SDA and \nSCL); when the UART is selected, the Crossbar assign s both pins associated with the UART (TX and RX). \nUART0 pin assignments are fixed for bootloading purp oses: UART TX0 is always assigned to P0.4; UART \nRX0 is always assigned to P0.5. Standard Port I/Os  appear contiguously after the prioritized functions \nhave been assigned. \nImportant Note: The SPI can be operated in either 3-wire or 4-wire modes, pending the state of the NSS -\nMD1-NSSMD0 bits in register SPI0CN. According to the SPI mode, the NSS signal may or may not be \nrouted to a Port pin. \nVREF\nXTAL1\nXTAL2\nCNVSTR\n012345670123456701234567\nSCK\nMISO\nMOSI\nNSS*\nCP0\nCP0A\nCP1\n00110000000000000000P2\nCP1A\nCEX3\nCEX4\nSignals Unavailable\nCEX2CEX0\nCEX1SYSCLKSF Signals\nPIN I/O\nTX0\nRX0\nSDA\nSCLP0 P1\nSpecial Function Signals are not assigned by the Crossbar. When these signals are enabled, the Crossbar must \nbe manually configured to skip their corresponding port pins.Port pin potentially available to peripheral\nSF Signals ECI\nT0\nT1\nP0SKIP[0:7] P2SKIP[0:3] P1SKIP[0:7]\n*Note:  NSS is only pinned out in 4-wire SPI mode.\nNote: P1.6,P1.7,P2.6,P2.7 only available on the C8051F310/ 1/2/3/4/5; P1SKIP[7:6] should always be set to \n11b for the C8051F316/7 devices.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 13313.2. Port I/O Initialization\nPort I/O initialization cons ists of the following steps:\nStep 1.  Select the input mode (analog or digital) for all Port pins, using the Port Input Mode \nregister (PnMDIN).\nStep 2.  Select the output mode (open-drain or push -pull) for all Port pins, using the Port Output \nMode register (PnMDOUT).\nStep 3.  Select any pins to be skipped by the I/O Crossbar using the Port Skip registers (PnSKIP).\nStep 4.  Assign Port pins to desired peripherals.Step 5.  Enable the Cr ossbar (XBARE = ‘1’).\nAll Port pins must be configured as either analog or digital inputs. Any pins to be used as Comparator or \nADC inputs should be configured as an analog inputs. When a pin is configured as an analog input, its weak pullup, digital driver, and digital receiver are disabled. This process save s power and reduces noise \non the analog input. Pins configured as digital inputs may still be  used by analog peripherals; however this \npractice is not recommended.\nAdditionally, all analog input pins should be configur ed to be skipped by the Crossbar (accomplished by \nsetting the associated bits in PnSKIP). Port input mode is set in the PnMDIN register, where a ‘1’ indicates \na digital input, and a ‘0’ indicates an analog input. All pins default to digital inputs on reset. See SFR Defini -\ntion 13.4  for the PnMDIN register details.\nThe output driver characteristics of the I/O pins ar e defined using the Port Output Mode registers (PnMD -\nOUT). Each Port Output driver can be configured as  either open drain or push- pull. This selection is \nrequired even for the digital resources selected in the XBRn registers, and is not automatic. The only \nexception to this is the SMBus (SDA, SCL) pins, which are configured as open-drain regardless of the PnMDOUT settings. When the WEAKPUD bi t in XBR1 is ‘0’, a weak pullup is enabled for a ll Port I/O con\n-\nfigured as open-drain. W EAKPUD does not affect the push-pull Port I/O. Furthermo re, the weak pullup is \nturned off on an output that is driving a ‘0’ to avoid unnecessary power dissipation.\nRegisters XBR0 and XBR1 must be loaded with the approp riate values to select the digital I/O functions \nrequired by the design. Setting the XBARE bit in XBR1  to ‘1’ enables the Cross bar. Until the Crossbar is \nenabled, the external pins remain as standard Port I/O (in input mode), regardless of the XBRn Register \nsettings. For given XBRn Register settings, one can de termine the I/O pin-out us ing the Priority Decode \nTable; as an alternative, the Confi guration Wizard utility of the Silicon Labs IDE software will determine the \nPort I/O pin-assignments based on the XBRn Register settings.\nThe Crossbar must be enabled to use Port pins as standard Port I/O in output mode. Port output drivers are disabled while the Crossbar is disabled.\nC8051F310/1/2/3/4/5/6/7\n134 Rev. 1.8SFR Definition  13.1.  XBR0: Port I/O Cro ssbar Register 0  \nBit7: CP1AE: Comparator1 Asynchronous Output Enable\n0: Asynchronous CP1 unavailable at Port pin.1: Asynchronous CP1 routed to Port pin.\nBit6: CP1E: Comparator1 Output Enable\n0: CP1 unavailable at Port pin.1: CP1 routed to Port pin.\nBit5: CP0AE: Comparator0 Asynchronous Output Enable\n0: Asynchronous CP0 unavailable at Port pin.1: Asynchronous CP0 routed to Port pin.\nBit4: CP0E: Comparator0 Output Enable\n0: CP0 unavailable at Port pin.1: CP0 routed to Port pin.\nBit3: SYSCKE: /SYSCLK Output Enable\n0: /SYSCLK unavaila ble at Port pin.\n1: /SYSCLK output r outed to Port pin.\nBit2: SMB0E: SMBus I/O Enable\n0: SMBus I/O unavailable at Port pins.1: SMBus I/O routed to Port pins.\nBit1: SPI0E: SPI I/O Enable\n0: SPI I/O unavailable at Port pins.1: SPI I/O routed to Port pins.\nBit0: URT0E: UART I/O Output Enable\n0: UART I/O unavailable at Port pin.1: UART TX0, RX0 routed to Port pins P0.4 and P0.5.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nCP1AE CP1E CP0AE CP0E SYSCKE SMB0E SPI0E URT0E 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xE1\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 135SFR Definition  13.2.  XBR1: Port I/O Cro ssbar Register 1  \n13.3. General Purpose Port I/O\nPort pins that remain unassigned by the Crossbar and are not used by analog peripherals can be used for \ngeneral purpose I/O. Ports3-0 are accessed through co rresponding special function  registers (SFRs) that \nare both byte addressable and bit addressable. When writing to a Port, the valu e written to the SFR is \nlatched to maintain the output data value at each pin. When reading, the logic levels of the Port\'s input pins \nare returned regardless of the XBRn settings (i.e., even when the pin is assigned to another signal by the \nCrossbar, the Port register can always read its corres ponding Port I/O pin). The exception to this is the \nexecution of the read-modify-write instructions. The read-modify-write instructions when operating on a \nPort SFR are the following: ANL, ORL, XRL, JBC, CP L, INC, DEC, DJNZ and MOV, CLR or SET, when the \ndestination is an individual bit in a Po rt SFR. For these instructions, the value of the register (not the pin) is \nread, modified, and written back to the SFR.Bit7: WEAKPUD: Port I/O Weak Pullup Disable.\n0: Weak Pullups enabled (except for Ports whose I/O are configured as analog input).1: Weak Pullups disabled.\nBit6: XBARE: Cros sbar Enable.\n0: Crossbar disabled.1: Crossbar enabled.\nBit5: T1E: T1 Enable\n0: T1 unavailable at Port pin.1: T1 routed to Port pin.\nBit4: T0E: T0 Enable\n0: T0 unavailable at Port pin.1: T0 routed to Port pin.\nBit3: ECIE: PCA0 Exter nal Counter Input Enable\n0: ECI unavailable at Port pin.1: ECI routed to Port pin.\nBits2–0: PCA0ME: PCA Module I/O Enable Bits.\n000: All PCA I/O unavailable at Port pins.001: CEX0 routed to Port pin.010: CEX0, CEX1 ro uted to Port pins.\n011: CEX0, CEX1, CEX2 routed to Port pins.\n100: CEX0, CEX1, CEX2, CEX3  routed to Port pins.\n101: CEX0, CEX1, CEX2, CEX3, CEX4 routed to Port pins.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nWEAKPUD XBARE T1E T0E ECIE PCA0ME 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bi t2 Bit1 Bit0 SFR Address:\n0xE2\nC8051F310/1/2/3/4/5/6/7\n136 Rev. 1.8SFR Definition  13.3.  P0: Port0  \nSFR Definition  13.4.  P0MDIN: Port0 Input Mode  Bits7–0: P0.[7:0]\nWrite - Output appears on I/O pins per Crossbar Registers.0: Logic Low Output.1: Logic High Output (high impedance if corresponding P0MDOUT.n bit = 0).\nRead - Always reads ‘1’ if selected as analog  input in register P0MDIN. Directly reads Port \npin when configured as digital input.0: P0.n pin is logic low.1: P0.n pin is logic high.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nP0.7 P0.6 P0.5 P0.4 P0.3 P0.2 P0.1 P0.0 11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0x80\nBits7–0: Analog Input Configuration Bits for P0.7–P0.0 (respectively).\nPort pins configured as analog inputs have their weak pullup, digital driver, and digital receiver disabled. 0: Corresponding P0.n pin is co nfigured as an analog input.\n1: Corresponding P0.n pin is not configured as an analog input.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xF1\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 137SFR Definition  13.5.  P0MDOUT: Port0 Output Mode   \nSFR Definition  13.6.  P0SKIP: Port0 SkipBits7–0: Output Configuration Bits for P0.7–P0.0 (res pectively): ignored if corresponding bit in regis-\nter P0MDIN is logic 0.0: Corresponding P0.n Output is open-drain.1: Corresponding P0.n Output is push-pull. \uf020\nNote: When SDA and SCL appear on any of the Port I/O,  each are open-drain regardless of the value of \nP0MDOUT.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xA4\nBits7–0: P0SKIP[7:0]: Port0 Cr ossbar Skip Enable Bits.\nThese bits select Port pins to be skipped by the Crossbar Decoder. Port pins used as ana-log inputs (for ADC or Comparator) or used as special functions (VREF input, external oscil-\nlator circuit, CNVSTR input) should be skipped by the Crossbar.0: Corresponding P0.n pin is not skipped by the Crossbar.1: Corresponding P0.n pin is skipped by the Crossbar.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xD4\nC8051F310/1/2/3/4/5/6/7\n138 Rev. 1.8SFR Definition  13.7.  P1: Port1   \nSFR Definition  13.8.  P1MDIN: Port1 Input Mode  Bits7–0: P1.[7:0]\nWrite - Output appears on I/O pins per Crossbar Registers.0: Logic Low Output.1: Logic High Output (high impedance if corresponding P1MDOUT.n bit = 0).\nRead - Always reads ‘1’ if selected as analog  input in register P1MDIN. Directly reads Port \npin when configured as digital input.0: P1.n pin is logic low.1: P1.n pin is logic high. \uf020\nNote: Only P1.0–P1.5 are associated with Port pins on the C8051F316/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nP1.7 P1.6 P1.5 P1.4 P1.3 P1.2 P1.1 P1.0 11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0x90\nBits7–0: Analog Input Configuration Bits for P1.7-P1.0 (respectively).\nPort pins configured as analog inputs have their weak pullup, digital driver, and digital receiver disabled. 0: Corresponding P1.n pin is co nfigured as an analog input.\n1: Corresponding P1.n pin is not configured as an analog input. \uf020\nNote: Only P1.0–P1.5 are associated with Port pins on the C8051F316/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xF2\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 139SFR Definition  13.9.  P1MDOUT: Port1 Output Mode  \nSFR Definition  13.10.  P1SKIP: Port1 Skip  Bits7–0: Output Configuration Bits for P1.7-P1.0 (res pectively): ignored if corresponding bit in regis-\nter P1MDIN is logic 0.0: Corresponding P1.n Output is open-drain.1: Corresponding P1.n Output is push-pull. \uf020\nNote: Only P1.0–P1.5 are associated with Port pins on the C8051F316/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xA5\nBits7–0: P1SKIP[7:0]: Port1 Cr ossbar Skip Enable Bits.\nThese bits select Port pins to be skipped by the Crossbar Decoder. Port pins used as ana-log inputs (for ADC or Comparator) or used as special functions (VREF input, external oscil-\nlator circuit, CNVSTR input) should be skipped by the Crossbar.0: Corresponding P1.n pin is not skipped by the Crossbar.1: Corresponding P1.n pin is skipped by the Crossbar. \uf020\nNote: Only P1.0–P1.5 are associated with Port pins on  the C8051F316/7 devices. Hence, in C8051F316/7 \ndevices, user code writing to this SFR should always set P1SKIP[7:6] = 11b so that those two pins are skipped by the crossbar decoder.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n‘F310/1/2/3/4/5:\n00000000\n‘F316/7:\n11000000Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address:\n0xD5\nC8051F310/1/2/3/4/5/6/7\n140 Rev. 1.8SFR Definition  13.11.  P2: Port2   \nSFR Definition  13.12.  P2MDIN: Port2 Input Mode   Bits7–0: P2.[7:0]\nWrite - Output appears on I/O pins per Crossbar Registers.0: Logic Low Output.1: Logic High Output (high impedance if corresponding P2MDOUT.n bit = 0).\nRead - Always reads ‘1’ if selected as analog  input in register P2MDIN. Directly reads Port \npin when configured as digital input.0: P2.n pin is logic low.1: P2.n pin is logic high.\nNote: Only P2.0–P2.5 are associated with Port pins on the C8051F316/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nP2.7 P2.6 P2.5 P2.4 P2.3 P2.2 P2.1 P2.0 11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xA0\nBits7–0: Analog Input Configuration Bits for P2.7–P2.0 (respectively).\nPort pins configured as analog inputs have their weak pullup, digital driver, and digital receiver disabled. 0: Corresponding P2.n pin is co nfigured as an analog input.\n1: Corresponding P2.n pin is not configured as an analog input.\nNote: Only P2.0–P2.5 are associated with Port pins on the C8051F316/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xF3\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 141SFR Definition  13.13.  P2MDOUT: Port2 Output Mode   \nSFR Definition  13.14.  P2SKIP: Port2 SkipBits7–0: Output Configuration Bits for P2.7–P2.0 (res pectively): ignored if corresponding bit in regis-\nter P2MDIN is logic 0.0: Corresponding P2.n Output is open-drain.1: Corresponding P2.n Output is push-pull.\nNote: Only P2.0–P2.5 are associated with Port pins on the C8051F316/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xA6\nBits7–0: P2SKIP[7:0]: Port2 Cr ossbar Skip Enable Bits.\nThese bits select Port pins to be skipped by the Crossbar Decoder. Port pins used as ana-log inputs (for ADC or Comparator) or used as special functions (VREF input, external oscil-\nlator circuit, CNVSTR input) should be skipped by the Crossbar.0: Corresponding P2.n pin is not skipped by the Crossbar.1: Corresponding P2.n pin is skipped by the Crossbar.\nNote: Only P2.0–P2.3 are associated with the Crossbar.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - - - 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xD6\nC8051F310/1/2/3/4/5/6/7\n142 Rev. 1.8SFR Definition  13.15.  P3: Port3   \nSFR Definition  13.16.  P3MDIN: Port3 Input Mode  Bits7–0: P3.[7:0]\nWrite - Output appears on I/O pins.0: Logic Low Output.1: Logic High Output (high impedance if corresponding P3MDOUT.n bit = 0).\nRead - Always reads ‘1’ if selected as analog  input in register P3MDIN. Directly reads Port \npin when configured as digital input.0: P3.n pin is logic low.1: P3.n pin is logic high.\nNote: Only P3.0–P3.4 are associated with Port pins on C8051F310/2/4 devices ; Only P3.0 is associated with a \nPort pin on C8051F311/3/5/6/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nP3.7 P3.6 P3.5 P3.4 P3.3 P3.2 P3.1 P3.0 11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xB0\nBits7–5: UNUSED. Read = 000b; Write = don’t care.\nBits4–0: Input Configuration Bits for P3.4–P3.0 (respectively).\nPort pins configured as analog inputs have their weak pullup, digital driver, and digital receiver disabled. 0: Corresponding P3.n pin is co nfigured as an analog input.\n1: Corresponding P3.n pin is not configured as an analog input.\nNote: Only P3.0–P3.4 are associated with Port pins on C 8051F310/2/4 devices; Only P3.0 is associated with a \nPort pin on C8051F311/3/5/6/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - - 11111111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xF4\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 143SFR Definition  13.17.  P3MDOUT: Port3 Output Mode    \nTable  13.1.   Port I/O DC Electrical  Characteristics\nVDD = 2.7 to 3.6  V, –40 to +85  °C unless otherwise specified\nParameters Conditions Min Typ Max Units\nOutput High VoltageIOH = –3 mA, Port I/O push-pull\nIOH = –10 µA, Port I/O push-pull\nIOH = –10 mA, Port I/O push-pullVDD – 0.7\nVDD – 0.1\n——\n—\nVDD – 0.8—\n——V\nOutput Low VoltageI\nOL = 8.5 mA\nIOL = 10 µA\nIOL = 25 mA—\n—\n——\n—\n1.00.6\n0.1\n—V\nInput High Voltage 2.0 — — V\nInput Low Voltage — — 0.8 V\nInput Leakage CurrentWeak Pullup Off\nWeak Pullup On, VIN = 0 V—\n——\n25±1\n40µABits7–5: UNUSED. Read = 000b; Write - don’t care.\nBits4–0: Output Configuration Bits for P3.4–P3.0 (res pectively): ignored if corresponding bit in regis-\nter P3MDIN is logic 0.0: Corresponding P3.n Output is open-drain.1: Corresponding P3.n Output is push-pull.\nNote: Only P3.0–P3.4 are associated with Port pins on C8 051F310/2/4 devices; Only P3.0 is associated with a \nPort pin on C8051F311/3/5/6/7 devices.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n- - - 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xA7\nC8051F310/1/2/3/4/5/6/7\n144 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 14514. SMBus\nThe SMBus I/O interface is a two-wire, bi-directional serial bus. The SMBus is compliant with the System \nManagement Bus Specification, version  1.1, and compatible with the I2C serial bus. Reads and writes to \nthe interface by the system contro ller are byte oriented with the SMBu s interface autonom ously controlling \nthe serial transfer of the data. Data can be transferre d at up to 1/10th of the system clock as a master or \nslave (this can be faster than allowed by the SMBus specification, depending on the system clock used). A \nmethod of extending the clock-low duration is ava ilable to accommodate devices with different speed \ncapabilities on the same bus.\nThe SMBus interface may operate as a master and/or slave, and may function on a bus with multiple mas -\nters. The SMBus provides control of SDA (serial data),  SCL (serial clock) generation and synchronization, \narbitration logic, and START/STOP control and gene ration. Three SFRs are associated with the SMBus: \nSMB0CF configures the SM Bus; SMB0CN controls the status of  the SMBus; and SMB0DAT is the data \nregister, used for both transmitting and receiving SMBus data and slave addresses.\nFigure 14.1. SMBus Block DiagramData Path\nControlSMBUS CONTROL LOGIC\nC\nR\nO\nSS\nB\nA\nRSCLFILTER\nN\nSDA\nControlSCL\nControlArbitration\nSCL Synchronization\nIRQ GenerationSCL Generation (Master Mode)\nSDA ControlInterrupt\nRequest\nPort I/OSMB0CN\nS\nT\nAA\nC\nK\nR\nQA\nR\nB\nL\nO\nS\nTA\nC\nKS\nIT\nX\nM\nO\nD\nEM\nAS\nT\nE\nRS\nT\nO\n0100\n10\n11T0 Overflow\nT1 Overflow\nTMR2H Overflow\nTMR2L OverflowSMB0CF\nE\nN\nS\nM\nBI\nNHB\nU\nS\nYE\nX\nT\nH\nO\nL\nDS\nM\nB\nT\nO\nES\nM\nB\nF\nT\nES\nM\nB\nC\nS\n1S\nM\nB\nC\nS\n0\n01234567SMB0DATSDAFILTER\nN\nC8051F310/1/2/3/4/5/6/7\n146 Rev. 1.814.1. Supporting Documents\nIt is assumed the reader is fam iliar with or has access to th e following supporting documents:\n• The I2C-Bus and How to Use It (including  specifications), Philips Semiconductor.\n• The I2C-Bus Specification—Vers ion 2.0, Philips Semiconductor.\n• System Management Bus Specification— Version 1.1, SBS Implementers Forum.\n14.2. SMBus Configuration\nFigure  14.2 shows a typical SMBus configuration. The SMBu s specification allows any recessive voltage \nbetween 3.0  V and 5.0  V; different devices on the bus may operate at different voltage levels. The bi-direc -\ntional SCL (serial clock) and SDA (serial data) lines mu st be connected to a positive power supply voltage \nthrough a pullup resistor or similar circuit. Every devi ce connected to the bus must have an open-drain or \nopen-collector output for both the SCL and SDA lines, so  that both are pulled high (recessive state) when \nthe bus is free. The maximum number of devices on the bus is limited only by the requirement that the rise \nand fall times on the bus not exceed 300  ns and 1000  ns, respectively.\nFigure 14.2. Typical SMBus Configuration\n14.3. SMBus Operation\nTwo types of data transfers are possible: data transfers from a master transmitter to an addressed slave \nreceiver (WRITE), and data transfers from an addres sed slave transmitter to a master receiver (READ). \nThe master device initiates both types of data transfer s and provides the serial clock pulses on SCL. The \nSMBus interface may operate as a master or a slave,  and multiple master devices on the same bus are \nsupported. If two or more masters attempt to initiate  a data transfer simultaneously, an arbitration scheme \nis employed with a single master always winning the arbitr ation. Note that it is not necessary to specify one \ndevice as the Master in a system ; any device who transmits a STAR T and a slave address becomes the \nmaster for the duration of that transfer.\nA typical SMBus transaction consists of a START cond ition followed by an address byte (Bits7–1: 7-bit \nslave address; Bit0: R/W direction bit), one or more byte s of data, and a STOP condition. Each byte that is \nreceived (by a master or slave) must be acknow ledged (ACK) with a low SDA during a high SCL (see \nFigure  14.3). If the receiving device does  not ACK, the transmitting devi ce will read a NACK (not acknowl -\nedge), which is a high SDA during a high SCL.VDD = 5 V\nMaster \nDeviceSlave \nDevice 1Slave \nDevice 2VDD = 3 V VDD = 5 V VDD = 3 V\nSDA\nSCL\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 147The direction bit (R/W) occupies the least-significant bit position of the address byte. The direction bit is set \nto logic 1 to indicate a "READ" operation and cleared to logic 0 to indicate a "WRITE" operation. \nAll transactions are initiated by a master, with one or more addressed slave devices as the target.   The master generates the START condition and then transmit s the slave address and direction bit. If the trans\n-\naction is a WRITE operation from the master to the slave, the master tr ansmits the data a byte at a time \nwaiting for an ACK from the slave at the end of each  byte. For READ operations , the slave transmits the \ndata waiting for an ACK from the master at the end of each byte. At the end of the data transfer, the master generates a STOP condition to terminate the transaction and free the bus. \nFigure  14.3 illustrates a typical \nSMBus transaction.\nFigure 14.3. SMBus Transaction\n14.3.1. Arbitration\nA master may start a transfer only if the bus is free. Th e bus is free after a STOP condition or after the SCL \nand SDA lines remain high for a specified time (see Section “14.3.4.  SCL High (SMBus Free) Timeout” \non page  148). In the event that two or more devices attemp t to begin a transfer at the same time, an arbi -\ntration scheme is employed to force one master to gi ve up the bus. The master devices continue transmit -\nting until one attempts a HIGH wh ile the other transmits a LOW. Since the bus is  open-drain, the bus will \nbe pulled LOW. The master attemp ting the HIGH will detect a LOW SDA and lose the arbitration. The win -\nning master continues its transmission without inte rruption; the losing master becomes a slave and \nreceives the rest of the transfer if addressed. This  arbitration scheme is non-destructive: one device \nalways wins, and no data is lost.SLA6SDA\nSLA5-0 R/W D7 D6-0SCL\nSlave Address + R/W Data Byte START ACK NACK STOP\nC8051F310/1/2/3/4/5/6/7\n148 Rev. 1.814.3.2. Clock Low Extension\nSMBus provides a clock synchronizati on mechanism, similar to I2C, wh ich allows devices with different \nspeed capabilities to coexist on the bus. A clock-low extension is used du ring a transfer in order to allow \nslower slave devices to communica te with faster masters. The slave may temporarily hold the SCL line \nLOW to extend the clock low period, effectively decreasing the serial clock frequency.\n14.3.3. SCL Low Timeout\nIf the SCL line is held low by a slave device on the bus , no further communication is possible. Furthermore, \nthe master cannot force the SCL line high to correct th e error condition. To solve this problem, the SMBus \nprotocol specifies that devices participating in a tran sfer must detect any clock cy cle held low longer than \n25 ms as a “timeout” condition. Devices that have det ected the timeout condition must reset the communi -\ncation no later than 10  ms after detecting the timeout condition. \nWhen the SMBTOE bit in SMB0CF is set, Timer  3 is used to detect SCL low timeouts. Timer  3 is forced to \nreload when SCL is high, and allowed to count when SCL is low. With Timer  3 enabled and configured to \noverflow after 25  ms (and SMBTOE set), the Timer  3 interrupt service routine can be used to reset (disable \nand re-enable) the SMBus in the event of an SCL low timeout.\n14.3.4. SCL High (SMBus Free) Timeout\nThe SMBus specification stipulates  that if the SCL and SDA lines remain high for more that 50  µs, the bus \nis designated as free. When the SM BFTE bit in SMB0CF is set, the bu s will be considered free if SCL and \nSDA remain high for more than 10  SMBus clock source periods. If the SMBus is waiting to generate a \nMaster START, the START will be generated following this timeout. Note that a clock source is required for \nfree timeout detection, even in a slave-only implementation.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 14914.4. Using the SMBus\nThe SMBus can operate in both Master and Slave modes. The interface provides timing and shifting con -\ntrol for serial transfers; higher level protocol is dete rmined by user software. The SMBus interface provides \nthe following application-independent features:\n• Byte-wise serial data transfers\n• Clock signal generation on SCL (Master Mode only) and SDA data synchronization\n• Timeout/bus error recognition, as define d by the SMB0CF configuration register\n• START/STOP timing, detection, and generation\n• Bus arbitration\n• Interrupt generation\n• Status information\nSMBus interrupts are generated for each data byte or slave address that is transf erred. When transmitting, \nthis interrupt is generated after the ACK cycle so th at software may read the received ACK value; when \nreceiving data, this interrupt is generated before t he ACK cycle so that software may define the outgoing \nACK value. See Section “14.5.  SMBus Transfer Modes” on page  157 for more details on transmission \nsequences.\nInterrupts are also generated to indicate the beginning of a transfer when a master (START generated), or the end of a transfer when a slave (STOP detected) . Software should read the SMB0CN (SMBus Control \nregister) to find the cause of the SMBus inte rrupt. The SMB0CN register is described in \nSection \n“14.4.2.  SMB0CN Control Register” on page  153; Table  14.4 provides a quick SMB0CN decoding refer -\nence.\nSMBus configuration options include:\n• Timeout detection (SCL Low Timeout and/or Bus Free Timeout)\n• SDA setup and hold time extensions\n• Slave event enable/disable\n• Clock source selection\nThese options are selected in the SMB0CF register, as described in Section “14.4.1.  SMBus Configura -\ntion Register” on page  150.\nC8051F310/1/2/3/4/5/6/7\n150 Rev. 1.814.4.1. SMBus Configuration Register\nThe SMBus Configuration register (S MB0CF) is used to enable the SMBus Master and/or Slave modes, \nselect the SMBus clock source, and select the SMBus timing and timeout options . When the ENSMB bit is \nset, the SMBus is enabled for all master and slave events. Slave events may be disabled by setting the INH bit. With slave events inhibited, the SMBus in terface will still monitor the SCL and SDA pins; however, \nthe interface will NACK all received addresses and will not generate any slave inte rrupts. When the INH bit \nis set, all slave events will be inhibited following the ne xt START (interrupts will cont inue for the duration of \nthe current transfer).\nThe SMBCS1-0 bits select the SMBus clock source, which is used on ly when operating as a master or \nwhen the Free Timeout detection is enabled. When op erating as a master, overflows from the selected \nsource determine the absolute minimum SCL low and high times as defined in Equation  14.1. Note that the \nselected clock source may be shared by other peripherals  so long as the timer is left running at all times. \nFor example, Timer  1 overflows may generate the SMBus and UART baud rates simultaneously. Timer \nconfiguration is covered in Section “17.  Timers” on page  187.\nThe selected clock source should be configured to establish the minimum SCL High and Low times as per \nEquation  14.1. When the interface is operating as a master  (and SCL is not driven or extended by any \nother devices on the bus), the typica l SMBus bit rate is approximated by Equation  14.2.\n Table  14.1.  SMBus Clock Source Selection\nSMBCS1 SMBCS0 SMBus Clock Source\n0 0 Timer 0 Overflow\n0 1 Timer 1 Overflow1 0 Timer 2 High Byte Overflow\n1 1 Timer 2 Low Byte Overflow\nEquation 14.1. Minimum SC L High and Low Times\nTHighMinTLowMin1\nfClockSourceOverflow---------------- ------------------ ------------ ==\nEquation 14.2. Typi cal SMBus Bit Rate\nBitRatefClockSourceOverflow\n3--------------- ----------------- ------------- - =\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 151Figure  14.4 shows the typical SCL generation described by Equation  14.2. Notice that THIGH is typically \ntwice as large as TLOW. The actual SCL output may vary due to other devices on the bus (SCL may be \nextended low by slower slave devices, or driven low by contending master devices). The bit rate when \noperating as a master will never exce ed the limits defined by equation Equation  14.1.\nFigure 14.4. Typical SMBus SCL Generation\nSetting the EXTHOLD bit extends the minimum setup and hold times for the SDA line. The minimum SDA \nsetup time defines the absolute mini mum time that SDA is stable before SCL transitions from low-to-high. \nThe minimum SDA hold time defines the absolute minimum time that the current SDA value remains stable after SCL transitions from high-to-low. EXTHOLD should  be set so that the minimum setup and hold times \nmeet the SMBus Specification requirements of 250\n ns and 300  ns, respectively. Table  14.2 shows the min -\nimum setup and hold times for the two EXTHOLD settings. Setup and hold time extensions are typically necessary when SYSCLK is above 10\n MHz.\nWith the SMBTOE bit set, Timer  3 should be configured to overflow after 25  ms in order to detect SCL low \ntimeouts (see Section “14.3.3.  SCL Low Timeout” on page  148). The SMBus interface will force Timer  3 \nto reload while SCL is high, and allow Timer  3 to count when SCL is low. The Timer  3 interrupt service rou -\ntine should be used to reset SMBus communication by disabling and re-enabling the SMBus.\nSMBus Free Timeout detection can be enabled by setting the SMBFTE bit. When this bit is set, the bus will \nbe considered free if SDA and SCL remain high for more than 10  SMBus clock source periods (see \nFigure  14.4). When a Free Timeout is dete cted, the interface will respond as if a STOP was detected (an \ninterrupt will be generat ed, and STO will be set).Table  14.2.  Minimum SDA Setup and Hold Times\nEXTHOLD Minimum SDA Setup Time Minimum SDA Hold Time\n0Tlow – 4 system clocks\nOR\n1 system clock + s/w delay*3 system clocks\n1 11 system clocks 12 system clocks\n*Note:  Setup Time for ACK bit transmissions and the MSB of all data transfers. The s/w \ndelay occurs between the time SMB0DAT or  ACK is written and when SI is cleared. \nNote that if SI is cleared in the same wr ite that defines the ou tgoing ACK value, s/w \ndelay is zero.SCLTimer Source\nOverflows\nSCL High Timeout TLowTHigh\nC8051F310/1/2/3/4/5/6/7\n152 Rev. 1.8SFR Definition  14.1.  SMB0CF: SMBus Clock/Configuration  \nBit7: ENSMB: SMBus Enable.\nThis bit enables/disables the SMBus interface. When enabled, the interface constantly mon-\nitors the SDA and SCL pins. 0: SMBus interface disabled.1: SMBus interface enabled.\nBit6: INH: SMBus Slave Inhibit.\nWhen this bit is set to logic 1, the SMBus does not generate an interrupt when slave events occur. This effectively removes the SMBus slave from the bus. Master Mode interrupts are not affected.0: SMBus Slave Mode enabled.1: SMBus Slave Mode inhibited.\nBit5: BUSY: SMBus Busy Indicator.\nThis bit is set to logic 1 by hardware when a tran sfer is in progress. It  is cleared to logic 0 \nwhen a STOP or free-timeout is sensed.\nBit4: EXTHOLD: SMBus Setup and Hold Time Extension Enable.\nThis bit controls the SDA setup and hold times according to Table 14.2. \n0: SDA Extended Setup and Hold Times disabled.1: SDA Extended Setup and Hold Times enabled.\nBit3: SMBTOE: SMBus SCL Ti meout Detection Enable.\nThis bit enables SCL low timeout detection. If set to logic 1,  the SMBus forces Timer 3 to \nreload while SCL is high and allows Timer 3 to count when SCL goes low. If Timer 3 is con-\nfigured in split mode (T3SPLIT is  set), only the high byte of Ti mer 3 is held in reload while \nSCL is high. Timer 3 should be programmed to generate interrupts at 25 ms, and the Timer 3 interrupt service routine should reset SMBus communication.\nBit2: SMBFTE: SMBus Free Timeout Detection Enable.\nWhen this bit is set to logic 1, the bus will be considered free if SCL and SDA remain high for \nmore than 10 SMBus cl ock source periods.\nBits1–0: SMBCS1-SMBCS0: SMBu s Clock Source Selection.\nThese two bits select the SMBus clock source , which is used to generate the SMBus bit \nrate. The selected device should be configured according to Equation 14.1.R/W R/W R R/W R/W R/W R/W R/W Reset Value\nENSMB INH BUSY EXTHOLD SMBTOE SMBFTE SMBCS1 SMBCS0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xC1\nSMBCS1 SMBCS0 SMBus Clock Source\n0 0 Timer 0 Overflow\n0 1 Timer 1 Overflow1 0 Timer 2 High Byte Overflow\n1 1 Timer 2 Low Byte Overflow\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 15314.4.2. SMB0CN Control Register\nSMB0CN is used to control the interface and to provide status information (see SFR Definition 14.2 ). The \nhigher four bits of SMB0CN (MASTER, TXMODE, STA, and STO) form a status vector that can be used to \njump to service routines. MASTER and TXMODE indi cate the master/slave state and transmit/receive \nmodes, respectively. \nSTA and STO indicate that a START and/or STOP ha s been detected or generated since the last SMBus \ninterrupt. STA and STO are also used to generate START and STOP conditions when operating as a mas -\nter. Writing a ‘1’ to STA will cause the SMBus interfac e to enter Master Mode and generate a START when \nthe bus becomes free (STA is not cleared by hardware after the START is generated). Writing a ‘1’ to STO while in Master Mode will cause the interface to generate a STOP and end the current transfer after the \nnext ACK cycle. If STO and STA are both set (while in Master Mode),  a STOP followed by a START will be \ngenerated.\nAs a receiver, writing the ACK bit defines the outgoing  ACK value; as a transmitter, reading the ACK bit \nindicates the value received on the last ACK cycle. ACKRQ is set each  time a byte is received, indicating \nthat an outgoing ACK value is needed. When ACKRQ is  set, software should write the desired outgoing \nvalue to the ACK bit before  clearing SI. A NACK will be generated if so ftware does not write the ACK bit \nbefore clearing SI. SDA will reflec t the defined ACK value immediately following a write to the ACK bit; \nhowever SCL will remain low un til SI is cleared. If a received slave address is not acknowledged, further \nslave events will be ignored unt il the next START is detected.\nThe ARBLOST bit indicates that the interface has lost an arbitration. This may occur anytime the interface \nis transmitting (master or slave). A lost arbitratio n while operating as a slave indicates a bus error condi -\ntion. ARBLOST is cleared by hardware each time SI is cleared.\nThe SI bit (SMBus Interrupt Flag) is set at the beginnin g and end of each transfer, after each byte frame, or \nwhen an arbitration is lost; see Table  14.3 for more details. \nImportant Note About the SI Bit:  The SMBus interface is stalled while SI  is set; thus SCL is held low, and \nthe bus is stalled until software clears SI. \nTable  14.3 lists all sources for hardware changes to the SMB0CN bits. Refer to Table  14.4 for SMBus sta -\ntus decoding using the SMB0CN register. \nC8051F310/1/2/3/4/5/6/7\n154 Rev. 1.8SFR Definition  14.2.  SMB0CN: SMBus Control\nBit7: MASTER: SMBus Master/Slave Indicator.\nThis read-only bit indicates when the SMBus is operating as a master.0: SMBus operating in Slave Mode.1: SMBus operating in Master Mode.\nBit6: TXMODE: SMBus Transmit Mode Indicator. \nThis read-only bit indicates when the SMBus is operating as a transmitter. 0: SMBus in Receiver Mode.1: SMBus in Transmitter Mode.\nBit5: STA: SMBus Start Flag. \nWrite:0: No Start generated.1: When operating as a master, a START condition is transmitted if the bus is free (If the bus \nis not free, the START is transmitted after a ST OP is received or a timeout is detected). If \nSTA is set by software as an active Mast er, a repeated START will be  generated after the \nnext ACK cycle.Read:0: No Start or repeated Start detected.1: Start or repeated Start detected.\nBit4: STO: SMBus Stop Flag. \nWrite:0: No STOP condition is transmitted.1: Setting STO to logic 1 causes a STOP condi tion to be transmitted after the next ACK \ncycle. When the STOP condition is generated, hardware clears STO to logic 0. If both STA \nand STO are set, a STOP condition is transmitted followed by a START condition.Read:0: No Stop condition detected.1: Stop condition detected (if in Slave Mode) or pending (if in Master Mode).\nBit3: ACKRQ: SMBus Ac knowledge Request\nThis read-only bit is set to logic 1 when the SMBus has received a byte and needs the ACK bit to be written with the correct ACK response value.\nBit2: ARBLOST: SMBus Arbitration Lost Indicator.\nThis read-only bit is set to logic 1 when the SMBus loses arbitration while operating as a transmitter. A lost arbitration while a slave indicates a bus error condition.\nBit1: ACK: SMBus Acknowledge Flag. \nThis bit defines the out-going ACK level and re cords incoming ACK leve ls. It should be writ-\nten each time a byte is rece ived (when ACKRQ=1), or read after each byte is transmitted.\n0: A "not acknowledge" has bee n received (if in Transmitter Mode) OR will be transmitted (if \nin Receiver Mode).1: An "acknowledge" has been re ceived (if in Transmitter Mode) OR will be transmitted (if in \nReceiver Mode).\nBit0: SI: SMBus Interrupt Flag.\nThis bit is set by hardware under the conditions  listed in Table 14.3. SI must be cleared by \nsoftware. While SI is set, SCL is held low and the SMBus is stalled.R R R/W R/W R R R/W R/W Reset Value\nMASTER TXMODE STA STO ACKRQ ARBLOST ACK SI 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 Bit Addressable\nSFR Address: 0xC0\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 155Table  14.3.  Sources for Hardware  Changes to SMB0CN\nBit Set by Hardware When... C leared by Hardware When...\nMASTER• A START is generated. • A STOP is generated.\n• Arbitration is lost.\nTXMODE• START is generated.\n• SMB0DAT is written before the start of an \nSMBus frame.• A START is detected.\n• Arbitration is lost.\n• SMB0DAT is not written before the \nstart of an SMBus frame.\nSTA• A START followed by an address byte is \nreceived.• Must be cleared by software.\nSTO• A STOP is detected while addressed as a \nslave.\n• Arbitration is lost due to a detected STOP.• A pending STOP is generated.\nACKRQ• A byte has been received and an ACK \nresponse value is needed.• After each ACK cycle.\nARBLOST• A repeated START is detected as a MASTER \nwhen STA is low (unwanted repeated START).\n• SCL is sensed low while attempting to gener -\nate a STOP or repeated START condition.\n• SDA is sensed low while  transmitting a ‘1’ \n(excluding ACK bits).• Each time SI  is cleared.\nACK• The incoming ACK value is low (ACKNOWL -\nEDGE).• The incoming ACK value is high (NOT \nACKNOWLEDGE).\nSI• A START has been generated.\n• Lost arbitration.\n• A byte has been transmitted and an \nACK/NACK received.\n• A byte has been received.\n• A START or repeated START followed by a \nslave address + R/W has been received. \n• A STOP has been received. • Must be cleared by software.\nC8051F310/1/2/3/4/5/6/7\n156 Rev. 1.814.4.3. Data Register\nThe SMBus Data register SMB0DAT holds a byte of serial data to be transmitted or one that has just been \nreceived. Software may safely read or write to the data register when the SI flag is set. Software should not \nattempt to access the SMB0DAT register when the SMBus is enabled and the SI flag is cleared to logic  0, \nas the interface may be in the process of shifting  a byte of data into or out of the register. \nData in SMB0DAT is always shifted ou t MSB first. After a byte has been received, the first bit of received \ndata is located at the MSB of SMB0DAT. While data is  being shifted out, data on  the bus is simultaneously \nbeing shifted in. SMB0DAT always contains the last data byte present on the bus. In the event of lost arbi -\ntration, the transition from master transmitter to slave receiver is made with the correct data or address in \nSMB0DAT.\nSFR Definition  14.3.  SMB0DAT: SMBus Data\nBits7–0: SMB0DAT: SMBus Data.\nThe SMB0DAT register contains a byte of data to be transmitted on the SMBus serial inter-face or a byte that has just been received on  the SMBus serial interface. The CPU can read \nfrom or write to this register whenever the SI  serial interrupt flag (SMB0CN.0) is set to \nlogic 1. The serial data in the register remains stable as long as the SI flag is set. When the SI flag is not set, the system  may be in the process of shifting data in/out and the CPU \nshould not atte mpt to access this register.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xC2\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 15714.5. SMBus Transfer Modes\nThe SMBus interface may be configured  to operate as master and/or slave. At any particular time, it will be \noperating in one of the following four modes: Master Transmitter, Master Receiver, Slave Transmitter, or Slave Receiver. The SMBus interface enters Master Mo de any time a START is generated, and remains in \nMaster Mode until it loses an arbitration or generates  a STOP. An SMBus interrupt is generated at the end \nof all SMBus byte frames; however, note that the inte rrupt is generated before the ACK cycle when operat\n-\ning as a receiver, and after the ACK cycle when operating as a transmitter.\n14.5.1. Master Transmitter Mode\nSerial data is transmitted on SDA while the serial cl ock is output on SCL. The SMBus interface generates \nthe START condition and transmits the first byte cont aining the address of the target slave and the data \ndirection bit. In this case the da ta direction bit (R/W) will be logic  0 (WRITE). The master then transmits \none or more bytes of serial data. After each byte is  transmitted, an acknowled ge bit is generated by the \nslave. The transfer is en ded when the STO bit is set and a STOP is  generated. Note that the interface will \nswitch to Master Receiver  Mode if SMB0DAT is not written follo wing a Master Transmitter interrupt. \nFigure  14.5 shows a typical Master Transmitter sequence. Two transmit data bytes are shown, though any \nnumber of bytes may be transmitted. Notice that the ‘data byte transferred’ interrupts occur  after  the ACK \ncycle in this mode.\nFigure 14.5. Typical Mast er Transmitter SequenceA A A S W P Data Byte Data Byte SLA\nS = START\nP = STOPA = ACK\nW = WRITE\nSLA = Slave AddressReceived by SMBusInterface\nTransmitted by\nSMBus InterfaceInterrupt Interrupt Interrupt Interrupt\nC8051F310/1/2/3/4/5/6/7\n158 Rev. 1.814.5.2. Master Receiver Mode\nSerial data is received on SDA while the serial clock is output on SCL. The SMBus interface generates the \nSTART condition and transmits the first byte containing  the address of the target slave and the data direc -\ntion bit. In this case the da ta direction bit (R/W) will be logic  1 (READ). Serial data is then received from the \nslave on SDA while the SMBus outputs the serial clock.  The slave transmits one or more bytes of serial \ndata. After each byte is received, ACKRQ is set to ‘1’ and an interrupt is generated. Software must write \nthe ACK bit (SMB0CN.1) to define the outgoing ackno wledge value (Note: writing a ‘1’ to the ACK bit gen -\nerates an ACK; writing a ‘0’ genera tes a NACK). Software should write a ‘0’ to the ACK bit after the last \nbyte is received, to transmit a NA CK. The interface exits Master Receiver Mode after the STO bit is set and \na STOP is generated. Note that the interface will switch to Master Tr ansmitter Mode if SMB0DAT is written \nwhile an active Master Receiver. Figure  14.6 shows a typical Master Rece iver sequence. Two received \ndata bytes are shown, though any number of bytes may be received. Notice that the ‘data byte transferred’ \ninterrupts occur before  the ACK cycle in this mode.\nFigure 14.6. Typical M aster Receiver SequenceData Byte Data Byte A N A S R P SLA\nS = START\nP = STOPA = ACK\nN = NACK\nR = READSLA = Slave AddressReceived by SMBusInterface\nTransmitted by\nSMBus InterfaceInterrupt Interrupt Interrupt Interrupt\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 15914.5.3. Slave Receiver Mode\nSerial data is received on SDA and the clock is re ceived on SCL. When slave events are enabled (INH = \n0), the interface enters Slave Receiver Mode when a START followed by a slave address and direction bit (WRITE in this case) is received. Upon entering Slave Receiver Mode, an interrupt is generated and the \nACKRQ bit is set. Software  responds to the received slave address with an ACK, or ignores the received \nslave address with a NACK. If the rece ived slave address is ignored, slav e interrupts will be inhibited until \nthe next START is detected. If the received slave addr ess is acknowledged, zero or more data bytes are \nreceived. Software must write the ACK bit after each received byte to ACK or NACK the received byte. The \ninterface exits Slave Receiver Mode  after receiving a STOP. Note that  the interface will switch to Slave \nTransmitter Mode if SMB0 DAT is written while an active Slave Receiver. \nFigure  14.7 shows a typical Slave \nReceiver sequence. Two received data bytes are show n, though any number of bytes may be received. \nNotice that the ‘data byte transferred’ interrupts occur before  the ACK cycle in this mode.\nFigure 14.7. Typical Sl ave Receiver SequenceP W SLA S Data Byte Data Byte A A A\nS = START\nP = STOP\nA = ACK\nW = WRITESLA = Slave AddressReceived by SMBusInterface\nTransmitted by\nSMBus InterfaceInterrupt Interrupt InterruptInterrupt\nC8051F310/1/2/3/4/5/6/7\n160 Rev. 1.814.5.4. Slave Transmitter Mode\nSerial data is transmitted on SDA and the clock is re ceived on SCL. When slave events are enabled (INH \n= 0), the interface enters Slave Receiver Mode (to re ceive the slave address) when a START followed by a \nslave address and direction bit (READ in this case) is received. Upon entering Slave Transmitter Mode, an \ninterrupt is generated and the ACKR Q bit is set. Software responds to the received slave address with an \nACK, or ignores the received slave address with a NA CK. If the received slave address is ignored, slave \ninterrupts will be inhibited un til a START is detected. If the received  slave address is acknowledged, data \nshould be written to SMB0DAT to be transmitted. The interface enters Slave Transmitter Mode, and trans -\nmits one or more bytes of data. After each byte is tr ansmitted, the master sends an acknowledge bit; if the \nacknowledge bit is an ACK, SMB0DAT should be writt en with the next data byte. If the acknowledge bit is \na NACK, SMB0DAT should not be written to before SI is cleared (Note: an error condition may be gener -\nated if SMB0DAT is written following a received NACK  while in Slave Transmitter Mode). The interface \nexits Slave Transmitter Mode after receiving a STOP. No te that the interface will sw itch to Slave Receiver \nMode if SMB0DAT is not written fo llowing a Slave Tran smitter interrupt. Figure  14.8 shows a typical Slave \nTransmitter sequence. Two transmitted data bytes ar e shown, though any number of bytes may be trans -\nmitted. Notice that the ‘data byte  transferred’ interrupts occur after  the ACK cycle in this mode.\nFigure 14.8. Typical Sl ave Transmitter SequenceP R SLA S Data Byte Data Byte A N A\nS = START\nP = STOPN = NACKR = READSLA = Slave AddressReceived by SMBusInterface\nTransmitted by\nSMBus InterfaceInterrupt Interrupt InterruptInterrupt\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 16114.6. SMBus Status Decoding\nThe current SMBus status can be easily decoded usin g the SMB0CN register. In the table below, STATUS \nVECTOR refers to the four upper bits of SMB0CN : MASTER, TXMODE, STA, and STO. Note that the \nshown response options are only the typical response s; application-specific pr ocedures are allowed as \nlong as they conform to the SMBus specification. Hig hlighted responses are allowed but do not conform to \nthe SMBus specification.\nTable  14.4.  SMBus Status Decoding  ModeValues Read\nCurrent SMbus State Typical Response OptionsValues \nWrittenStatus \nVector\nACKRQ\nARBLOST\nACK\nSTA\nSTO\nACKMaster Transmitter1110 0 0 XA master START was \uf020\ngenerated.Load slave address + R/W into SMB0DAT.0 0X\n1100000A master data or address byte \nwas transmitted; NACK received.Set STA to restart transfer. 1 0X\nAbort transfer. 0 1X\n001A master data or address byte was transmitted; ACK received.Load next data byte into SMB0 -\nDAT.0 0X\nEnd transfer with STOP. 0 1X\nEnd transfer with STOP and start another transfer.1 1X\nSend repeated START. 1 0X\nSwitch to Master  Receiver Mode \n(clear SI without  writing new data \nto SMB0DAT).0 0XMaster Receiver1000 1 0 XA master data byte was received; ACK requested.Acknowledge received byte; Read \nSMB0DAT.0 0 1\nSend NACK to indicate last byte, \nand send STOP.0 1 0\nSend NACK to indicate last byte, and send STOP followed by START.\n1 1 0\nSend ACK followed by repeated START.1 0 1\nSend NACK to indicate last byte, and send repeated START.1 0 0\nSend ACK and switch to Master Transmitter Mode (write to SMB0\n-\nDAT before clearing SI).0 0 1\nSend NACK and switch to Master Transmitter Mode (write to SMB0\n-\nDAT before clearing SI).0 0 0\nC8051F310/1/2/3/4/5/6/7\n162 Rev. 1.8\nSlave Transmitter0100000A slave byte was transmitted; \nNACK received.No action required (expecting STOP condition).0 0X\n001A slave byte was transmitted; ACK received. Load SMB0DAT with next data byte to transmit.0 0X\n01XA Slave byte was transmitted; error detected. No action required (expecting Master to end transfer).0 0X\n0101 0 X XA STOP was detected while an addressed Slave Transmit\n-\nter.No action required (transfer com -\nplete).0 0XSlave Receiver001010XA slave address was \nreceived; ACK requested.Acknowledge received address. 0 0 1\nDo not acknowledge received address.0 0 0\n11XLost arbitration as master; slave address received; ACK requested.Acknowledge received address. 0 0 1\nDo not acknowledge received address.0 0 0\nReschedule failed transfer; do not acknowledge received address.1 0 0\n0010 0 1 XLost arbitration while attempt -\ning a repeated START.Abort failed transfer. 0 0X\nReschedule failed transfer. 1 0X\n000111XLost arbitration while attempt -\ning a STOP.No action required (transfer com -\nplete/aborted).0 0 0\n00XA STOP was detected while \nan addressed slave receiver.No action required (transfer com -\nplete).0 0X\n01XLost arbitration due to a detected STOP. Abort transfer. 0 0X\nReschedule failed transfer. 1 0X\n000010XA slave byte was received; \nACK requested.Acknowledge received byte; Read SMB0DAT.0 0 1\nDo not acknowledge received byte.0 0 0\n11XLost arbitration while transmit -\nting a data byte as master.Abort failed transfer. 0 0 0\nReschedule failed transfer. 1 0 0Table 14.4. SMBus Status  Decoding  (Continued)ModeValues Read\nCurrent SMbus State Typical Response OptionsValues \nWrittenStatus \nVector\nACKRQ\nARBLOST\nACK\nSTA\nSTO\nACK\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 16315. UART0\nUART0 is an asynchronous, full duplex serial port offering modes  1 and 3 of the standard 8051 UART. \nEnhanced baud rate support allows a wide range of clock sources to generate standard baud rates (details in \nSection “15.1.  Enhanced Baud Rate Generation” on page  164). Received data buffering allows \nUART0 to start reception of a second incoming data byte before software has finished reading the previous \ndata byte. \nUART0 has two associated SFRs: Serial Control Regist er 0 (SCON0) and Serial Data Buffer 0 (SBUF0). \nThe single SBUF0 location provides access to both transmit and receive registers. Writes to SBUF0\nalways access the Transmit register. Reads of SBUF0 always access the buffered Receive register; it is not possible to  read data from the Transmit register.\nWith UART0 interrupts enabled, an interrupt is generate d each time a transmit is completed (TI0 is set in \nSCON0), or a data byte has been received (RI0 is  set in SCON0). The UART 0 interrupt flags are not \ncleared by hardware when the CPU vectors to the interr upt service routine. They must be cleared manually \nby software, allowing software to determine the cause of  the UART0 interrupt (transmit complete or receive \ncomplete).\nFigure 15.1. UART0 Block DiagramUART Baud\nRate Generator\nRI    SCON\nRITIRB8TB8RENMCESMODETx Control\nTx Clock\nSendSBUF\n(TX Shift)\nStartDataWrite to\nSBUF\nCrossbarTX\nShiftZero Detector\nTx IRQSET\nQ D\nCLR\nStop BitTB8SFR Bus\nSerial\nPort\nInterruptTI\nPort I/O\nRx Control\nStartRx Clock\nLoad\nSBUF Shift 0x1FF RB8Rx IRQ\nInput Shift Register\n(9 bits)\nLoad SBUF\nRead\nSBUF\nSFR Bus\nCrossbarRXSBUF\n(RX Latch)\nC8051F310/1/2/3/4/5/6/7\n164 Rev. 1.815.1. Enhanced Baud Rate Generation\nThe UART0 baud rate is generated by Timer  1 in 8-bit auto-reload mode. The TX clock is generated by \nTL1; the RX clock is generated by a copy of TL1 (shown as RX Timer in Figure  15.2), which is not user-\naccessible. Both TX and RX Timer overflows are divid ed by two to generate the TX and RX baud rates. \nThe RX Timer runs when Timer  1 is enabled, and uses the same reload value (TH1). However, an \nRX Timer reload is forced when a START condition is de tected on the RX pin. Th is allows a receive to \nbegin any time a START is detected, independent of the TX  Timer state.\nFigure 15.2. UART0 Baud Rate Logic\nTimer  1 should be configured for Mode  2, 8-bit auto-reload (see Section “17.1.3.  Mode 2: 8-bit \nCounter/Timer with Auto-Reload” on page  189). The Timer  1 reload value should be set so that over -\nflows will occur at two times the desired UA RT baud rate frequency. Note that Timer  1 may be clocked by \none of six source s: SYSCLK, SYSCLK  / 4, SYSCLK  / 12, SYSCLK  / 48, the external oscillator clock  / 8, or \nan external input T1. For any given Timer  1 clock source, the UART0 baud rate is determined by \nEquation  15.1.\nWhere T1CLK is the frequency of the clock supplied to Timer  1, and T1H is the high byte of Timer 1 (reload \nvalue). Timer  1 clock frequency is selected as described in Section “17.  Timers” on page  187. A quick \nreference for typical baud rates and system clock frequencies is given in Table  15.1 through Table  15.6. \nNote that the internal os cillator may still genera te the system clock wh en the external oscillator is driving \nTimer 1. RX TimerStart\nDetectedOverflow\nOverflowTH1TL1 TX Clock 2\nRX Clock 2Timer 1 UART\nEquation 15.1. UART0 Baud Rate\nUartBaudRateT1CLK\n256 T1H –\uf028\uf029----------------- ------------- -1\n2---\uf0b4 =\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 16515.2. Operational Modes\nUART0 provides standard asynchronous, full duplex communication. The UART mode (8-bit or 9-bit) is \nselected by the S0MODE bit (SCON0.7). Typical UART connection options are shown in Figure  15.3.\nFigure 15.3. UART Interconnect Diagram\n15.2.1. 8-Bit UART\n8-Bit UART mode uses a total of 10  bits per data byte: one start bit, eight data bits (LSB first), and one stop \nbit. Data are transmitted LSB first from the TX0 pin a nd received at the RX0 pin. On receive, the eight data \nbits are stored in SBUF0 and the stop bit goes into RB80 (SCON0.2). \nData transmission begins wh en software writes a data byte to th e SBUF0 register. The TI0 Transmit Inter -\nrupt Flag (SCON0.1) is set at the end of the transmi ssion (the beginning of the stop-bit time). Data recep -\ntion can begin any time after the REN0 Rece ive Enable bit (SCON0.4) is set to logic  1. After the stop bit is \nreceived, the data byte w ill be loaded into the SBUF0 re ceive register if the follo wing conditions are met: \nRI0 must be logic  0, and if MCE0 is logic  1, the stop bit must be logic  1. In the event of a receive data over -\nrun, the first received 8  bits are latched into the SBUF0 receive register and the following overrun data bits \nare lost.\nIf these conditions are met, the eight bits of data is stor ed in SBUF0, the stop bit is stored in RB80 and the \nRI0 flag is set. If these conditio ns are not met, SBUF0 and RB80 will no t be loaded and the RI0 flag will not \nbe set. An interrupt will occur if enabled when ei ther TI0 or RI0 is set.\nFigure 15.4. 8-Bit U ART Timing DiagramORRS-232C8051FxxxRS-232\nLEVEL\nXLTRTX\nRX\nC8051Fxxx\nRXTX\nMCU\nRXTX\nD1 D0 D2 D3 D4 D5 D6 D7START\nBITMARK\nSTOP\nBIT\nBIT TIMES\nBIT SAMPLINGSPACE\nC8051F310/1/2/3/4/5/6/7\n166 Rev. 1.815.2.2. 9-Bit UART \n9-bit UART mode uses a total of eleven  bits per data byte: a start bit, 8  data bits (LSB first), a programma -\nble ninth data bit, and a stop bit. The state of the nint h transmit data bit is determ ined by the value in TB80\n(SCON0.3), which is assigned by user software. It can be assigned the value of the parity flag (bit P in reg -\nister PSW) for error detection, or used in multiprocessor communications. On receive, the ninth data bit \ngoes into RB80 (SCON0.2) and the stop bit is ignored. \nData transmission begins when an instruction writes a data byte to the SBUF0 register. The TI0 Transmit \nInterrupt Flag (SCON0.1) is set at the end of the tran smission (the beginning of the stop-bit time). Data \nreception can begin any time after the REN0 Receive En able bit (SCON0.4) is set to ‘1’. After the stop bit \nis received, the data byte will be lo aded into the SBUF0 receiv e register if the followin g conditions  are met: \n(1) RI0 must be logic  0, and (2) if MCE0 is logic  1, the 9th bit must be logic  1 (when MCE0 is logic  0, the \nstate of the ninth data bit is unimportant). If these cond itions are met, the eight bits of data are stored in \nSBUF0, the ninth bit is stored in RB80, and the RI0 flag is set to ‘1’. If the above conditions are not met, \nSBUF0 and RB80 will not be  loaded and the RI0 flag will not be set to ‘1’. A UA RT0 interrupt will occur if \nenabled when either TI0 or RI0 is set to ‘1’.\nFigure 15.5. 9-Bit U ART Timing DiagramD1 D0 D2 D3 D4 D5 D6 D7START\nBITMARK\nSTOP\nBIT\nBIT TIMES\nBIT SAMPLINGSPACED8\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 16715.3. Multiprocessor Communications\n9-Bit UART mode supports multiprocessor communication between a master processor and one or more \nslave processors by special use of t he ninth data bit. When a master processor wants to transmit to one or \nmore slaves, it first sends an address byte to select th e target(s). An address byte differs from a data byte \nin that its ninth bit is logic  1; in a data byte, the ninth bit is always set to logic  0.\nSetting the MCE0 bit (SCON0.5) of a slave processor co nfigures its UART such that when a stop bit is \nreceived, the UART will gener ate an interrupt only if  the ninth bit is logic  1 (RB80 = 1) signifying an address \nbyte has been received. In the UA RT interrupt handler, software will compare the received address with \nthe slave\'s own assigned 8-bit addre ss. If the addresses match, the slav e will clear its MCE0 bit to enable \ninterrupts on the reception of the following data byte (s). Slaves that weren\'t addressed leave their MCE0\nbits set and do not generate interrupts on the reception of the following data bytes, thereby ignoring the data. Once the entire message is received, the addres sed slave resets its MCE0 bit to ignore all transmis\n-\nsions until it receives the next address byte.\nMultiple addresses can be assigned to a single sl ave and/or a single address can be assigned to multiple \nslaves, thereby enabling "broadcast" transmissions to more than one slave simultaneously. The master \nprocessor can be configured to receive all transmissi ons or a protocol can be implemented such that the \nmaster/slave role is tem porarily reversed to enable half-duplex transmission between the original master \nand slave(s).\nFigure 15.6. UART Multi-Processor Mode Interconnect DiagramMaster\nDeviceSlave\nDevice\nTX RX RX TXSlave\nDevice\nRX TXSlave\nDevice\nRX TXV+\nC8051F310/1/2/3/4/5/6/7\n168 Rev. 1.8SFR Definition  15.1.  SCON0: Serial Port 0 Control\nBit7: S0MODE: Serial Port 0 Operation Mode.\nThis bit selects the UART0 Operation Mode.0: 8-bit UART with Variable Baud Rate.1: 9-bit UART with Variable Baud Rate.\nBit6: UNUSED. Read = 1b . Write = don’t care.\nBit5: MCE0: Multiprocessor Communication Enable.\nThe function of this bit is dependent on the Serial Port 0 Operation Mode.\nS0MODE = 0: Checks for valid stop bit.\n0: Logic level of stop bit is ignored.1: RI0 will only be activated if  stop bit is logic level 1.\nS0MODE = 1: Multiprocesso r Communications Enable.\n0: Logic level of ninth bit is ignored.1: RI0 is set and an interrupt is generated only when the ninth bit is logic 1.\nBit4: REN0: Receive Enable. \nThis bit enables/disables the UART receiver.0: UART0 reception disabled.1: UART0 reception enabled.\nBit3: TB80: Ninth Transmission Bit. \nThe logic level of this bit will be assigned to the ninth transmission bit in 9-bit UART Mode. It \nis not used in 8-bit UART Mode.   Set or cleared by software as required.\nBit2: RB80: Ninth Receive Bit. \nRB80 is assigned the value of the STOP bit in Mode 0; it is assigned the value of the 9th \ndata bit in Mode 1.\nBit1: TI0: Transmit Interrupt Flag. \nSet by hardware when a byte of data has been  transmitted by UART0 (after the 8th bit in 8-\nbit UART Mode, or at the beginning of the STOP bit in 9-bit UART Mode). When the UART0 interrupt is enabled, setting this bit causes the CPU to vector to the UART0 interrupt service routine. This bit must be cleared manually by software.\nBit0: RI0: Receive Interrupt Flag. \nSet to ‘1’ by hardware when a byte of data has been received by UART0 (set at the STOP bit sampling time). When the UART0 interrupt is enab led, setting this bit to ‘1’ causes the CPU \nto vector to the UART0 interrupt service routine.  This bit must be cleared manually by soft-\nware.R/W R R/W R/W R/W R/W R/W R/W Reset Value\nS0MODE MCE0 REN0 TB80 RB80 TI0 RI0 01000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 Bit Addressable\nSFR Address: 0x98\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 169SFR Definition  15.2.  SBUF0: Serial (UART0 ) Port Data Buffer\nBits7–0: SBUF0[7:0]: Serial Data Buffer Bits 7–0 (MSB–LSB)\nThis SFR accesses two registers; a transmit shif t register and a receive latch register. When \ndata is written to SBUF0, it goes to the transmit  shift register and is he ld for serial transmis-\nsion. Writing a byte to SBUF0 initiates the transmission. A read of SBUF0 returns the con-\ntents of the receive latch.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0x99\nC8051F310/1/2/3/4/5/6/7\n170 Rev. 1.8 \n Table  15.1.  Timer Settings for Standard Baud Rates \nUsing the Internal Oscillator\nFrequency: 24.5 MHz\nTarget \nBaud Rate \n(bps)Baud Rate \n% Error Oscilla-\ntor Divide \nFactorTimer Clock \nSourceSCA1-SCA0\n(pre-scale \nselect)*T1M* Timer 1 \nReload Value \n(hex)SYSCLK from \nInternal Osc.230400 –0.32% 106 SYSCLK XX 1 0xCB\n115200 –0.32% 212 SYSCLK XX 1 0x96\n57600 0.15% 426 SYSCLK XX 1 0x2B28800 –0.32% 848 SYSCLK / 4 01 0 0x96\n14400 0.15% 1704 SYSCLK / 12 00 0 0xB9\n9600 –0.32% 2544 SYSCLK / 12 00 0 0x962400 –0.32% 10176 SYSCLK / 48 10 0 0x96\n1200 0.15% 20448 SYSCLK / 48 10 0 0x2B\nX = Don’t care\n*Note:  SCA1–SCA0 and T1M bit definitions can be found in Section 17.1 .\nTable  15.2.  Timer Settings for Standard Baud Rates \nUsing an External 25  MHz Oscillator\nFrequency: 25.0 MHz\nTarget \nBaud Rate \n(bps)Baud Rate \n% Error Oscilla-\ntor Divide \nFactorTimer Clock \nSourceSCA1-SCA0\n(pre-scale \nselect)*T1M* Timer 1 \nReload Value \n(hex)SYSCLK from \nExternal Osc.230400 –0.47% 108 SYSCLK XX 1 0xCA\n115200 0.45% 218 SYSCLK XX 1 0x93\n57600 –0.01% 434 SYSCLK XX 1 0x27\n28800 0.45% 872 SYSCLK / 4 01 0 0x9314400 –0.01% 1736 SYSCLK / 4 01 0 0x27\n9600 0.15% 2608 EXTCLK / 8 11 0 0x5D\n2400 0.45% 10464 SYSCLK / 48 10 0 0x931200 –0.01% 20832 SYSCLK / 48 10 0 0x27SYSCLK from \nInternal Osc.57600 –0.47% 432 EXTCLK / 8 11 0 0xE528800 –0.47% 864 EXTCLK / 8 11 0 0xCA14400 0.45% 1744 EXTCLK / 8 11 0 0x93\n9600 0.15% 2608 EXTCLK / 8 11 0 0x5D\nX = Don’t care\n*Note:  SCA1–SCA0 and T1M bit definitions can be found in Section 17.1 .\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 171 \n Table  15.3.  Timer Settings for Standard Baud Rates \nUsing an External 22.1184  MHz Oscillator\nFrequency: 22.1184 MHz\nTarget \nBaud Rate \n(bps)Baud Rate \n% Error Oscilla-\ntor Divide \nFactorTimer Clock \nSourceSCA1-SCA0\n(pre-scale \nselect)*T1M* Timer 1 \nReload Value \n(hex)SYSCLK from \nExternal Osc.230400 0.00% 96 SYSCLK XX 1 0xD0\n115200 0.00% 192 SYSCLK XX 1 0xA0\n57600 0.00% 384 SYSCLK XX 1 0x4028800 0.00% 768 SYSCLK / 12 00 0 0xE0\n14400 0.00% 1536 SYSCLK / 12 00 0 0xC0\n9600 0.00% 2304 SYSCLK / 12 00 0 0xA02400 0.00% 9216 SYSCLK / 48 10 0 0xA0\n1200 0.00% 18432 SYSCLK / 48 10 0 0x40SYSCLK from \nInternal Osc.230400 0.00% 96 EXTCLK / 8 11 0 0xFA\n115200 0.00% 192 EXTCLK / 8 11 0 0xF4\n57600 0.00% 384 EXTCLK / 8 11 0 0xE8\n28800 0.00% 768 EXTCLK / 8 11 0 0xD014400 0.00% 1536 EXTCLK / 8 11 0 0xA0\n9600 0.00% 2304 EXTCLK / 8 11 0 0x70\nX = Don’t care\n*Note:  SCA1–SCA0 and T1M bit definitions can be found in Section 17.1 .\nTable  15.4.  Timer Settings for Standard Baud Rates \nUsing an External 18.432  MHz Oscillator\nFrequency: 18.432 MHz\nTarget \nBaud Rate \n(bps)Baud Rate \n% Error Oscilla-\ntor Divide \nFactorTimer Clock \nSourceSCA1-SCA0\n(pre-scale \nselect)*T1M* Timer 1 \nReload \nValue (hex)SYSCLK from \nExternal Osc.230400 0.00% 80 SYSCLK XX 1 0xD8\n115200 0.00% 160 SYSCLK XX 1 0xB0\n57600 0.00% 320 SYSCLK XX 1 0x6028800 0.00% 640 SYSCLK / 4 01 0 0xB0\n14400 0.00% 1280 SYSCLK / 4 01 0 0x60\n9600 0.00% 1920 SYSCLK / 12 00 0 0xB02400 0.00% 7680 SYSCLK / 48 10 0 0xB0\n1200 0.00% 15360 SYSCLK / 48 10 0 0x60SYSCLK from \nInternal Osc.230400 0.00% 80 EXTCLK / 8 11 0 0xFB\n115200 0.00% 160 EXTCLK / 8 11 0 0xF6\n57600 0.00% 320 EXTCLK / 8 11 0 0xEC\n28800 0.00% 640 EXTCLK / 8 11 0 0xD814400 0.00% 1280 EXTCLK / 8 11 0 0xB0\n9600 0.00% 1920 EXTCLK / 8 11 0 0x88\nX = Don’t care\n*Note:  SCA1–SCA0 and T1M bit definitions can be found in Section 17.1 .\nC8051F310/1/2/3/4/5/6/7\n172 Rev. 1.8 \n Table  15.5.  Timer Settings for Standard Baud Rates \nUsing an External 11.0592  MHz Oscillator\nFrequency: 11.0592 MHz\nTarget \nBaud Rate \n(bps)Baud Rate \n% Error Oscilla-\ntor Divide \nFactorTimer Clock \nSourceSCA1-SCA0\n(pre-scale \nselect)*T1M* Timer 1 \nReload Value \n(hex)SYSCLK from \nExternal Osc.230400 0.00% 48 SYSCLK XX 1 0xE8\n115200 0.00% 96 SYSCLK XX 1 0xD0\n57600 0.00% 192 SYSCLK XX 1 0xA028800 0.00% 384 SYSCLK XX 1 0x40\n14400 0.00% 768 SYSCLK / 12 00 0 0xE0\n9600 0.00% 1152 SYSCLK / 12 00 0 0xD02400 0.00% 4608 SYSCLK / 12 00 0 0x40\n1200 0.00% 9216 SYSCLK / 48 10 0 0xA0SYSCLK from \nInternal Osc.230400 0.00% 48 EXTCLK / 8 11 0 0xFD\n115200 0.00% 96 EXTCLK / 8 11 0 0xFA\n57600 0.00% 192 EXTCLK / 8 11 0 0xF4\n28800 0.00% 384 EXTCLK / 8 11 0 0xE814400 0.00% 768 EXTCLK / 8 11 0 0xD0\n9600 0.00% 1152 EXTCLK / 8 11 0 0xB8\nX = Don’t care\n*Note:  SCA1–SCA0 and T1M bit definitions can be found in Section 17.1 .\nTable  15.6.  Timer Settings for Standard Baud Rates \nUsing an External 3.6864  MHz Oscillator\nFrequency: 3.6864 MHz\nTarget \nBaud Rate \n(bps)Baud \nRate% \nError Oscilla-\ntor Divide \nFactorTimer Clock \nSourceSCA1-SCA0\n(pre-scale \nselect)*T1M* Timer 1 \nReload \nValue (hex)SYSCLK from \nExternal Osc.230400 0.00% 16 SYSCLK XX 1 0xF8\n115200 0.00% 32 SYSCLK XX 1 0xF0\n57600 0.00% 64 SYSCLK XX 1 0xE028800 0.00% 128 SYSCLK XX 1 0xC0\n14400 0.00% 256 SYSCLK XX 1 0x80\n9600 0.00% 384 SYSCLK XX 1 0x402400 0.00% 1536 SYSCLK / 12 00 0 0xC0\n1200 0.00% 3072 SYSCLK / 12 00 0 0x80SYSCLK from \nInternal Osc.230400 0.00% 16 EXTCLK / 8 11 0 0xFF\n115200 0.00% 32 EXTCLK / 8 11 0 0xFE\n57600 0.00% 64 EXTCLK / 8 11 0 0xFC\n28800 0.00% 128 EXTCLK / 8 11 0 0xF814400 0.00% 256 EXTCLK / 8 11 0 0xF0\n9600 0.00% 384 EXTCLK / 8 11 0 0xE8\nX = Don’t care\n*Note:  SCA1–SCA0 and T1M bit defin itions can be found in Section 17.1 .\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 17316. Enhanced Serial Peri pheral Interface (SPI0)\nThe Enhanced Serial Peripheral Interface (SPI0) prov ides access to a flexible, full-duplex synchronous \nserial bus. SPI0 can operate as a master or slave device in both 3-wire or 4-wire modes, and supports mul -\ntiple masters and slaves on a single  SPI bus. The slave-select (NSS) signal can be configured as an input \nto select SPI0 in slave mode, or to disable Master Mode operation in a multi-master environment, avoiding \ncontention on the SPI bus when more than one master attempts simultaneous data transfers. NSS can also be configured as a chip-select output in master  mode, or disabled for 3-wire operation. Additional gen\n-\neral purpose port I/O pins can be used to se lect multiple slave dev ices in master mode.\n \nFigure 16.1. SPI Block DiagramSFR BusData Path\nControlSFR Bus\nWrite\nSPI0DATReceive Data BufferSPI0DAT\n01234567Shift RegisterSPI CONTROL LOGICSPI0CKRSCR7\nSCR6\nSCR5\nSCR4\nSCR3\nSCR2\nSCR1\nSCR0SPI0CFG SPI0CN\nPin Interface\nControl\nPin\nControl\nLogicC\nR\nO\nS\nS\nB\nA\nRPort I/O\nRead\nSPI0DATSPI IRQ\nTx Data\nRx DataSCKMOSI\nMISO\nNSSTransmit Data BufferClock Divide\nLogicSYSCLK\nCKPHA\nCKPOL\nSLVSEL\nNSSMD1\nNSSMD0SPIBSY\nMSTEN\nNSSIN\nSRMT\nRXBMT\nSPIF\nWCOL\nMODF\nRXOVRN\nTXBMT\nSPIEN\nC8051F310/1/2/3/4/5/6/7\n174 Rev. 1.816.1. Signal Descriptions\nThe four signals used by SPI0 (MOSI, MISO, SCK, NSS) are described below. \n16.1.1. Master Out, Slave In (MOSI)\nThe master-out, slave-in (MOSI) signal is an output fr om a master device and an input to slave devices. It \nis used to serially transfer data from the master to th e slave. This signal is an output when SPI0 is operat -\ning as a master and an input when SPI0 is operating as  a slave. Data is transferred most-significant bit \nfirst. When configured as a master, MOSI is driven by  the MSB of the shift register in both 3- and 4-wire \nmode.\n16.1.2. Master In, Slave Out (MISO)\nThe master-in, slave-out (MISO) signal is an output from  a slave device and an input to the master device. \nIt is used to serially transfer data from the slave to  the master. This signal is  an input when SPI0 is operat -\ning as a master and an output when SPI0 is operating as a slave. Data is transferred most-significant bit \nfirst. The MISO pin is placed in a high-impedance stat e when the SPI module is disabled and when the SPI \noperates in 4-wire mode as a slave that is not select ed. When acting as a slave in 3-wire mode, MISO is \nalways driven by the MSB of the shift register.\n16.1.3. Serial Clock (SCK)\nThe serial clock (SCK) signal is an output from the mast er device and an input to slave devices. It is used \nto synchronize the transfer of data between the mast er and slave on the MOSI and MISO lines. SPI0 gen -\nerates this signal when operating as a master. The SCK signal is ignored by a SPI slave when the slave is \nnot selected (NSS = 1) in 4-wire slave mode.\n16.1.4. Slave Select (NSS)\nThe function of the slave-select (NSS) signal is dependent on the setting of the NSSMD1 and NSSMD0 \nbits in the SPI0CN register. There are three possib le modes that can be selected with these bits:\n• NSSMD[1:0] = 00: 3-Wire Master or 3-Wire Slav e Mode: SPI0 operates in 3-wire mode, and NSS is \ndisabled. When operating as a slave device, SPI0 is  always selected in 3-wire mode. Since no select \nsignal is present, SPI0 must be the only slave on th e bus in 3-wire mode. This is intended for point-to-\npoint communication between a master and one slave.\n• NSSMD[1:0] = 01: 4-Wire Slave or Multi-Master Mode: SPI0 operates in 4-wire mode, and NSS is \nenabled as an input. When operating as a slave,  NSS selects the SPI0 device. When operating as a \nmaster, a 1-to-0 transition of the NSS signal disables  the master function of SPI0 so that multiple mas -\nter devices can be used on the same SPI bus.\n• NSSMD[1:0] = 1x: 4-Wire Master Mode: SPI0 operat es in 4-wire mode, and NSS is enabled as an out -\nput. The setting of NSSMD0 dete rmines what logic level the NSS pin will output. This configuration \nshould only be used when operating SPI0 as a master device.\nSee Figure  16.2, Figure  16.3, and Figure  16.4 for typical connection diagra ms of the various operational \nmodes. Note that the setting of NSSMD bits affects the pinout of the device.  When in 3-wire master or \n3-wire slave mode, the NSS pin will not be mapped by the crossbar. In all other modes, the NSS signal will \nbe mapped to a pin on the device. See Section “ 13. Port Input/Output ” on page  129 for general purpose \nport I/O and crossbar information.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 17516.2. SPI0 Master Mode Operation\nA SPI master device initiates all data transfers on a SPI bus. SPI0 is placed in master mode by setting the \nMaster Enable flag (MSTEN, SPI0CN.6). Writing a byte of data to the SPI0 data register (SPI0DAT) when \nin master mode writes to the transmit buffer. If the SPI shift register is empty, the byte in the transmit buffer \nis moved to the shift register, and a data transfer begins. The SPI0 master immediately shifts out the data \nserially on the MOSI line while provid ing the serial clock on SCK. The SPI F (SPI0CN.7) flag is set to logic \n1 at the end of the transfer. If interrupts are enabl ed, an interrupt request is generated when the SPIF flag \nis set. While the SPI0 master transf ers data to a slave on the MOSI line, the addressed SPI slave device \nsimultaneously transfers the contents of  its shift register to the SPI master on the MISO line in a full-duplex \noperation. Therefore, the SPIF flag serves as both  a transmit-complete and receive-data-ready flag. The \ndata byte received from the slave is transferred MSB-fi rst into the master\'s shift register. When a byte is \nfully shifted into the register, it is  moved to the receive buffer where it can be read by the processor by \nreading SPI0DAT. \nWhen configured as a master, SPI0 can operate in one of three different modes: multi-master mode, 3-wire \nsingle-master mode, and 4-wire single-master mode. Th e default, multi-master mo de is active when NSS -\nMD1 (SPI0CN.3) = 0 and NSSMD0 (SPI0CN.2) = 1. In this mode, NSS is an input to the device, and is \nused to disable the master SPI0 when another master is accessing the bus. When NSS is pulled low in this \nmode, MSTEN (SPI0CN.6) and SPIEN (SPI0CN.0) are se t to 0 to disable the SPI master device, and a \nMode Fault is generated (MODF, SPI0CN.5 = 1). Mode Faul t will generate an interr upt if enabled. SPI0 \nmust be manually re-enabled in soft ware under these circumstances. In multi-master systems, devices will \ntypically default to being slave devices while they are not acting as the system master device. In multi-mas -\nter mode, slave devices can be addressed individua lly (if needed) using general-purpose I/O pins. \nFigure  16.2 shows a connection diagram between two ma ster devices in mu ltiple-master mode.\n3-wire single-master mode is active when NSSMD1 (S PI0CN.3) = 0 and NSSMD0 ( SPI0CN.2) = 0. In this \nmode, NSS is not used, and is not mapped to an exte rnal port pin through the crossbar. Any slave devices \nthat must be addressed in this mode should be selected using general-purpose I/O pins. Figure  16.3 \nshows a connection diagram between a master dev ice in 3-wire master mode and a slave device.\n4-wire single-master mode is active wh en NSSMD1 (SPI0CN.3) = 1. In this  mode, NSS is configured as an \noutput pin, and can be used as a sl ave-select signal for a single SPI dev ice. In this mode, the output value \nof NSS is controlled (in software) with the bit NSSM D0 (SPI0CN.2). Additional slave devices can be \naddressed using general-purpose I/O pins. Figure  16.4 shows a connection diagram for a master device in \n4-wire master mode and two slave devices.\nC8051F310/1/2/3/4/5/6/7\n176 Rev. 1.8 \nFigure 16.2. Multiple-Master  Mode Connect ion Diagram\nFigure 16.3. 3-Wire Single Master  and Slave Mode Connection Diagram\nFigure 16.4. 4-Wire Single Master  and Slave Mode Connection DiagramMaster\nDevice 2Master\nDevice 1MOSIMISO\nSCKMISO\nMOSI\nSCKNSS\nGPIO NSSGPIO\nSlave\nDeviceMasterDevice\nMOSIMISO\nSCKMISO\nMOSI\nSCK\nSlave\nDeviceMasterDevice\nMOSIMISO\nSCKMISO\nMOSI\nSCK\nNSS NSSGPIO\nSlave\nDeviceMOSIMISO\nSCK\nNSS\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 17716.3. SPI0 Slave Mode Operation\nWhen SPI0 is enabled and not confi gured as a master, it will operate as a SPI slave. As a slave, bytes are \nshifted in through the MOSI pin a nd out through the MISO pin by a ma ster device controlling the SCK sig -\nnal. A bit counter in the SPI0 logic counts SCK edges. When 8 bits have been shifted through the shift reg -\nister, the SPIF flag is set to logic 1, and the byte is copied into the receive buffer. Data is read from the \nreceive buffer by reading SPI0DAT. A slave device cannot initiate transfers. Data to  be transferred to the \nmaster device is pre-loaded into the shift register by writing to SPI0DAT. Writes to SPI0DAT are double-\nbuffered, and are placed in the transmit buffer first. If the shift register is empty, the contents of the transmit \nbuffer will immediately be transferred into the shift register. When the sh ift register already contains data, \nthe SPI will load the shift register wi th the transmit buffer’s contents af ter the last SCK edg e of the next (or \ncurrent) SPI transfer.\nWhen configured as a slave, SPI0 can be configured  for 4-wire or 3-wire operation. The default, 4-wire \nslave mode, is active when NSSMD1 (SPI0CN.3) = 0 and NSSMD0 (SPI0CN.2) = 1. In 4-wire mode, the \nNSS signal is routed to a port pin and configured as a digital input. SPI0 is enabl ed when NSS is logic 0, \nand disabled when NSS is logic 1. The bit counter is reset on a falling edge of N SS. Note that the NSS sig -\nnal must be driven low at least 2 system clocks before the first active edge of SCK for each byte transfer. \nFigure  16.4 shows a connection diagram between two slav e devices in 4-wire slave mode and a master \ndevice.\n3-wire slave mode is active when NSSMD1 (SPI0CN. 3) = 0 and NSSMD0 (SPI0CN.2) = 0. NSS is not \nused in this mode, and is not mapped to an external port pin through the crossbar. Since there is no way of \nuniquely addressing the device in 3-wire slave mode , SPI0 must be the only slav e device present on the \nbus. It is important to note that in 3-wire slave mode  there is no external means of resetting the bit counter \nthat determines when a full byte has been received. Th e bit counter can only be reset by disabling and re-\nenabling SPI0 with the SPIEN bit. Figure  16.3 shows a connection diagram between a slave device in 3-\nwire slave mode and a master device.\n16.4. SPI0 Interrupt Sources\nWhen SPI0 interrupts are e nabled, the following four flags will gener ate an interrupt when they are set to \nlogic 1:\nNote that all of the following bits must be cleared by software.\n1. The SPI Interrupt Flag, SPIF (SPI0CN.7) is set to  logic 1 at the end of each byte transfer. This \nflag can occur in all SPI0 modes.\n2. The Write Collision Flag, WCOL (SPI0CN.6) is set to logic 1 if a write to  SPI0DAT is attempted \nwhen the transmit buffer has not been emptied to the SPI shift register. When this occurs, the write to SPI0DAT will be ignored, and the transmi t buffer will not be written.This flag can occur \nin all SPI0 modes.\n3. The Mode Fault Flag MODF (SPI0CN.5) is set to logic 1 when SPI0 is configured as a master, \nand for multi-master mode and the NSS pin is pulled low. When a Mode Fault occurs, the MSTEN and SPIEN bits in SPI0CN are set to logi c 0 to disable SPI0 and allow another master \ndevice to access the bus.\n4. The Receive Overrun Flag RXOVRN (SPI0CN.4) is set to logic 1 when configured as a slave, \nand a transfer is completed and the receive buffer still holds an unread byte from a previous \ntransfer. The new byte is not transferred to the receive buffer, allowing the previously received data byte to be read. The data byte which caused the overrun is lost.\nC8051F310/1/2/3/4/5/6/7\n178 Rev. 1.816.5. Serial Clock Timing\nFour combinations of serial clock phase and polarity  can be selected using the clock control bits in the \nSPI0 Configuration Register (SPI0C FG). The CKPHA bit ( SPI0CFG.5) selects one of two clock phases \n(edge used to latch the data). The CKPOL bit (SPI0CFG.4) selects between an active-high or active-low clock. Both master and slave devices must be config ured to use the same clock phase and polarity. SPI0 \nshould be disabled (by clearing the SPIEN bit, SPI0 CN.0) when changing the clock phase or polarity. The \nclock and data line relationships for master mode are shown in \nFigure  16.5. For slave mode, the clock and \ndata relationships are shown in Figure  16.6 and Figure  16.7. CKPHA must be set to ‘0’ on both the master \nand slave SPI when communicating between two of  the following devices: C8051F04x, C8051F06x, \nC8051F12x, C8051F31x, C8051F32x, and C8051F33x\nThe SPI0 Clock Rate Register  (SPI0CKR) as shown in SFR Definition 16.3  controls the master mode \nserial clock frequency. This register is ignored when operating in slave mode. When the SPI is configured \nas a master, the maximum data transfer rate (bits/sec) is one-half the s ystem clock frequency or 12.5 MHz, \nwhichever is slower. When the SPI is configured as a sl ave, the maximum data transfer rate (bits/sec) for \nfull-duplex operation is 1/10 the system clock frequency , provided that the master issues SCK, NSS (in 4-\nwire slave mode), and the serial input data synchrono usly with the slave’s system clock. If the master \nissues SCK, NSS, and the serial input data asynchronously, the maximum data transfer rate (bits/sec) \nmust be less than 1/10 the system clock frequency. In  the special case where the master only wants to \ntransmit data to the slave and does not need to receive data from the slave (i.e. half-duplex operation), the SPI slave can receive data at a maximum data transfer  rate (bits/sec) of 1/4 the system clock frequency. \nThis is provided that the master i ssues SCK, NSS, and the serial inpu t data synchronously with the slave’s \nsystem clock.\n \nFigure 16.5. Master Mode Data/Clock TimingSCK\n(CKPOL=0, CKPHA=0)\nSCK\n(CKPOL=0, CKPHA=1)\nSCK\n(CKPOL=1, CKPHA=0)\nSCK\n(CKPOL=1, CKPHA=1)\nMSB Bit 6 Bit 5 Bit 4 Bit 3 Bit 2 Bit 1 Bit 0 MISO/MOSI\nNSS (Must Remain High\nin Multi-Master Mode)\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 179 \nFigure 16.6. Slave Mode Data /Clock Timing (CKPHA = 0)\nFigure 16.7. Slave Mode Data /Clock Timing (CKPHA = 1)MSB Bit 6 Bit 5 Bit 4 Bit 3 Bit 2 Bit 1 Bit 0 MISO\nNSS (4-Wire Mode)MSB Bit 6 Bit 5 Bit 4 Bit 3 Bit 2 Bit 1 Bit 0 MOSISCK\n(CKPOL=0, CKPHA=0)\nSCK\n(CKPOL=1, CKPHA=0)\nSCK\n(CKPOL=0, CKPHA=1)\nSCK\n(CKPOL=1, CKPHA=1)\nMSB Bit 6 Bit 5 Bit 4 Bit 3 Bit 2 Bit 1 Bit 0 MISO\nNSS (4-Wire Mode)MSB Bit 6 Bit 5 Bit 4 Bit 3 Bit 2 Bit 1 Bit 0 MOSI\nC8051F310/1/2/3/4/5/6/7\n180 Rev. 1.816.6. SPI Special Function Registers\nSPI0 is accessed and controlled through four special function registers in the system controller: SPI0CN \nControl Register, SPI0DAT Data Re gister, SPI0CFG Configuration Register, and SPI0CKR Clock Rate \nRegister. The four special function registers related to the operation of the SPI0 Bus are described in the \nfollowing register definitions.\nSFR Definition  16.1.  SPI0CFG: SPI0 Configuration\nBit 7: SPIBSY: SPI Busy (read only).\nThis bit is set to logic 1 when a SPI transf er is in progress (Master or slave Mode).\nBit 6: MSTEN: Master Mode Enable. \n0: Disable master mode. Operate in slave mode.1: Enable master mode. Operate as a master.\nBit 5: CKPHA: SPI0 Clock Phase.\nThis bit controls the SPI0 clock phase. 0: Data centered on first edge of SCK period.*1: Data centered on second edge of SCK period.*\nBit 4: CKPOL: SPI0 Clock Polarity. \nThis bit controls the SPI0 clock polarity.0: SCK line low in idle state.1: SCK line high in idle state.\nBit 3: SLVSEL: Slave Selected Flag (read only). \nThis bit is set to logic 1 whenever the NSS pin is  low indicating SPI0 is the selected slave. It \nis cleared to logic 0 when NSS is high (slave not selected). This bit does not indicate the \ninstantaneous value at the NSS pin, but ra ther a de-glitched version of the pin input.\nBit 2: NSSIN: NSS Instantaneous Pin Input (read only). \nThis bit mimics the instantaneous value that is  present on the NSS port pin at the time that \nthe register is read. This input is not de-glitched.\nBit 1: SRMT: Shift Register Empty (Valid in Slave Mode, read only).\nThis bit will be set to logic 1 when all data has been transferred in/out of the shift register, \nand there is no new information available to read  from the transmit buffer or write to the \nreceive buffer. It returns to logic 0 when a data byte is transferred to the shift register from \nthe transmit buffer or by a transition on SCK. NOTE: SRMT = 1 when in Master Mode.\nBit 0: RXBMT: Receive Buffer Empty (Valid in Slave Mode, read only).\nThis bit will be set to logic 1 when the receiv e buffer has be en read and contains no new \ninformation. If there is new inform ation available in the receive buffer that has not been read, \nthis bit will return to logic 0.NOTE: RXBMT = 1 when in Master Mode. \uf020\n*Note:  In slave mode, data on MOSI is sampled in the center  of each data bit. In master mode, data on MISO is \nsampled one SYSCLK before the end of each data bit,  to provide maximum settling time for the slave \ndevice. See Table 16.1 for timing parameters.R R/W R/W R/W R R R R Reset Value\nSPIBSY MSTEN CKPHA CKPOL SLVSEL NSSIN SRMT RXBMT 00000111\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xA1\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 181SFR Definition  16.2.  SPI0CN: SPI0 Control\nBit 7: SPIF: SPI0 Interrupt Flag.\nThis bit is set to logic 1 by hardware at the end of a data trans fer. If interrupts are enabled, \nsetting this bit causes the CPU to vector to the SPI0 interrupt service routine. This bit is not \nautomatically cleared by hardware. It must be cleared by software. \nBit 6: WCOL: Write Collision Flag. \nThis bit is set to logic 1 by hardware (and gene rates a SPI0 interrupt) to  indicate a write to \nthe SPI0 data register was attempted while a da ta transfer was in progress. It must be \ncleared by software.\nBit 5: MODF: Mode Fault Flag.\nThis bit is set to logic 1 by hardware (and ge nerates a SPI0 interrupt) when a master mode \ncollision is detected (NSS is low, MSTEN = 1,  and NSSMD[1:0] = 01). This bit is not auto-\nmatically cleared by hardware. It must be cleared by software.\nBit 4: RXOVRN: Receive Overru n Flag (Slave Mode only).\nThis bit is set to logic 1 by hardware (and ge nerates a SPI0 interrupt) when the receive buf-\nfer still holds unread data from a previous transfer and the last  bit of the current transfer is \nshifted into the SPI0 shift register. This bit is  not automatically cleare d by hardware. It must \nbe cleared by software.\nBits 3–2: NSSMD1–NSSMD0: Slave Select Mode.\nSelects between the following NSS operation modes: (See Section “16.2. SPI0 Master Mode Operation” on page 175  and Section “16.3. SPI0 \nSlave Mode Operation” on page 177 ).\n00: 3-Wire Slave or 3-wire Master Mode. NSS signal is not routed to a port pin.01: 4-Wire Slave or Multi-Master Mode (Defau lt). NSS is always an input to the device.\n1x: 4-Wire Single-Master Mode. NSS signal is mapped as an ou tput from the device and will \nassume the value of NSSMD0.\nBit 1: TXBMT: Transmit Buffer Empty.\nThis bit will be set to logic 0 when new data ha s been written to the transmit buffer. When \ndata in the transmit buffer is tr ansferred to the SPI sh ift register, this bit will be set to logic 1, \nindicating that it is safe to writ e a new byte to the transmit buffer.\nBit 0: SPIEN: SPI0 Enable. \nThis bit enables/disables the SPI.0: SPI disabled.1: SPI enabled.R/W R/W R/W R/W R/W R/W R R/W Reset Value\nSPIF WCOL MODF RXOVRN NSSMD1 NSSMD0 TXBMT SPIEN 00000110\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0Bit \nAddressable\nSFR Address: 0xF8\nC8051F310/1/2/3/4/5/6/7\n182 Rev. 1.8SFR Definition  16.3.  SPI0CKR: SPI0 Clock Rate\nSFR Definition  16.4.  SPI0DAT: SPI0 DataBits 7–0: SCR7–SCR0: SPI0 Clock Rate.\nThese bits determine the frequency of the SCK output when the SPI0 module is configured \nfor master mode operation. The SCK clock frequ ency is a divided version of the system \nclock, and is given in the following equation, where SYSCLK  is the system clock frequency \nand SPI0CKR is the 8-bit value held in the SPI0CKR register.\nfor 0 <= SPI0CKR <= 255\nExample: If SYSCLK = 2 MHz and SPI0CKR = 0x04,R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nSCR7 SCR6 SCR5 SCR4 SCR3 SCR2 SCR1 SCR0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xA2\nfSCK2000000\n24 1 +\uf028\uf029\uf0b4--------------- ----------- =\nfSCK 200kHz =fSCKSYSCLK\n2SPI0CKR 1+ \uf028\uf029\uf0b4--------------- ------------------ --------------- - =\nBits 7–0: SPI0DAT: SPI0 Transmit and Receive Data.\nThe SPI0DAT register is used to transmit an d receive SPI0 data. Writing data to SPI0DAT \nplaces the data into the transmit buffer and initiates a transfer when in Master Mode. A read of SPI0DAT returns the contents of the receive buffer.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nSFR Address: 0xA3\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 183Figure 16.8. SPI Master  Timing (CKPHA = 0)\n \nFigure 16.9. SPI Master  Timing (CKPHA = 1)SCK*\nTMCKHTMCKL\nMOSITMIS\nMISO\n* SCK is shown for CKPOL = 0.  SCK is the opposite polarity for CKPOL = 1.TMIH\nSCK*\nTMCKHTMCKL\nMISOTMIH\nMOSI\n* SCK is shown for CKPOL = 0.  SCK is the opposite polarity for CKPOL = 1.TMIS\nC8051F310/1/2/3/4/5/6/7\n184 Rev. 1.8Figure 16.10. SPI Slave Timing (CKPHA = 0)\nFigure 16.11. SPI Slave  Timing (CKPHA = 1)SCK*TSENSS\nTCKHTCKL\nMOSITSISTSIH\nMISOTSD\nTSOH\n* SCK is shown for CKPOL = 0.  SCK is the opposite polarity for CKPOL = 1.TSEZTSDZ\nSCK*TSENSS\nTCKHTCKL\nMOSITSISTSIH\nMISOTSD\nTSOH\n* SCK is shown for CKPOL = 0.  SCK is the opposite polarity for CKPOL = 1.TSLHTSEZTSDZ\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 185Table  16.1.  SPI Slave Timing Parameters\nParameter Description Min Max Units\nMaster Mode Timing*  (See Figure  16.8 and Figure  16.9)\nTMCKH SCK High Time 1 x TSYSCLK —n s\nTMCKL SCK Low Time 1 x TSYSCLK —n s\nTMIS MISO Valid to SCK Shift Edge 1 x TSYSCLK  + 20 — ns\nTMIH SCK Shift Edge to MISO Change 0— n s\nSlave Mode Timing*  (See Figure  16.10  and Figure  16.11 )\nTSE NSS Falling to First SCK Edge 2 x TSYSCLK —n s\nTSD Last SCK Edge to NSS Rising 2 x TSYSCLK —n s\nTSEZ NSS Falling to MISO Valid — 4 x TSYSCLK ns\nTSDZ NSS Rising to MISO High-Z — 4 x TSYSCLK ns\nTCKH SCK High Time 5 x TSYSCLK —n s\nTCKL SCK Low Time 5 x TSYSCLK —n s\nTSIS MOSI Valid to SCK Sample Edge 2 x TSYSCLK —n s\nTSIH SCK Sample Edge to MOSI Change 2 x TSYSCLK —n s\nTSOH SCK Shift Edge to MISO Change — 4 x TSYSCLK ns\nTSLHLast SCK Edge to MISO Change \uf020\n(CKPHA = 1 ONLY)6 x TSYSCLK 8 x TSYSCLK ns\n*Note:  TSYSCLK  is equal to one period of the device system clock (SYSCLK).\nC8051F310/1/2/3/4/5/6/7\n186 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 18717. Timers  \nEach MCU includes four counter/timers: two are 16-bit  counter/timers compatible with those found in the \nstandard 8051, and two are 16-bit auto-reload timer fo r use with the ADC, SMBus, or for general purpose \nuse. These timers can be used to measure time inte rvals, count external even ts and generate periodic \ninterrupt requests. Timer  0 and Timer  1 are nearly identical and have four primary modes of operation. \nTimer 2   and Timer  3 offer 16-bit and split 8-bit timer functionality with auto-reload.\nTimers 0 and 1 may be clocked by one of five source s, determined by the Timer Mode Select bits (T1M-\nT0M) and the Clock Scale bits (SCA1-SCA0). The Clock Scale bits define a pre-scaled clock from which \nTimer  0 and/or Timer  1 may be clocked (See SFR Definition 17.3  for pre-scaled cl ock selection).\nTimer  0/1 may then be configured to use this pre-sc aled clock signal or th e system clock. Timer  2 and \nTimer 3 may be clocked by the system  clock, the system clock divided by 12, or the external oscillator \nclock source divided by 8.\nTimer  0 and Timer  1 may also be operated as counters. When functioning as a counter, a counter/timer \nregister is incremented on each high-to-low transition at  the selected input pin (T0 or T1). Events with a fre -\nquency of up to one-fourth the system clock\'s frequen cy can be counted. The input signal need not be peri -\nodic, but it should be held at a gi ven level for at least two full system cl ock cycles to ensure the level is \nproperly sampled. \n17.1. Timer 0 and Timer 1\nEach timer is implemented as 16-bit register accessed as two separate bytes: a low byte (TL0 or TL1) and \na high byte (TH0 or TH1). The Counter/Timer Control register (TCON) is used to enable Timer 0 and Timer \n1 as well as indicate status. Timer 0 interrupts can be enabled by setting the ET0 bit in the IE register ( SFR \nDefinition  8.7.  “IE: Interrupt Enable” on page  97); Timer 1 interrupts can be enabled by setting the ET1 bit \nin the IE register. Both counter/timers operate in on e of four primary modes selected by setting the Mode \nSelect bits T1M1-T0M0 in the Counter/Timer Mode register (TMOD). Each timer can be configured inde -\npendently. Each operating mode is described below.\n17.1.1. Mode 0: 13-bit Counter/Timer\nTimer 0 and Timer 1 operate as 13-bit counter/timers in Mode 0. The following describes the configuration \nand operation of Timer 0. However, both timers operat e identically, and Timer 1 is configured in the same \nmanner as described for Timer 0.\nThe TH0 register holds the eight MSBs of the 13-bit c ounter/timer. TL0 holds the five LSBs in bit positions \nTL0.4–TL0.0. The three upper bits of TL0 (TL0.7–TL0 .5) are indeterminate and should be masked out or \nignored when reading. As the 13-bit timer register  increments and overflows from 0x1FFF (all ones) to \n0x0000, the timer overflow flag TF 0 (TCON.5) is set and an interrupt will occur if Timer 0 interrupts are \nenabled. Timer 0 and Timer 1 Modes: Ti mer 2 Modes: Timer 3 Modes:\n13-bit counter/timer16-bit timer with auto-reload 16-bit timer with auto-reload16-bit counter/timer\n8-bit counter/timer\nwith auto-reloadTwo 8-bit timers with auto-reload T wo 8-bit timers with auto-reloadTwo 8-bit counter/timers\n(Timer 0 only)\nC8051F310/1/2/3/4/5/6/7\n188 Rev. 1.8The C/T0 bit (TMOD.2) selects the counter/timer\'s cloc k source. When C/T0 is set to logic 1, high-to-low \ntransitions at the selected Timer 0 input pin (T0) increment the timer register (Refer to Section \n“13.1.  Priority Crossbar Decoder” on page  131 for information on selecting and configuring external I/O \npins). Clearing C/T selects the clock defined by the T0M bit (CKCON.3). When T0M is set, Timer 0 is \nclocked by the system clock. When T0M is cleared, Timer 0 is clocked by the source selected by the Clock \nScale bits in CKCON (see SFR Definition 17.3 ).\nSetting the TR0 bit (TCON.4) enables the timer when ei ther GATE0 (TMOD.3) is logic 0 or the input signal \n/INT0 is active as defined by bit IN0PL in register IT01CF (see SFR Definition  8.11.   “IT01CF: INT0/INT1 \nConfiguration” on page  101). Setting GATE0 to ‘1’ allows the timer to be controlled by the external input \nsignal /INT0 (see Section “8.3.5.  Interrupt Register Descriptions” on page  97), facilitating pulse width \nmeasurements.\nSetting TR0 does not force the timer to reset. The timer registers should be loaded with the desired initial \nvalue before the timer is enabled.\nTL1 and TH1 form the 13-bit register for Timer 1 in the same manner as described above for TL0 and TH0. \nTimer 1 is configured and controlled using the relevant TCON and TMOD bits just as with Timer 0. The input signal /INT1 is used with Timer 1; the /INT1 polari ty is defined by bit IN1PL in register IT01CF (see \nSFR Definition  8.11.   “IT01CF: INT0/INT1 Configuration” on page  101).\nFigure 17.1. T0 Mode 0 Block DiagramTR0 GATE0 /INT0 Counter/Timer\n0 X X Disabled\n1 0 X Enabled\n110 D i s a b l e d111 E n a b l e d\nX = Don\'t Care\nTCLK TL0\n(5 bits)TH0\n(8 bits)\n  TCONTF0\nTR0TR1TF1\nIE1\nIT1\nIE0\nIT0Interrupt\nTR00\n101\nSYSCLKPre-scaled ClockCKCON\nT\n3\nM\nHT\n3\nM\nLS\nC\nA\n0S\nC\nA\n1T\n0\nMT\n2\nM\nHT\n2\nM\nLT\n1\nMTMOD\nT\n1\nM\n1T\n1\nM\n0C\n/\nT\n1G\nA\nT\nE\n1G\nA\nT\nE\n0C\n/\nT\n0T\n0\nM\n1T\n0\nM\n0\nGATE0\n/INT0T0\nCrossbarINT01CF\nI\nN\n1\nS\nL\n1I\nN\n1\nS\nL\n0I\nN\n1\nS\nL\n2I\nN\n1\nP\nLI\nN\n0\nP\nLI\nN\n0\nS\nL\n2I\nN\n0\nS\nL\n1I\nN\n0\nS\nL\n0\nIN0PLXOR\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 18917.1.2. Mode 1: 16-bit Counter/Timer\nMode 1 operation is the same as Mode 0, except th at the counter/timer registers use all 16 bits. The \ncounter/timers are enabled and configured in Mode 1 in the same manner as for Mode 0. \n17.1.3. Mode 2: 8-bit Counter/Timer with Auto-Reload\nMode 2 configures Timer 0 and Timer 1 to operate as 8-bit counter/timers with automatic reload of the start \nvalue. TL0 holds the count and TH0 holds the reload va lue. When the counter in TL0 overflows from all \nones to 0x00, the timer over flow flag TF0 (TCON.5) is set and the co unter in TL0 is reloaded from TH0. If \nTimer 0 interrupts are enable d, an interrupt will oc cur when the TF0 flag is set.  The reload va lue in TH0 is \nnot changed. TL0 must be initialized to the desired va lue before enabling the timer for the first count to be \ncorrect. When in Mode 2, Timer 1 operates identically to Timer 0. \nBoth counter/timers are enabled and configured in Mode 2 in the same manner as Mode 0. Setting the TR0 bit (TCON.4) enables the timer when either GATE0 (TMOD.3) is logic 0 or when the input signal /INT0 \nis active as defined by bit IN0PL in register IT01CF (see \nSection “8.3.2.  External Interrupts” on page  95 \nfor details on the external input signals /INT0 and /INT1).\n \nFigure 17.2. T0 Mode 2 Block DiagramTCLKTMOD\nT\n1\nM\n1T\n1\nM\n0C\n/\nT\n1G\nA\nT\nE\n1G\nA\nT\nE\n0C\n/\nT\n0T\n0\nM\n1T\n0\nM\n0\n  TCONTF0\nTR0TR1TF1\nIE1\nIT1\nIE0\nIT0InterruptTL0\n(8 bits)\nReload TH0\n(8 bits)0\n10\n1 SYSCLKPre-scaled ClockINT01CF\nI\nN\n1\nS\nL1I\nN\n1\nS\nL0I\nN\n1\nS\nL2I\nN\n1\nP\nLI\nN\n0\nP\nLI\nN\n0\nS\nL2I\nN\n0\nS\nL1I\nN\n0\nS\nL0\nTR0\nGATE0\nIN0PLXOR/INT0T0\nCrossbarCKCON\nT\n3\nM\nHT\n3\nM\nLS\nC\nA\n0S\nC\nA\n1T\n0\nMT\n2\nM\nHT\n2\nM\nLT\n1\nM\nC8051F310/1/2/3/4/5/6/7\n190 Rev. 1.817.1.4. Mode 3: Two 8-bit Counter/Timers (Timer 0 Only)\nIn Mode 3, Timer 0 is configured as two separate 8-bit counter/timers held in TL0 and TH0. The \ncounter/timer in TL0 is controlled using the Timer 0 control/status bits in TCON and TMOD: TR0, C/T0, \nGATE0 and TF0. TL0 can use either the system clock or  an external input signal as its timebase. The TH0 \nregister is restricted to a timer function sourced by  the system clock or prescaled clock. TH0 is enabled \nusing the Timer 1 run control bit TR1. TH0 sets the Time r 1 overflow flag TF1 on ov erflow and thus controls \nthe Timer 1 interrupt.\nTimer 1 is inactive in Mode 3. When Timer 0 is operat ing in Mode 3, Timer 1 can be operated in Modes 0, \n1 or 2, but cannot be clocked by external signals nor set the TF1 flag and generate an interrupt. However, \nthe Timer 1 overflow can be used to generate baud ra tes for the SMBus and/or UA RT, and/or initiate ADC \nconversions. While Timer 0 is operating in Mode 3, Timer 1 run control is handled through its mode set -\ntings. To run Timer 1 while Timer 0 is  in Mode 3, set the Timer 1 Mode as 0, 1, or 2. To disable Timer 1, \nconfigure it for Mode 3.\nFigure 17.3. T0 Mode 3 Block DiagramTL0\n(8 bits)TMOD\n0\n1\n  TCONTF0\nTR0TR1TF1\nIE1\nIT1\nIE0\nIT0Interrupt\nInterrupt0\n1 SYSCLKPre-scaled Clock\nTR1 TH0\n(8 bits)T\n1\nM\n1T\n1\nM\n0C\n/\nT\n1G\nA\nT\nE\n1G\nA\nT\nE\n0C\n/\nT\n0T\n0\nM\n1T\n0\nM\n0\nTR0\nGATE0\nIN0PLXOR/INT0T0\nCrossbarCKCON\nT\n3\nM\nHT\n3\nM\nLS\nC\nA\n0S\nC\nA\n1T\n0\nMT\n2\nM\nHT\n2\nM\nLT\n1\nM\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 191SFR Definition  17.1.  TCON: Timer Control\nBit7: TF1: Timer 1 Overflow Flag.\nSet by hardware when Timer 1 overflows. This flag can be cleared by software but is auto-matically cleared when the CPU vectors to  the Timer 1 interrupt service routine.\n0: No Timer 1 overflow detected.1: Timer 1 has overflowed.\nBit6: TR1: Timer 1 Run Control. \n0: Timer 1 disabled.1: Timer 1 enabled.\nBit5: TF0: Timer 0 Overflow Flag.\nSet by hardware when Timer 0 overflows. This flag can be cleared by software but is auto-matically cleared when the CPU vectors to  the Timer 0 interrupt service routine.\n0: No Timer 0 overflow detected.1: Timer 0 has overflowed.\nBit4: TR0: Timer 0 Run Control. \n0: Timer 0 disabled.1: Timer 0 enabled.\nBit3: IE1: External Interrupt 1. \nThis flag is set by hardware when an edge/level of type defined by IT1 is detected. It can be cleared by software but is automatically cleared when the CPU vectors to the External Inter-rupt 1 service routine if IT1 = 1. When IT1 = 0, this flag is set to ‘1’ when /INT1 is active as \ndefined by bit IN1PL in register IT01CF (see SFR Definition 8.11).\nBit2: IT1: Interrupt 1 Type Select. \nThis bit selects whether the co nfigured /INT1 interrupt will be edge  or level sensitive. /INT1 \nis configured active low or high by the IN1PL bit in the IT01CF register (see SFR Definition 8.11).0: /INT1 is level triggered.1: /INT1 is edge triggered.\nBit1: IE0: External Interrupt 0. \nThis flag is set by hardware when an edge/level of type defined by IT0 is detected. It can be cleared by software but is automatically cleared when the CPU vectors to the External Inter-rupt 0 service routine if IT0 = 1. When IT0 = 0, this flag is set to ‘1’ when /INT0 is active as \ndefined by bit IN0PL in register IT01CF (see SFR Definition 8.11).\nBit0: IT0: Interrupt 0 Type Select. \nThis bit selects whether the co nfigured /INT0 interrupt will be edge  or level sensitive. /INT0 \nis configured active low or high by the IN0P L bit in register IT01CF (see SFR Definition \n8.11).0: /INT0 is level triggered.1: /INT0 is edge triggered.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nTF1 TR1 TF0 TR0 IE1 IT1 IE0 IT0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0x88\nC8051F310/1/2/3/4/5/6/7\n192 Rev. 1.8SFR Definition  17.2.  TMOD: Timer Mode\nBit7: GATE1: Timer 1 Gate Control.\n0: Timer 1 enabled when TR1 = 1 irrespective of /INT1 logic level.1: Timer 1 enabled only when TR1 = 1 AND /INT1 is active as defined by bit IN1PL in regis-\nter IT01CF (see SFR Definition 8.11).\nBit6: C/T1: Counter/Timer 1 Select. \n0: Timer Function: Timer 1 incremented by clock defined by T1M bit (CKCON.4).1: Counter Function: Timer 1 incremented by high-to-low transitions on external input pin \n(T1).\nBits5–4: T1M1–T1M0: Timer 1 Mode Select. \nThese bits select the Timer 1 operation mode.\nBit3: GATE0: Timer 0 Gate Control.\n0: Timer 0 enabled when TR0 = 1 irrespective of /INT0 logic level.1: Timer 0 enabled only when TR0 = 1 AND /INT0 is active as defined by bit IN0PL in regis-\nter IT01CF (see SFR Definition 8.11).\nBit2: C/T0: Counter/Timer Select. \n0: Timer Function: Timer 0 incremented by clock defined by T0M bit (CKCON.3).1: Counter Function: Timer 0 incremented by high-to-low transitions on external input pin \n(T0).\nBits1–0: T0M1–T0M0: Timer 0 Mode Select. \nThese bits select the Timer 0 operation mode.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nGATE1 C/T1 T1M1 T1M0 GATE0 C/T0 T0M1 T0M0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x89\nT1M1 T1M0 Mode\n0 0 Mode 0: 13-bit counter/timer0 1 Mode 1: 16-bit counter/timer\n1 0 Mode 2: 8-bit counter/timer with auto-reload\n1 1 Mode 3: Timer 1 inactive\nT0M1 T0M0 Mode\n0 0 Mode 0: 13-bit counter/timer\n0 1 Mode 1: 16-bit counter/timer1 0 Mode 2: 8-bit counter/timer with auto-reload\n1 1 Mode 3: Two 8-bit counter/timers\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 193SFR Definition  17.3.  CKCON: Clock Control\nBit7: T3MH: Timer 3 Hi gh Byte Clock Select.\nThis bit selects the clock supplied to the Timer 3 high byte if Timer 3 is configured in split 8-\nbit timer mode. T3MH is ignored if Timer 3 is in any other mode.0: Timer 3 high byte uses the clock defined by the T3XCLK bit in TMR3CN.1: Timer 3 high byte uses the system clock.\nBit6: T3ML: Timer 3 Lo w Byte Clock Select.\nThis bit selects the clock supplie d to Timer 3. If Timer 3 is c onfigured in split 8-bit timer \nmode, this bit selects the clock supplied to the lower 8-bit timer.0: Timer 3 low byte uses the clock defined by the T3XCLK bit in TMR3CN.1: Timer 3 low byte uses the system clock.\nBit5: T2MH: Timer 2 Hi gh Byte Clock Select.\nThis bit selects the clock supplied to the Timer 2 high byte if Timer 2 is configured in split 8-\nbit timer mode. T2MH is ignored if Timer 2 is in any other mode.0: Timer 2 high byte uses the clock defined by the T2XCLK bit in TMR2CN.1: Timer 2 high byte uses the system clock.\nBit4: T2ML: Timer 2 Lo w Byte Clock Select.\nThis bit selects the clock supplie d to Timer 2. If Timer 2 is c onfigured in split 8-bit timer \nmode, this bit selects the clock supplied to the lower 8-bit timer.0: Timer 2 low byte uses the clock defined by the T2XCLK bit in TMR2CN.1: Timer 2 low byte uses the system clock.\nBit3: T1M: Timer 1 Clock Select. \nThis select the clock source su pplied to Timer 1. T1M is ignore d when C/T1 is set to logic 1.\n0: Timer 1 uses the clock defined by the prescale bits, SCA1-SCA0.1: Timer 1 uses the system clock.\nBit2: T0M: Timer 0 Clock Select. \nThis bit selects the clock source  supplied to Timer 0. T0M is ignored when C/T0 is set to \nlogic 1.0: Counter/Timer 0 uses the clock defined by the prescale bits, SCA1-SCA0.1: Counter/Timer 0 uses the system clock.\nBits1–0: SCA1-SCA0: Time r 0/1 Prescale Bits.\nThese bits control the division of the clock su pplied to Timer 0 and/or Timer 1 if configured \nto use prescaled clock inputs.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nT3MH T3ML T2MH T2ML T1M T0M SCA1 SCA0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x8E\nSCA1 SCA0 Prescaled Clock\n0 0 System clock divided by 120 1 System clock divided by 4\n1 0 System clock divided by 48\n1 1 External clock divided by 8\nNote: External clock divided by 8 is synchronize d with the system clo ck, and the external \nclock must be less than or equal to th e system clock to op erate in this mode.\nC8051F310/1/2/3/4/5/6/7\n194 Rev. 1.8SFR Definition  17.4.  TL0: Timer 0 Low Byte\nSFR Definition  17.5.  TL1: Timer 1 Low Byte\nSFR Definition  17.6.  TH0: Timer 0 High Byte\nSFR Definition  17.7.  TH1: Timer 1 High ByteBits 7–0: TL0: Timer 0 Low Byte. \nThe TL0 register is the low byte of the 16-bit Timer 0.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x8A\nBits 7–0: TL1: Timer 1 Low Byte. \nThe TL1 register is the low byte of the 16-bit Timer 1.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x8B\nBits 7–0: TH0: Timer 0 High Byte. \nThe TH0 register is the high byte of the 16-bit Timer 0.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x8C\nBits 7–0: TH1: Timer 1 High Byte. \nThe TH1 register is the high byte of the 16-bit Timer 1.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x8D\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 19517.2. Timer 2\nTimer 2 is a 16-bit timer formed by two 8-bit SFRs: TMR2L (low byte) and TMR2H (high byte). Timer 2 may \noperate in 16-bit auto-reload mode or (split) 8-bit auto-reload mode. The T2SPLIT bit (TMR2CN.3) defines \nthe Timer 2 operation mode.\nTimer 2 may be clocked by the system  clock, the system clock divided by 12, or the external oscillator \nsource divided by 8. The external clock mode is ideal  for real-time clock (RTC) functionality, where the \ninternal oscillator drives t he system clock while Timer 2 (and/or the PCA) is clocked by an external preci -\nsion oscillator. Note that the external oscillator source divided by  8 is synchronized with the system clock.\n17.2.1. 16-bit Timer with Auto-Reload\nWhen T2SPLIT (TMR2CN.3) is zero, Timer 2 operates as  a 16-bit timer with auto-reload. Timer 2 can be \nclocked by SYSCLK, SYSCLK divided by 12, or the exte rnal oscillator clock source  divided by 8. As the \n16-bit timer register increments and overflows from 0xFFFF to 0x0000, the 16-bit value in the Timer 2 \nreload registers (TMR2RLH and TMR2RLL) is load ed into the Timer 2 register as shown in Figure  17.4, \nand the Timer 2 High Byte Overflow Flag (TMR2CN.7) is  set. If Timer 2 interrupts are enabled (if IE.5 is \nset), an interrupt will be generat ed on each Timer 2 overflow. Additiona lly, if Timer 2 inte rrupts are enabled \nand the TF2LEN bit is set (TMR2CN. 5), an interr upt will be generated each time the lower 8 bits (TMR2L) \noverflow from 0xFF to 0x00.\nFigure 17.4. Timer 2 16-Bi t Mode Block DiagramExternal Clock / 8SYSCLK / 12\nSYSCLKTMR2L TMR2H\nTMR2RLL TMR2RLH\nReloadTCLK0\n1TR2\nTMR2CNT2SPLITTF2LTF2H\nT2XCLKTR20\n1T2XCLK\nInterrupt\nTF2LENTo ADC, \nSMBusTo SMBus\nTMR2L \nOverflowCKCON\nT\n3\nM\nHT\n3\nM\nLS\nC\nA\n0S\nC\nA\n1T\n0\nMT\n2\nM\nHT\n2\nM\nLT\n1\nM\nC8051F310/1/2/3/4/5/6/7\n196 Rev. 1.817.2.2. 8-bit Timers with Auto-Reload\nWhen T2SPLIT is set, Timer 2 operates as two 8-bi t timers (TMR2H and TMR2L). Both 8-bit timers oper -\nate in auto-reload mode as shown in Figure  17.5. TMR2RLL holds the reload value for TMR2L; TMR2RLH \nholds the reload value fo r TMR2H. The TR2 bit in TMR2CN hand les the run control TMR2H. TMR2L is \nalways running when configured for 8-bit Mode.\nEach 8-bit timer may be c onfigured to use SYSCLK, SYSCLK divided by  12, or the external oscillator clock \nsource divided by 8. The Timer 2 Clo ck Select bits (T2MH and T2ML in  CKCON) select either SYSCLK or \nthe clock defined by the Timer 2 External Cloc k Select bit (T2XCLK in TMR2CN), as follows:\nNote: External clock divided by 8 is synchronized with  the system clock, and the external clock must be \nless than or equal to the system clock to operate in this mode.\nThe TF2H bit is set when TMR2H overflows from 0xFF to  0x00; the TF2L bit is set when TMR2L overflows \nfrom 0xFF to 0x00. When Timer 2 interrupts are enabled (IE.5), an interrupt is generated each time TMR2H overflows. If Timer 2 interrupts are enabled and  TF2LEN (TMR2CN.5) is set, an interrupt is gener\n-\nated each time either TMR2L or TMR2H overflows.  When TF2LEN is enabled, software must check the \nTF2H and TF2L flags to determine the source of the Timer 2 interrupt. The TF2H and TF2L interrupt flags are not cleared by hardware and must be manually cleared by software.\nFigure 17.5. Timer 2 8- Bit Mode Block DiagramT2MH T2XCLK TMR2H Clock \nSourceT2ML T2XCLK TMR2L Clock \nSource\n0 0 SYSCLK/12 0 0 SYSCLK/12\n0 1 External Clock/8 0 1 External Clock/81 X SYSCLK 1 X SYSCLK\nSYSCLKTCLK0\n1TR2External Clock / 8SYSCLK / 12 0\n1T2XCLK\n1\n0TMR2HTMR2RLHReload\nReload\nTCLK TMR2LTMR2RLLInterrupt TMR2CNT2SPLITTF2LENTF2LTF2H\nT2XCLKTR2\nTo ADC, \nSMBusTo SMBusCKCON\nT\n3\nM\nHT\n3\nM\nLS\nC\nA\n0S\nC\nA\n1T\n0\nMT\n2\nM\nHT\n2\nM\nLT\n1\nM\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 197SFR Definition  17.8.  TMR2CN: Timer 2 Control\nBit7: TF2H: Timer 2 High Byte Overflow Flag.\nSet by hardware when the Timer 2 high byte ov erflows from 0xFF to 0x00. In 16 bit mode, \nthis will occur when Timer 2 overflows from 0xFF FF to 0x0000. When the Timer 2 inte rrupt is \nenabled, setting this bit causes the CPU to vector to the Timer 2 interrupt service routine. TF2H is not automatically cleared by hard ware and must be cleared by software. \nBit6: TF2L: Timer 2 Low Byte Overflow Flag.\nSet by hardware when the Timer 2 low byte over flows from 0xFF to 0x00. When this bit is \nset, an interrupt will be generated if TF2LEN is  set and Timer 2 interr upts are enabled. TF2L \nwill set when the low byte overflow s regardless of the Timer 2 mo de. This bit is not automat-\nically cleared by hardware.\nBit5: TF2LEN: Timer 2 Low Byte Interrupt Enable.\nThis bit enables/disables Timer 2 Low Byte in terrupts. If TF2LEN is set and Timer 2 inter-\nrupts are enabled, an interrupt w ill be generated when the low byte of Timer 2 overflows. \nThis bit should be cleared when operating Timer 2 in 16-bit mode.0: Timer 2 Low Byte interrupts disabled.1: Timer 2 Low Byte interrupts enabled.\nBit4: UNUSED. Read = 0b . Write = don’t care.\nBit3: T2SPLIT: Timer 2 Split Mode Enable.\nWhen this bit is set, Timer 2 operates  as two 8-bit timers with auto-reload.\n0: Timer 2 operates in 16-bit auto-reload mode.1: Timer 2 operates as two 8-bit auto-reload timers.\nBit2: TR2: Timer 2 Run Control. \nThis bit enables/disables Timer 2. In 8-bit mode, this bit enables/disables TMR2H only; TMR2L is always enabled in this mode.0: Timer 2 disabled.1: Timer 2 enabled.\nBit1: UNUSED. Read = 0b . Write = don’t care.\nBit0: T2XCLK: Timer 2 External Clock Select.\nThis bit selects the external cl ock source for Timer 2. If Timer 2 is in 8-bit mode, this bit \nselects the external o scillator clock source for both time r bytes. However, the Timer 2 Clock \nSelect bits (T2MH and T2ML in register CK CON) may still be used to  select between the \nexternal clock and the system clock for either timer.0: Timer 2 external clock selection is the system clock divided by 12.1: Timer 2 external clock selection is the external clock divided by 8. Note that the external oscillator source divided by 8 is synchronized with the system clock.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nTF2H TF2L TF2LEN - T2SPLIT TR2 - T2XCLK 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xC8\nC8051F310/1/2/3/4/5/6/7\n198 Rev. 1.8SFR Definition  17.9.  TMR2RLL: Timer 2 Relo ad Register Low Byte\nSFR Definition  17.10.  TMR2RLH: Timer 2 Relo ad Register High Byte\nSFR Definition  17.11.  TMR2L: Timer 2 Low Byte\nSFR Definition  17.12.  TMR2H Timer 2 High Byte  Bits 7–0: TMR2RLL: Timer 2 Reload Register Low Byte. \nTMR2RLL holds the low byte of the reload value for Timer 2. R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xCA\nBits 7–0: TMR2RLH: Timer 2 Reload Register High Byte. \nThe TMR2RLH holds the high byte of the reload value for Timer 2.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xCB\nBits 7–0: TMR2L: Timer 2 Low Byte.\nIn 16-bit mode, the TMR2L register contains the low byte of the 16-bit Timer 2. In 8-bit mode, \nTMR2L contains the 8-bit low byte timer value.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xCC\nBits 7–0: TMR2H: Timer 2 High Byte.\nIn 16-bit mode, the TMR2H register contains t he high byte of the 16-bit Timer 2. In 8-bit \nmode, TMR2H contains the 8-bit high byte timer value.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xCD\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 19917.3. Timer 3\nTimer 3 is a 16-bit timer formed by two 8-bit SFRs: TMR3L (low byte) and TMR3H (high byte). Timer 3 may \noperate in 16-bit auto-reload mode or (split) 8-bit auto-reload mode. The T3SPLIT bit (TMR3CN.3) defines \nthe Timer  3 operation mode.\nTimer 3 may be clocked by the system  clock, the system clock divided by 12, or the external oscillator \nsource divided by 8. The external clock mode is ideal  for real-time clock (RTC) functionality, where the \ninternal oscillator drives t he system clock while Timer 3 (and/or the PCA) is clocked by an external preci -\nsion oscillator. Note that the external oscillator source divided by  8 is synchronized with the system clock.\n17.3.1. 16-bit Timer with Auto-Reload\nWhen T3SPLIT (TMR3CN.3) is zero, Timer 3 operates as  a 16-bit timer with auto-reload. Timer 3 can be \nclocked by SYSCLK, SYSCLK divided by 12, or the exte rnal oscillator clock source  divided by 8. As the \n16-bit timer register increments and overflows from 0xFFFF to 0x0000, the 16-bit value in the Timer 3 \nreload registers (TMR3RLH and TM32RLL) is loade d into the Timer 3 register as shown in Figure  17.4, \nand the Timer 3 High Byte Overflow Flag (TMR3CN.7) is  set. If Timer 3 interrupts are enabled, an interrupt \nwill be generated on each Timer 3 over flow. Additionally, if Timer 3 inte rrupts are enabled and the TF3LEN \nbit is set (TMR3CN.5), an interrupt will be generated each time the lower 8 bits  (TMR3L) overflow from \n0xFF to 0x00.\nFigure 17.6. Timer 3 16-Bi t Mode Block DiagramExternal Clock / 8SYSCLK / 12\nSYSCLKTMR3L TMR3H\nTMR3RLL TMR3RLH\nReloadTCLK0\n1TR3\nTMR3CNT3SPLITTF3LTF3H\nT3XCLKTR301T3XCLK\nInterrupt\nTF3LENTo ADCCKCON\nT\n3\nM\nHT\n3\nM\nLS\nC\nA\n0S\nC\nA\n1T\n0\nMT\n2\nM\nHT\n2\nM\nLT\n1\nM\nC8051F310/1/2/3/4/5/6/7\n200 Rev. 1.817.3.2. 8-bit Timers with Auto-Reload\nWhen T3SPLIT is set, Timer 3 operates as two 8-bi t timers (TMR3H and TMR3L). Both 8-bit timers oper -\nate in auto-reload mode as shown in Figure  17.5. TMR3RLL holds the reload value for TMR3L; TMR3RLH \nholds the reload value fo r TMR3H. The TR3 bit in TMR3CN hand les the run control TMR3H. TMR3L is \nalways running when configured for 8-bit Mode.\nEach 8-bit timer may be c onfigured to use SYSCLK, SYSCLK divided by  12, or the external oscillator clock \nsource divided by 8. The Timer 3 Clo ck Select bits (T3MH and T3ML in  CKCON) select either SYSCLK or \nthe clock defined by the Timer 3 External Cloc k Select bit (T3XCLK in TMR3CN), as follows:\nNote: External clock divided by 8 is synchronized with  the system clock, and the external clock must be \nless than or equal to the system clock to operate in this mode.\nThe TF3H bit is set when TMR3H overflows from 0xFF to  0x00; the TF3L bit is set when TMR3L overflows \nfrom 0xFF to 0x00. When Timer 3 interrupts are enabled, an interrupt is generated each time TMR3H over -\nflows. If Timer 3 interrupts are enabled and TF3LEN (TMR3CN.5) is set, an interrupt is generated each \ntime either TMR3L or TMR3H overflows. When TF3LE N is enabled, software must check the TF3H and \nTF3L flags to determine the source of the Timer 3 interrupt. The TF3H and TF3L interrupt flags are not cleared by hardware and must be manually cleared by software.\nFigure 17.7. Timer 3 8- Bit Mode Block DiagramT3MH T3XCLK TMR3H Clock \nSourceT3ML T3XCLK TMR3L Clock \nSource\n0 0 SYSCLK/12 0 0 SYSCLK/12\n0 1 External Clock/8 0 1 External Clock/81 X SYSCLK 1 X SYSCLK\nSYSCLKTCLK0\n1TR3External Clock / 8SYSCLK / 12 01T3XCLK\n10TMR3HTMR3RLHReload\nReload\nTCLK TMR3LTMR3RLLInterrupt TMR3CNT3SPLITTF3LENTF3LTF3H\nT3XCLKTR3\nTo ADCCKCON\nT\n3\nM\nHT\n3\nM\nLS\nC\nA\n0S\nC\nA\n1T\n0\nMT\n2\nM\nHT\n2\nM\nLT\n1\nM\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 201SFR Definition  17.13.  TMR3CN: Timer 3 Control\nBit7: TF3H: Timer 3 High Byte Overflow Flag.\nSet by hardware when the Timer 3 high byte ov erflows from 0xFF to 0x00. In 16 bit mode, \nthis will occur when Timer 3 overflows from 0xFF FF to 0x0000. When the Timer 3 inte rrupt is \nenabled, setting this bit causes the CPU to vector to the Timer 3 interrupt service routine. TF3H is not automatically cleared by hard ware and must be cleared by software. \nBit6: TF3L: Timer 3 Low Byte Overflow Flag.\nSet by hardware when the Timer 3 low byte over flows from 0xFF to 0x00. When this bit is \nset, an interrupt will be generated if TF3LEN is  set and Timer 3 interr upts are enabled. TF3L \nwill set when the low byte overflow s regardless of the Timer 3 mo de. This bit is not automat-\nically cleared by hardware.\nBit5: TF3LEN: Timer 3 Low Byte Interrupt Enable.\nThis bit enables/disables Timer 3 Low Byte in terrupts. If TF3LEN is set and Timer 3 inter-\nrupts are enabled, an interrupt w ill be generated when the low byte of Timer 3 overflows. \nThis bit should be cleared when operating Timer 3 in 16-bit mode.0: Timer 3 Low Byte interrupts disabled.1: Timer 3 Low Byte interrupts enabled.\nBit4: UNUSED. Read = 0b . Write = don’t care.\nBit3: T3SPLIT: Timer 3 Split Mode Enable.\nWhen this bit is set, Timer 3 operates  as two 8-bit timers with auto-reload.\n0: Timer 3 operates in 16-bit auto-reload mode.1: Timer 3 operates as two 8-bit auto-reload timers.\nBit2: TR3: Timer 3 Run Control. \nThis bit enables/disables Timer 3. In 8-bit mode, this bit enables/disables TMR3H only; TMR3L is always enabled in this mode.0: Timer 3 disabled.1: Timer 3 enabled.\nBit1: UNUSED. Read = 0b . Write = don’t care.\nBit0: T3XCLK: Timer 3 External Clock Select.\nThis bit selects the external cl ock source for Timer 3. If Timer 3 is in 8-bit mode, this bit \nselects the external o scillator clock source for both time r bytes. However, the Timer 3 Clock \nSelect bits (T3MH and T3ML in register CK CON) may still be used to  select between the \nexternal clock and the system clock for either timer.0: Timer 3 external clock selection is the system clock divided by 12.1: Timer 3 external clock selection is the external clock divided by 8. Note that the external oscillator source divided by 8 is synchronized with the system clock.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nTF3H TF3L TF3LEN - T3SPLIT TR3 - T3XCLK 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x91\nC8051F310/1/2/3/4/5/6/7\n202 Rev. 1.8SFR Definition  17.14.  TMR3RLL: Timer 3 Reload Register Low Byte\nSFR Definition  17.15.  TMR3RLH: Timer 3 Relo ad Register High Byte\nSFR Definition  17.16.  TMR3L: Timer 3 Low Byte\nSFR Definition  17.17.  TMR3H Timer 3 High ByteBits 7–0: TMR3RLL: Timer 3 Reload Register Low Byte. \nTMR3RLL holds the low byte of the reload value for Timer 3. R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x92\nBits 7–0: TMR3RLH: Timer 3 Reload Register High Byte. \nThe TMR3RLH holds the high byte of the reload value for Timer 3.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x93\nBits 7–0: TMR3L: Timer 3 Low Byte.\nIn 16-bit mode, the TMR3L register contains the low byte of the 16-bit Timer 3. In 8-bit mode, \nTMR3L contains the 8-bit low byte timer value.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x94\nBits 7–0: TMR3H: Timer 3 High Byte.\nIn 16-bit mode, the TMR3H register contains t he high byte of the 16-bit Timer 3. In 8-bit \nmode, TMR3H contains the 8-bit high byte timer value.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0x95\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 20318. Programmable Counter Array  \nThe Programmable Counter Array (PCA0) provides enhanced timer functionality while requiring less CPU \nintervention than the standard 8051 counter/timers. Th e PCA consists of a dedicated 16-bit counter/timer \nand five 16-bit capture/compare modules. Each capture/compare module has its own associated I/O line (CEXn) which is routed through the Crossbar to Port I/O when enabled (See \nSection “13.1.  Priority \nCrossbar Decoder” on page  131 for details on configuring the Crossbar). The counter/timer is driven by \na programmable timebase that can select between six so urces: system clock, system clock divided by four, \nsystem clock divided by twelve, the external oscillator clock source divided by 8, Timer 0 overflow, or an \nexternal clock signal on the ECI input pin. Each capture/compare module may be configured to operate \nindependently in one of six modes: Edge-Triggered Capture, Software Timer, High-Speed Output, Fre -\nquency Output, 8-Bit PWM, or 16-Bit  PWM (each mode is described in Section “18.2.  Capture/Compare \nModules” on page  205). The external oscillator clock option is i deal for real-time clock (RTC) functionality, \nallowing the PCA to be clocked by a precision external oscill ator while the internal oscillator drives the sys -\ntem clock. The PCA is configured and controlled th rough the system controller\'s Special Function Regis -\nters. The PCA block diagram is shown in Figure  18.1\nImportant Note:  The PCA Module 4 may be used as a watchdog  timer (WDT), and is enabled in this mode \nfollowing a system reset. Access to certain PCA regi sters is restricted while WDT mode is enabled. See \nSection 18.3  for details.\nFigure 18.1. PCA Block DiagramCapture/Compare\nModule 1Capture/Compare\nModule 0Capture/Compare\nModule 2Capture/Compare\nModule 3Capture/Compare\nModule 4 / WDT\nCEX1\nECI\nCrossbarCEX2CEX3CEX4\nCEX0\nPort I/O16-Bit Counter/TimerPCA\nCLOCK\nMUXSYSCLK/12\nSYSCLK/4\nTimer 0 Overflow\n   ECI\nSYSCLK\nExternal Clock/8\nC8051F310/1/2/3/4/5/6/7\n204 Rev. 1.818.1. PCA Counter/Timer\nThe 16-bit PCA counter/timer consists of two 8-bi t SFRs: PCA0L and PCA0H. PCA0H is the high byte \n(MSB) of the 16-bit counter/timer and PCA0L is the low byte (LSB).   Reading PC A0L automatically latches \nthe value of PCA0H into a “snapshot” register; the following PCA0H read accesses th is “snapshot” register. \nReading the PCA0L Register first guarantees an accurate reading of the entire 16-bit PCA0 counter.  \nReading PCA0H or PCA0L does not disturb the counte r operation. The CPS2-CPS0 bits in the PCA0MD \nregister select the timebase for the counter/timer as shown in Table 18.1. Note that in ‘External oscillator \nsource divided by 8’ mode, the external oscillat or source is synchronized with the system clock, \nand must have a frequency less than or equal to the system clock.\nWhen the counter/timer overflows from 0xFFFF to 0x0 000, the Counter Overflow Fl ag (CF) in PCA0MD is \nset to logic 1 and an interrupt request is generated if  CF interrupts are enabled. Setting the ECF bit in \nPCA0MD to logic 1 enables the CF flag to generate an interrupt request. The CF bit is not automatically \ncleared by hardware when the CPU vectors to the in terrupt service routine, and must be cleared by soft -\nware (Note: PCA0 interrupts must be globally enabled before CF interrupts are recognized. PCA0 inter -\nrupts are globally enabled by setting the EA bit (IE.7)  and the EPCA0 bit in EIE1 to logic 1). Clearing the \nCIDL bit in the PCA0MD register a llows the PCA to continue normal op eration while the CPU is in Idle \nmode.\n \nFigure 18.2. PCA Counter /Timer Block DiagramTable  18.1.  PCA Timebase Input Options\nCPS2 CPS1 CPS0 Timebase\n0 0 0 System clock divided by 12\n0 0 1 System clock divided by 40 1 0 Timer 0 overflow\n0 1 1 High-to-low transitions on ECI (max rate = system clock divided by 4)\n1 0 0 System clock1 0 1 External oscillator source divided by 8*\n*Note:  External oscillator source divided by 8 is synchronized with the system clock. \nPCA0CN\nC\nFCR CC\nF\n0C\nC\nF\n2C\nC\nF\n1C\nC\nF\n4C\nC\nF\n3PCA0MD\nC\nI\nD\nLW\nD\nT\nEE\nC\nFC\nPS\n1C\nPS\n0W\nD\nL\nC\nKC\nPS\n2IDLE\n0\n1PCA0H PCA0LSnapshot\nRegisterTo SFR Bus\nOverflowTo PCA Interrupt System\nCFPCA0L\nread\nTo PCA ModulesSYSCLK/12\nSYSCLK/4\nTimer 0 Overflow\nECI000\n001\n010011\n100101SYSCLK\nExternal Clock/8\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 20518.2. Capture/Compare Modules\nEach module can be configured to operate independently in one of six operation modes: Edge-triggered \nCapture, Software Timer, High Speed Output, Frequency Output, 8-Bit Pulse Width Modulator, or 16-Bit Pulse Width Modulator. Each module has Special Func tion Registers (SFRs) asso ciated with it in the CIP-\n51 system controller. These registers are used to exchange data with a module and configure the module\'s \nmode of operation. \nTable  18.2 summarizes the bit settings in  the PCA0CPMn registers used to select the PCA capture/com -\npare module’s operating modes. Setting the ECCFn bi t in a PCA0CPMn register enables the module\'s \nCCFn interrupt. Note: PCA0 interrupts must be globally enabled before individual CCFn interrupts are rec -\nognized. PCA0 interrupts are globally enabled by se tting the EA bit and the EPCA0 bit to logic 1. See \nFigure  18.3 for details on the PCA interrupt configuration.\n \nFigure 18.3. PCA Interrupt Block DiagramTable  18.2.  PCA0CPM Register Settings fo r PCA Capture/Compare Modules\nPWM16 ECOM CAPP CAPN MAT TOG PWM ECCF Operation Mode\nX X 10000XCapture triggered by positive edge \non CEXn\nX X 01000XCapture triggered by negative edge \non CEXn\nX X 11000XCapture triggered by transition on \nCEXn\nX 1 00100X S o f t w a r e  T i m e r\nX 1 00110X H i g h  S p e e d  O u t p u t\nX 1 0 0 X 1 1 X Frequency Output\n0 1 0 0 X 0 1 X 8-Bit Pulse Width Modulator\n1 1 0 0 X 0 1 X 16-Bit Pulse Width Modulator\nX = Don’t Care\nPCA0CN\nC\nFCR CC\nF\n0CC\nF\n2CC\nF\n1CC\nF\n4CC\nF\n3PCA0MD\nC\nI\nD\nLW\nD\nT\nEE\nC\nFC\nPS\n1C\nPS\n0W\nD\nL\nC\nKC\nPS\n2\n0\n1PCA Module 0\n(CCF0)\nPCA Module 1\n(CCF1)ECCF10\n1ECCF0\n01 PCA Module 2\n(CCF2)ECCF2\n0\n1PCA Module 3\n(CCF3)ECCF3\n0\n1PCA Module 4\n(CCF4)ECCF4PCA Counter/\nTimer Overflow0\n1\nInterrupt\nPriorityDecoderEPCA0\n0\n1EA\n01PCA0CPMn(for n = 0 to 4)\nP\nW\nM\n1\n6\nnE\nC\nOM\nnE\nCC\nF\nnT\nOG\nnP\nW\nM\nnC\nAPP\nnC\nAP\nN\nnM\nA\nT\nn\nC8051F310/1/2/3/4/5/6/7\n206 Rev. 1.818.2.1. Edge-triggered Capture Mode\nIn this mode, a valid transition on the CEXn pin ca uses the PCA to capture th e value of the PCA counter/\ntimer and load it into the corresponding module\'s  16-bit capture/compare register (PCA0CPLn and \nPCA0CPHn). The CAPPn and CAPNn bits  in the PCA0CPMn register are used to select the type of transi -\ntion that triggers the capture: low-to-high transition (p ositive edge), high-to-low transition (negative edge), \nor either transition (positive or negative edge). When  a capture occurs, the Capture/Compare Flag (CCFn) \nin PCA0CN is set to logic 1 and an interrupt request is generated if CCF interrupts are enabled. The CCFn bit is not automatically cleared by hardware when th e CPU vectors to the interrupt service routine, and \nmust be cleared by software . If both CAPPn and CAPNn bits are set to  logic 1, then the state of the Port \npin associated with CEXn can be read directly to de termine whether a rising-edge or falling-edge caused \nthe capture.\nFigure 18.4. PCA Capture Mode Diagram\nNote:  The CEXn input signal must remain high or low for at least 2 system clock cycl es in order to be valid.PCA0LPCA0CPLn\nPCA\nTimebaseCEXnCrossbar Port I/O\nPCA0HCapturePCA0CPHn\n0\n10\n1\n(to CCFn)PCA0CPMn\nP\nW\nM\n1\n6\nnE\nC\nO\nM\nnE\nC\nC\nF\nnT\nO\nG\nnP\nW\nM\nnC\nA\nP\nP\nnC\nA\nP\nN\nnM\nA\nT\nnPCA0CN\nC\nFCR CC\nF\n0CC\nF\n2CC\nF\n1CC\nF\n4CC\nF\n3PCA Interrupt\n0x 0 0 xx\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 20718.2.2. Software Timer (Compare) Mode\nIn Software Timer mode, the PCA c ounter/timer value is compared to the module\'s 16-bit capture/compare \nregister (PCA0CPHn and PCA0CPLn). When a match occurs, the Capture/Compare Flag (CCFn) in \nPCA0CN is set to logic  1 and an interrupt request is generated if CCF interrupts are enabled. The CCFn bit \nis not automatically cleared by hard ware when the CPU vectors to the interrupt service routine, and must \nbe cleared by software. Setting the ECOMn and MATn bits in the PCA0CPMn register enables Software Timer mode.\nImportant Note About Capture/Compare Registers : When writing a 16-bit value to the PCA0 Capture/\nCompare registers, the low byte should always be wri tten first. Writing to PCA0CPLn clears the ECOMn bit \nto ‘0’; writing to PCA0 CPHn sets ECOMn to ‘1’.\nFigure 18.5. PCA Software Timer Mode DiagramMatch16-bit Comparator\nPCA0HPCA0CPHn\nEnable\nPCA0LPCA\nTimebasePCA0CPLn\n00 00\n0\n1xENB\nENB0\n1Write to\nPCA0CPLn\nWrite to\nPCA0CPHnReset\nPCA0CPMn\nP\nW\nM\n16nE\nC\nOM\nnE\nC\nC\nF\nnT\nO\nG\nnP\nW\nM\nnC\nA\nPP\nnC\nA\nP\nN\nnM\nA\nT\nn\nxPCA0CN\nC\nFCR CC\nF\n0CC\nF\n2CC\nF\n1CC\nF\n4CC\nF\n3PCA Interrupt\nC8051F310/1/2/3/4/5/6/7\n208 Rev. 1.818.2.3. High-Speed Output Mode\nIn High Speed Output mode, a module’s associated CEXn pin is toggled each time a match occurs \nbetween the PCA Counter and the module\'s 16- bit capture/compare register (PCA0CPHn and \nPCA0CPLn) Setting the TOGn, MATn, and ECOMn bits  in the PCA0CPMn register enables the High-\nSpeed Output mode. \nImportant Note About Capture/Compare Registers : When writing a 16-bit value to the PCA0 Capture/\nCompare registers, the low byte should always be wri tten first. Writing to PCA0CPLn clears the ECOMn bit \nto ‘0’; writing to PCA0 CPHn sets ECOMn to ‘1’.\nFigure 18.6. PCA High Speed  Output Mode DiagramMatch16-bit Comparator\nPCA0HPCA0CPHn\nEnable\nPCA0LPCA\nTimebasePCA0CPLn\n0\n100 0xENB\nENB0\n1Write to\nPCA0CPLn\nWrite to\nPCA0CPHnReset\nPCA0CPMn\nP\nW\nM\n16nE\nC\nOM\nnE\nCC\nF\nnT\nOG\nnP\nW\nM\nnC\nAPP\nnC\nAP\nN\nnM\nA\nT\nn\nx\nCEXnCrossbar Port I/OToggle\n0\n1TOGnPCA0CN\nC\nFCR CC\nF\n0C\nC\nF\n2C\nC\nF\n1C\nC\nF\n4C\nC\nF\n3PCA Interrupt\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 20918.2.4. Frequency Output Mode\nFrequency Output Mode produces a programmable-freq uency square wave on the module’s associated \nCEXn pin. The capture/compare module high byte holds the number of PCA clocks to count before the out -\nput is toggled. The frequency of the square wave is then defined by Equation  18.1, where FPCA is the fre -\nquency of the clock selected by the CPS2 -0 bits in the PCA mode register, PCA0MD.\nNote: A value of 0x00 in the PCA0CPHn regi ster is equal to 256 for this equation.\nThe lower byte of the capture/compare module is co mpared to the PCA counter low byte; on a match, \nCEXn is toggled and the offset held in the high byte is added to the matched value in PCA0CPLn. Fre -\nquency Output Mode is enabled by setting the ECOM n, TOGn, and PWMn bits in the PCA0CPMn register.\nFigure 18.7. PCA Frequency Output ModeEquation 18.1. Square Wave Frequency Output\nFCEXnFPCA\n2PCA 0CPHn\uf0b4------------------- --------------------- - =\n8-bit\nComparator\nPCA0LEnable\nPCA TimebasematchPCA0CPHn 8-bit Adder PCA0CPLn\nAdder\nEnable\nCEXnCrossbar Port I/OToggle\n0\n1TOGn\n000 xPCA0CPMn\nP\nW\nM\n16nE\nC\nOM\nnE\nCC\nF\nnT\nOG\nnP\nW\nM\nnC\nAPP\nnC\nAP\nN\nnM\nA\nT\nn\nxENB\nENB0\n1Write to\nPCA0CPLn\nWrite to\nPCA0CPHnReset\nC8051F310/1/2/3/4/5/6/7\n210 Rev. 1.818.2.5. 8-Bit Pulse Width Modulator Mode\nEach module can be used independently to generate a pulse width modulated (PWM) output on its associ -\nated CEXn pin. The frequency of the output is depe ndent on the timebase for the PCA counter/timer. The \nduty cycle of the PWM output signal is varied using the module\'s PCA0CPLn capture/compare register. When the value in the low byte of the PCA counter/ti mer (PCA0L) is equal to the value in PCA0CPLn, the \noutput on the CEXn pin will be se t. When the count value in PCA0L overflows, the CEXn output will be \nreset (see \nFigure  18.8). Also, when the counter/timer low byte (PCA0L) overflows from 0xFF to 0x00, \nPCA0CPLn is reloaded automatically with the value stored in the module’s capture/compare high byte \n(PCA0CPHn) without software intervention. Setting t he ECOMn and PWMn bits in the PCA0CPMn register \nenables 8-Bit Pulse Width Modulator mode. The duty cycle for 8-Bit PWM Mode is given by Equation  18.2. \nImportant Note About Capture/Compare Registers : When writing a 16-bit value to the PCA0 Capture/\nCompare registers, the low byte should always be wri tten first. Writing to PCA0CPLn clears the ECOMn bit \nto ‘0’; writing to PCA0 CPHn sets ECOMn to ‘1’.\nUsing Equation  18.2, the largest duty cycle is 100% (PCA0CPH n = 0), and the smallest duty cycle is \n0.39% (PCA0CPHn = 0xFF). A 0% duty cycle may be  generated by clearing the ECOMn bit to ‘0’.\nFigure 18.8. PCA 8-Bi t PWM Mode DiagramDutyCycle256 PCA 0CPHn –\uf028\uf029\n256------------------ ----------------- ---------------- =Equation 18.2. 8-Bit PWM Duty Cycle\n8-bit\nComparator\nPCA0LPCA0CPLnPCA0CPHn\nCEXnCrossbar Port I/OEnable\nOverflowPCA Timebase00x0 x\nQQSET\nCLRS\nRmatchPCA0CPMn\nP\nW\nM\n1\n6\nnE\nC\nO\nM\nnE\nC\nC\nF\nnT\nO\nG\nnP\nW\nM\nnC\nA\nP\nP\nnC\nA\nP\nN\nnM\nA\nT\nn\n0ENB\nENB0\n1Write to\nPCA0CPLn\nWrite to\nPCA0CPHnReset\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 21118.2.6. 16-Bit Pulse Width Modulator Mode\nA PCA module may also be operated in 16-Bit PWM mode. In this mode, the 16-bit capture/compare mod -\nule defines the number of PCA clocks for the low time of the PWM signal. When the PCA counter matches \nthe module contents, the output on CEXn is asserted high; when the counter over flows, CEXn is asserted \nlow. To output a varying duty cycle, new value wr ites should be synchroniz ed with PCA CCFn match inter -\nrupts. 16-Bit PWM Mode is enabled by setting the ECOMn, PWMn, and PWM16n bits in the PCA0CPMn \nregister. For a varying duty cycle, match interrupts  should be enabled (ECCFn = 1 AND MATn = 1) to help \nsynchronize the capture/co mpare register writes. The duty cycle for 16-Bit PWM Mode is given by \nEquation  18.3. \nImportant Note About Capture/Compare Registers : When writing a 16-bit value to the PCA0 Capture/\nCompare registers, the low byte should always be wri tten first. Writing to PCA0CPLn clears the ECOMn bit \nto ‘0’; writing to PCA0CP Hn sets ECOMn to ‘1’. \nUsing Equation  18.3, the largest duty cycle is 100% (PCA0CPn  = 0), and the smallest duty cycle is \n0.0015% (PCA0CPn = 0xFFFF). A 0% duty cycle may be  generated by clearing the ECOMn bit to ‘0’. \nFigure 18.9. PCA 16-Bit PWM ModeEquation 18.3. 16-Bit  PWM Duty Cycle\nDutyCycle65536 PCA 0CPn –\uf028\uf029\n65536------------------ ------------------ ---------------- - =\nPCA0CPLn PCA0CPHn\nEnable\nPCA Timebase00x0 xPCA0CPMn\nP\nW\nM\n1\n6\nnE\nC\nOM\nnE\nCC\nF\nnT\nOG\nnP\nW\nM\nnC\nAPP\nnC\nAP\nN\nnM\nA\nT\nn\n1\n16-bit ComparatorCEXnCrossbar Port I/O\nOverflowQQSET\nCLRS\nRmatch\nPCA0H PCA0LENB\nENB0\n1Write to\nPCA0CPLn\nWrite to\nPCA0CPHnReset\nC8051F310/1/2/3/4/5/6/7\n212 Rev. 1.818.3. Watchdog Timer Mode\nA programmable watchdog timer (WDT) function is avai lable through the PCA Module 4. The WDT is used \nto generate a reset if the time between writes to th e WDT update register (PCA0CPH4) exceed a specified \nlimit. The WDT can be configured and enabled/disabled as needed by software.\nWith the WDTE bit set in the PCA0MD register, Modu le 4 operates as a watchdog timer (WDT). The Mod -\nule 4 high byte is compared to the PCA counter high byte; the Module 4 low byte holds the offset to be \nused when WDT updates are performed. The Watchdog Timer is enabled on reset. Writes to some \nPCA registers are restricted while the Watchdog Timer is enabled.\n18.3.1. Watchdog Timer Operation\nWhile the WDT is enabled:\n• PCA counter is forced on.\n• Writes to PCA0L and PCA0H are not allowed.\n• PCA clock source bits (CPS2-CPS0) are frozen.\n• PCA Idle control bi t (CIDL) is frozen.\n• Module 4 is forced in to software timer mode.\n• Writes to the Module 4 mode register (PCA0CPM4) are disabled.\nWhile the WDT is enabled, writes to the CR bit will not change the PCA counter state; the counter will run \nuntil the WDT is disabled. The PCA co unter run co ntrol (CR) will read zero if the WDT is enabled but user \nsoftware has not enabled the PCA counter. If a ma tch occurs between PCA0CPH4 and PCA0H while the \nWDT is enabled, a reset will be gener ated. To prevent a WDT reset, the WDT may be updated with a write \nof any value to PCA0CPH4. Upon a PCA0CPH4 write, PCA0H plus the offset held in PCA0CPL4 is loaded \ninto PCA0CPH4 (See Figure  18.10 ). \nFigure 18.10. PCA Module 4 wi th Watchdog Timer EnabledPCA0HEnable\nPCA0L OverflowReset\nPCA0CPL4 8-bit AdderPCA0CPH4\nAdder\nEnablePCA0MD\nC\nI\nD\nLW\nD\nT\nEE\nC\nFC\nPS\n1C\nPS\n0W\nD\nL\nC\nKC\nPS\n2\nMatch\nWrite to\nPCA0CPH48-bit\nComparator\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 213Note that the 8-bit offset held in PCA0CPH4 is comp ared to the upper byte of the 16-bit PCA counter. This \noffset value is the number of PCA0L overflows before a reset. Up to 256 PCA clocks may pass before the \nfirst PCA0L overflow occurs, depending on the valu e of the PCA0L when the update is performed. The \ntotal offset is then given (in PCA clocks) by Equation  18.4, where PCA0L is the value of the PCA0L register \nat the time of the update.\nThe WDT reset is generated when PCA0L overflow s while there is a match between PCA0CPH4 and \nPCA0H. Software may force a WDT reset by writing a ‘1’ to the CCF4 flag (PCA0CN.4) while the WDT is \nenabled.\n18.3.2. Watchdog Timer Usage\nTo configure the WDT, perform the following tasks:\n• Disable the WDT by writing a ‘0’ to the WDTE bit.\n• Select the desired PCA clock s ource (with the CPS2-CPS0 bits).\n• Load PCA0CPL4 with the desi red WDT update offset value.\n• Configure the PCA Idle mode (set CIDL if the WDT should be suspended while the CPU is in Idle \nmode).\n• Enable the WDT by setting the WDTE bit to ‘1’.\n• Write a value to PCA0CPH4 to reload the WDT.\nThe PCA clock source and Idle mode select cannot be changed while the WDT is enabled. The watchdog timer is enabled by setting the WDTE or WDLCK bits in the PCA0MD register. When WDLCK is set, the \nWDT cannot be disabled until the next  system reset. If WDLCK is not set, the WDT is disabled by clearing \nthe WDTE bit. \nThe WDT is enabled following any rese t. The PCA0 counter clock defaults to the system clock divided by \n12, PCA0L defaults to 0x00, and PCA0CPL4 defaults to 0x00. Using Equation  18.4, this results in a WDT \ntimeout interval of 256 system clock cycles. Table  18.3 lists some example timeout intervals for typical sys -\ntem clocks.Equation 18.4. Watchdog Time r Offset in PCA Clocks\nOffset 256 PCA 0CPL 4 \uf0b4\uf028\uf029 256 PCA 0L –\uf028\uf029+ =\nC8051F310/1/2/3/4/5/6/7\n214 Rev. 1.8Table  18.3.  Watchdog Timer Timeout Intervals1  \nSystem Clock (Hz) PCA0CPL4 Timeout Interval (ms)\n24,500,000 255 32.124,500,000 128 16.2\n24,500,000 32 4.1\n18,432,000 255 42.718,432,000 128 21.5\n18,432,000 32 5.5\n11,059,200 255 71.111,059,200 128 35.8\n11,059,200 32 9.2\n3,062,500\n2 255 257\n3,062,5002 128 129.5\n3,062,5002 32 33.1\n32,000 255 24576\n32,000 128 1238432,000 32 3168\nNotes:\n1.Assumes SYSCLK / 12 as the PC A clock source, and a PCA0L \nvalue of 0x00 at the update time.\n2. Internal oscillator reset frequency.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 21518.4. Register Descriptions for PCA\nFollowing are detailed descriptions of the special func tion registers related to the operation of the PCA.\nSFR Definition  18.1.  PCA0CN: PCA Control\nBit7: CF: PCA Counter/Timer Overflow Flag.\nSet by hardware when the PCA Counter/Timer overflows from 0xFFFF to 0x0000. When the \nCounter/Timer Overflow (CF) inte rrupt is enabled, setting this bit causes the CPU to vector \nto the PCA interrupt service routine. This bi t is not automatically cleared by hardware and \nmust be cleared by software.\nBit6: CR: PCA Counter/ Timer Run Control. \nThis bit enables/disables the PCA Counter/Timer. 0: PCA Counter/Timer disabled.1: PCA Counter/Timer enabled.\nBit5: UNUSED. Read = 0b, Write = don\'t care.Bit4: CCF4: PCA Module 4 Capture/Compare Flag. \nThis bit is set by hardware when a match or capture occurs. When t he CCF4 interrupt is \nenabled, setting this bit causes the CPU to vect or to the PCA interrupt service routine. This \nbit is not automatically cleared by hard ware and must be cleared by software.\nBit3: CCF3: PCA Module 3 Capture/Compare Flag. \nThis bit is set by hardware when a match or capture occurs. When t he CCF3 interrupt is \nenabled, setting this bit causes the CPU to vect or to the PCA interrupt service routine. This \nbit is not automatically cleared by hard ware and must be cleared by software.\nBit2: CCF2: PCA Module 2 Capture/Compare Flag. \nThis bit is set by hardware when a match or capture occurs. When t he CCF2 interrupt is \nenabled, setting this bit causes the CPU to vect or to the PCA interrupt service routine. This \nbit is not automatically cleared by hard ware and must be cleared by software.\nBit1: CCF1: PCA Module 1 Capture/Compare Flag. \nThis bit is set by hardware when a match or capture occurs. When t he CCF1 interrupt is \nenabled, setting this bit causes the CPU to vect or to the PCA interrupt service routine. This \nbit is not automatically cleared by hard ware and must be cleared by software.\nBit0: CCF0: PCA Module 0 Capture/Compare Flag. \nThis bit is set by hardware when a match or capture occurs. When t he CCF0 interrupt is \nenabled, setting this bit causes the CPU to vect or to the PCA interrupt service routine. This \nbit is not automatically cleared by hard ware and must be cleared by software.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nCF CR CCF4 CCF3 CCF2 CCF1 CCF0 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n(bit addressable) 0xD8\nC8051F310/1/2/3/4/5/6/7\n216 Rev. 1.8SFR Definition  18.2.  PCA0MD: PCA Mode\nBit7: CIDL: PCA Counte r/Timer Idle Control.\n Specifies PCA behavior wh en CPU is in Idle Mode.\n0: PCA continues to function normally while the system controller is in Idle Mode.\n1: PCA operation is suspended while the system controller is in Idle Mode.\nBit6: WDTE: Watchdog Timer Enable\nIf this bit is set, PCA Module 4 is used as the watchdog timer. 0: Watchdog Timer disabled.1: PCA Module 4 enabled as Watchdog Timer.\nBit5: WDLCK: Watchdog Timer Lock\nThis bit locks/unlocks the Watchdog Timer En able. When WDLCK is set, the Watchdog \nTimer may not be disabled until the next system reset.0: Watchdog Timer Enable unlocked.1: Watchdog Timer Enable locked.\nBit4: UNUSED. Read = 0b, Write = don\'t care.Bits3–1: CPS2–CPS0: PCA Coun ter/Timer Pulse Select. \nThese bits select the timebase source for the PCA counter\n.\nBit0: ECF: PCA Counter/Timer Overflow Interrupt Enable. \nThis bit sets the masking of the PCA Co unter/Timer Overflow  (CF) interrupt. \n0: Disable the CF interrupt.1: Enable a PCA Counter/Timer Overflow interrupt request when CF (PCA0CN.7) is set.\nNote: When the WDTE bit is set to ‘1 ’, the PCA0MD register cannot be modified. To change the contents \nof the PCA0MD register, the Watch dog Timer must first be disabled.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nCIDL WDTE WDLCK CPS2 CPS1 CPS0 ECF 01000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xD9\nCPS2 CPS1 CPS0 Timebase\n0 0 0 System clock divided by 120 0 1 System clock divided by 4\n0 1 0 Timer 0 overflow\n011High-to-low transitions on ECI (max rate = system clock \ndivided by 4)\n1 0 0 System clock\n1 0 1 External clock divided by 8*\n1 1 0 Reserved1 1 1 Reserved\n*Note:  External oscillator source divided by 8 is synchronized with the system clock.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 217SFR Definition  18.3.  PCA0CPMn: PCA Capture/Co mpare Mode Registers\nPCA0CPMn Address: PCA0CPM0 = 0xDA (n = 0), PCA0CPM1 = 0xDB (n = 1),\nPCA0CPM2 = 0xDC (n = 2), PCA0CPM3 = 0xDD (n = 3),\nPCA0CPM4 = 0xDE (n = 4)\nBit7: PWM16n: 16-bit Pulse Width Modulation Enable.\nThis bit selects 16-bit mode when Pulse Width Modulation mode is enabled (PWMn = 1).\n0: 8-bit PWM selected.1: 16-bit PWM selected. \nBit6: ECOMn: Comparator Function Enable. \nThis bit enables/disables the comparator function for PCA module n. 0: Disabled.\n1: Enabled.\nBit5: CAPPn: Capture Posi tive Functi on Enable. \nThis bit enables/disables the positive edge capture for PCA module n. \n0: Disabled.\n1: Enabled.\nBit4: CAPNn: Capture Negative Function Enable. \nThis bit enables/disables the negative edge capture for PCA module n. \n0: Disabled.1: Enabled.\nBit3: MATn: Match Function Enable. \nThis bit enables/disables the match function fo r PCA module n. When enabled, matches of \nthe PCA counter with a module\'s capture/compare register cause the CCFn bit in PCA0MD \nregister to be set to logic 1. \n0: Disabled.1: Enabled.\nBit2: TOGn: Toggle Function Enable. \nThis bit enables/disables the toggle function  for PCA module n. When enabled, matches of \nthe PCA counter with a module\'s capture/compare register cause the logic level on the CEXn \npin to toggle. If the PWMn bit is also set to logic 1, the module operates in Frequency Output \nMode.0: Disabled.\n1: Enabled.\nBit1: PWMn: Pulse Width Modulation Mode Enable. \nThis bit enables/disables the PWM function for PCA module n. When enabled, a pulse width \nmodulated signal is output on the CEXn pin. 8-bit PWM is used if PWM16n is cleared; 16-bit \nmode is used if PWM16n is set to logic 1. If the TOGn bit is also set, the module operates in Frequency Output Mode.\n0: Disabled.\n1: Enabled.\nBit0: ECCFn: Capture/Compare Flag Interrupt Enable. \nThis bit sets the masking of the Capture/Compare Flag (CCFn) interrupt. \n0: Disable CCFn interrupts.\n1: Enable a Capture/Compare Flag interrupt request when CCFn is set.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\nPWM16n ECOMn CAPPn CAPNn MATn TOGn PWMn ECCFn 00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xDA, 0xDB, 0xDC, \n0xDD, 0xDE\nC8051F310/1/2/3/4/5/6/7\n218 Rev. 1.8SFR Definition  18.4.  PCA0L: PCA Counter/Timer Low Byte\nSFR Definition  18.5.  PCA0H: PCA Counter /Timer High Byte  \nSFR Definition  18.6.  PCA0CPLn: PCA Capture Module Low ByteBits 7–0: PCA0L: PCA Co unter/Timer Low Byte. \nThe PCA0L register holds the low byte (LSB) of the 16-bit PCA Counter/Timer.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xF9\nBits 7–0: PCA0H: PCA Counter/Timer High Byte. \nThe PCA0H register holds the high byte (MSB) of the 16-bit PCA Counter/Timer.R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xFA\nPCA0CPLn Address: PCA0CPL0 = 0xFB (n  = 0), PCA0CPL1 = 0xE9 (n = 1),\nPCA0CPL2 = 0xEB (n = 2), PCA0CPL3 = 0xED (n = 3),PCA0CPL4 = 0xFD (n = 4)\nBits7–0: PCA0CPLn: PCA Capture Module Low Byte.\n The PCA0CPLn register holds the low byte (LSB) of the 16-bit capture module n. R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xFB, 0xE9, 0xEB, \n0xED, 0xFD \nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 219SFR Definition  18.7.  PCA0CPHn: PCA Captur e Module High Byte\nPCA0CPHn Address: PCA0CPH0 = 0xFC (n  = 0), PCA0CPH1 = 0xEA (n = 1),\nPCA0CPH2 = 0xEC (n = 2), PCA0CPH3 = 0xEE (n = 3),\nPCA0CPH4 = 0xFE (n = 4)\nBits7–0: PCA0CPHn: PCA Ca pture Module High Byte.\n The PCA0CPHn register holds the high byte  (MSB) of the 16-bit capture module n. R/W R/W R/W R/W R/W R/W R/W R/W Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0 SFR Address:\n0xFC, 0xEA, \n0xEC,0xEE, 0xFE\nC8051F310/1/2/3/4/5/6/7\n220 Rev. 1.8NOTES :\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 22119. Revision Specific Behavior\nThis chapter contains behavioral differences between C8051F310/1 “REV  A” and “REV B” or later devices. \nThese differences do not affect the functionality or performance of most systems and are described below.\n19.1. Revision Identification\nThe Lot  ID Code on the top side of the device package can be used for decoding device revision informa -\ntion. On C8051F310 devices, the revision le tter is the second-to-last letter of the Lot  ID Code. On \nC8051F311 devices, the revision letter is the last letter of the Lot  ID Code. Figure  19.1 shows how to find \nthe Lot  ID Code on the top side of the device package.\nFigure 19.1. Reading Package Marking\n19.2. Reset Behavior\nThe reset behavior of C8051F310/1 “REV  A” devices is di fferent than “REV  B” and later devices. The dif -\nferences affect the state of the RST pin during a VDD Monitor reset and GPIO pins during any device reset.\n19.2.1. Weak Pullups on GPIO Pins\nOn “REV  A” devices, GPIO pins are tri-stated with weak pullups disabled  during the assertion phase of \nany reset. The pullups are enabled immediately following reset de-assertion.\nOn “REV  B” and later devices, GPIO pins are tri-stated with weak pullups enabled during and after the \nassertion phase of any reset.\n19.2.2. VDD Monitor and the RST  Pin\nOn “REV  A” devices, a VDD Monitor reset does not affect the state of the RST pin.\nOn “REV  B” and later devices, a VDD Monitor reset will pull the RST pin low for the duration of the brown -\nout condition.C8051F310\nT2ABGF AC\n      ^ indicates REV A\n0227 EPCYG\nF311\nABGF A\n    ^ indicates REV A\n    C8051F311 Package Marking C8051F310 Package Marking\nC8051F310/1/2/3/4/5/6/7\n222 Rev. 1.819.3. PCA Counter\nOn “REV  A” devices, if the main PCA counter (PCA0H  : PCA0L) overflows during the execution phase of a \nread-modify-write instruction (bit- wise SETB or CLR, ANL, ORL, XRL) that targets the PCA0CN register, \nthe CF (Counter Overflow) bit will not be set. An example softwa re work-around is as follows:\nStep 1.  Disable global interrupts (EA = 0).\nStep 2.  Read PCA0L. This will latch the value of PCA0H.Step 3.  Read PCA0H, saving the value.Step 4.  Execute the bit-wise operation on CCFn (for example, CLR CCF0, or CCF0 = 0;).Step 5.  Read PCA0L.Step 6.  Read PCA0H, saving the value.Step 7.  If the value of PCA0H read in Step 3 is 0xFF and the value for PCA0H read in Step 6 is \n0x00, then   manually set the CF bit in software (for example, SETB CF, or CF = 1;).\nStep 8.  Re-enable interrupts (EA = 1).\nThis behavior is not present on “REV  B” and later devices. Software written for “REV  A” devices will run on \n“REV  B” and later devices without modification.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 22320. C2 Interface\nC8051F31x devices include an on-chi p Silicon Labs 2-Wire (C2) debug interface to allow Flash program -\nming and in-system debugging with the production part  installed in the end applic ation. The C2 interface \nuses a clock signal (C2CK) and a bi-directional C2 data signal (C2D) to transfer information between the device and a host system. See the C2 Interface Specification for details on the C2 protocol.\n20.1. C2 Interface Registers\nThe following describes the C2 registers necessary to  perform Flash programming through the C2 inter -\nface. All C2 registers are accessed through the C2 inte rface as described in the C2 Interface Specification.\nC2 Register Definition  20.1.  C2ADD: C2 Address  \nC2 Register Definition  20.2.  DEVICEID: C2 Device IDBits7–0: The C2ADD register is accessed via the C2 interface to select the ta rget Data register for \nC2 Data Read and Data Write commands.Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nAddress Description\n0x00 Selects the Device ID regist er for Data Read instructions\n0x01 Selects the Revision ID register for Data Read instructions\n0x02Selects the C2 Flash Programming Control register for Data \nRead/Write instructions\n0xB4Selects the C2 Flash Programming Data register for Data \nRead/Write instructions\nThis read-only register returns the 8-bit device ID: 0x08 (C80 51F310/1/2/3/4/5/6/7).Reset Value\n00001000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nC8051F310/1/2/3/4/5/6/7\n224 Rev. 1.8C2 Register Definition  20.3.  REVID: C2 Revision ID\nC2 Register Definition  20.4.  FPCTL: C2 Flash Programming Control  \nC2 Register Definition  20.5.  FPDAT: C2 Flash Programming DataThis read-only register returns the 8-bit revision ID.Reset Value\nVariable\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nBits7–0 FPCTL: Flash Programming Control Register.\nThis register is used to enable Flash programmi ng via the C2 interface. To enable C2 Flash \nprogramming, the following codes must be writte n in order: 0x02, 0x01. Note that once C2 \nFlash programming is enabled, a system reset mu st be issued to resume normal operation.Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nBits7–0: FPDAT: C2 Flash Programming Data Register.\nThis register is used to pass Flash comma nds, addresses, and data during C2 Flash \naccesses. Valid commands are listed below.Reset Value\n00000000\nBit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0\nCode Command\n0x06 Flash Block Read\n0x07 Flash Block Write\n0x08 Flash Page Erase0x03 Device Erase\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 22520.2. C2 Pin Sharing\nThe C2 protocol allows the C2 pins to be shared wi th user functions so that in-system debugging and \nFlash programming functions may be performed. This is possible because C2 co mmunication is typically \nperformed when the device is in the halt state, where all on-chip peripherals and user software are stalled. \nIn this halted state, the C2 interface can safely ‘b orrow’ the C2CK (/RST) and C2D (P3.0) pins. In most \napplications, external resistors are required to isolat e C2 interface traffic from the user application. A typi -\ncal isolation configur ation is shown in Figure  20.1.\nFigure 20.1. Typical C2 Pin Sharing\nThe configuration in Figure  20.1 assumes the following:\n1. The user input (b) cannot change stat e while the target device is halted.\n2. The /RST pin on the target device is used as an input only.\nAdditional resistors may be necessary depending on the specific application.C2DC2CK /Reset  (a)\nInput (b)\nOutput (c)\nC2 Interface MasterC8051Fxxx\nC8051F310/1/2/3/4/5/6/7\n226 Rev. 1.8DOCUMENT  CHANGE  LIST\nRevision 1.5 to Revision 1.6\n• Added two part numbers: C8051F316 and C8051F317\n• Changed package nomenclature from MLP to QFN.\n• Chapter 1.“System Overview” : Updated Table  1.1, “Product Selection Guide,” on page  18, with new \nordering part numbers; added block di agrams for the new parts, and updated Figure  1.13.\n• Added Table  3.2, “Electrical Characterist ics Quick Reference,” on page  38.\n• Chapter 4.“Pinout and Package Definitions” : Updated Table  4.1 and added package diagrams for the \nnew parts.\n• Chapter 5.“12-Bit ADC (ADC0, C8 051F310/1/2/3/6 only)” : Updated Figure  5.1, SFR Definition 5.1 , and \nSFR Definition 5.2  to show behavior of new parts.\n• Chapter 9.“Reset Sources” : Added note to SFR Definition 9.2  describing the behavior of read-modify-\nwrite instructions on this  register; Corrected Max VDD Ramp Time to 1 mS.\n• Chapter 10.“Flash Memory” : Updated Table  10.1 to accommodate the new parts; Added Table  10.2, \n“Flash Security Summary,” on page  114 for clarity, replacing the Flash security summaries text.\n• Chapter 13.“Port Input/Output” : Updated text, Figure  13.1, Figure  13.3, Figure  13.4, and SFR Defini -\ntion 13.7  through SFR Definition 13.17  to accommodate the new part numbers.\n• Chapter 18.“Programmable Counter Array” : In Table  18.3, corrected internal os cillator reset frequency \nfrom 3,060,000 Hz to 3,062,500 Hz.\n• Chapter 20.“C2 Interface” : Updated C2 Register Definition 20.2  to accommodate the new part num -\nbers. Corrected Device ID that is common to all \'F31x devices from 0x09 to 0x08; Removed references \nto "boundary scan" because this feature is not supported by the \'F31x devices.\nRevision 1.6 to Revision 1.7\n• Fixed various minor errors.\n• Updated values in Table  3.1, “Global DC Electrical  Characteristics,” on page  36.\n• Added Section “ 10.4.  Flash Write and Erase Guidelines ” on page  115.\nRevision 1.7 to Revision 1.8\n• Updated the LQFP-32 landing diagram in Figure  4.3 and Table  4.3, “LQFP-32 Landing Pattern Dimen -\nsions,” on page  43.\n• Updated the QFN-28 package drawing and landing diagram in Figure  4.5, Table  4.4, “QFN-28 Pack -\nage Dimensions,” on page  45, Figure  4.6, and Table  4.5, “QFN-28 Landing Pa ttern Dimensions,” on \npage  46.\n• Updated the QFN-24 package drawing and landing diagram in Figure  4.8, Table  4.6, “QFN-24 Pack -\nage Dimensions,” on page  48, Figure  4.9, and Table  4.7, “QFN-24 Landing Pa ttern Dimensions,” on \npage  49.\nC8051F310/1/2/3/4/5/6/7\nRev. 1.8 227NOTES :\nhttp://www.silabs.comSilicon Laboratories Inc.\n400 West Cesar ChavezAustin, TX 78701USASmart. \nConnected. \nEnergy-Friendly.\nProducts\nwww.silabs.com/productsQuality\nwww.silabs.com/qualitySupport and Community\ncommunity.silabs.com\nDisclaimer\nSilicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or \nintending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and "Typical" \nparameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes \nwithout further notice and limitation to product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included \ninformation. Silicon Labs shall have no liability for the consequences of use of the information supplied herein. This document does not imply or express copyright licenses granted \nhereunder to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any Life Support System without the specific written consent of \nSilicon Labs. A "Life Support System" is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant \npersonal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass \ndestruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons.\nTrademark Information\nSilicon Laboratories Inc.® , Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, Clockbuilder®, CMEMS®, DSPLL®, EFM®, \nEFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, "the world’s most energy friendly microcontrollers", Ember®, EZLink®, EZRadio®, EZRadioPRO®, \nGecko®, ISOmodem®, Micrium, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress®, Zentri and others are trademarks or registered \ntrademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. All other \nproducts or brand names mentioned herein are trademarks of their respective holders. \n'}]
!==============================================================================!
### Component Summary: C8051F310-GQR

#### Key Characteristics and Specifications:
- **Voltage Ratings**: 
  - Supply Voltage: 2.7 to 3.6 V
- **Current Ratings**: 
  - Typical operating current: 5 mA at 25 MHz; 11 µA at 32 kHz
  - Typical stop mode current: 0.1 µA
- **Power Consumption**: 
  - Operating current varies based on clock frequency and mode.
- **Operating Temperature Range**: 
  - -40 to +85 °C
- **Package Type**: 
  - 32-pin LQFP (Lead Quad Flat Package)
- **Special Features**: 
  - On-chip debug circuitry for non-intrusive in-system debugging.
  - 10-bit ADC with up to 200 ksps sampling rate.
  - Programmable internal oscillator.
  - Multiple serial communication interfaces (UART, SMBus, SPI).
  - Watchdog timer functionality.
- **Moisture Sensitive Level**: 
  - Level 1 (JEDEC J-STD-020E).

#### Description:
The **C8051F310-GQR** is a high-speed, fully integrated mixed-signal microcontroller (MCU) from Silicon Laboratories, part of the C8051F31x family. It features a **CIP-51 microcontroller core**, which is fully compatible with the MCS-51 instruction set, allowing for efficient execution of instructions with a peak throughput of 25 MIPS at a 25 MHz clock frequency. The device includes a variety of integrated peripherals, including a 10-bit ADC, timers, and serial communication interfaces, making it suitable for a wide range of applications.

#### Typical Applications:
The C8051F310-GQR is designed for various applications, including:
- **Embedded Control Systems**: Ideal for applications requiring precise control and monitoring.
- **Data Acquisition**: The integrated ADC allows for effective data collection from sensors.
- **Industrial Automation**: Suitable for use in automation systems due to its robust performance and multiple I/O options.
- **Consumer Electronics**: Can be used in devices requiring microcontroller functionality with analog and digital interfacing.
- **Communication Systems**: The UART, SMBus, and SPI interfaces enable easy integration into communication networks.

This MCU is particularly advantageous in applications where low power consumption and high performance are critical, such as battery-operated devices and real-time processing systems.